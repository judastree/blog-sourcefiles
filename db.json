{"meta":{"version":1,"warehouse":"1.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":1},{"_id":"themes/next/source/js/search-toggle.js","path":"js/search-toggle.js","modified":1},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":1},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":1},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":1},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1},{"_id":"source/images/zqtzhanghao.png","path":"images/zqtzhanghao.png","modified":1},{"_id":"source/images/xiaomisystem.jpg","path":"images/xiaomisystem.jpg","modified":1},{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":1},{"_id":"source/images/webstormregister.png","path":"images/webstormregister.png","modified":1},{"_id":"source/images/startadb.jpg","path":"images/startadb.jpg","modified":1},{"_id":"source/images/singlenumber.png","path":"images/singlenumber.png","modified":1},{"_id":"source/images/rotatearray.png","path":"images/rotatearray.png","modified":1},{"_id":"source/images/reverselist.png","path":"images/reverselist.png","modified":1},{"_id":"source/images/removenthfromend.png","path":"images/removenthfromend.png","modified":1},{"_id":"source/images/removedebug.png","path":"images/removedebug.png","modified":1},{"_id":"source/images/profile.jpeg","path":"images/profile.jpeg","modified":1},{"_id":"source/images/poweroftwo.png","path":"images/poweroftwo.png","modified":1},{"_id":"source/images/plusone.png","path":"images/plusone.png","modified":1},{"_id":"source/images/pathsumruntime.png","path":"images/pathsumruntime.png","modified":1},{"_id":"source/images/nodaemon.jpg","path":"images/nodaemon.jpg","modified":1},{"_id":"source/images/nextpointer.png","path":"images/nextpointer.png","modified":1},{"_id":"source/images/network.jpg","path":"images/network.jpg","modified":1},{"_id":"source/images/movezeroes.png","path":"images/movezeroes.png","modified":1},{"_id":"source/images/mergesortedarray.png","path":"images/mergesortedarray.png","modified":1},{"_id":"source/images/merge2sortedlists.png","path":"images/merge2sortedlists.png","modified":1},{"_id":"source/images/maxdepth.png","path":"images/maxdepth.png","modified":1},{"_id":"source/images/longestcommonprefix.png","path":"images/longestcommonprefix.png","modified":1},{"_id":"source/images/isomorphicstring.png","path":"images/isomorphicstring.png","modified":1},{"_id":"source/images/intersection.png","path":"images/intersection.png","modified":1},{"_id":"source/images/gruntdebuginwebstorm.png","path":"images/gruntdebuginwebstorm.png","modified":1},{"_id":"source/images/fastbootmode.jpg","path":"images/fastbootmode.jpg","modified":1},{"_id":"source/images/excelcolumntotitle.png","path":"images/excelcolumntotitle.png","modified":1},{"_id":"source/images/countandsay.png","path":"images/countandsay.png","modified":1},{"_id":"source/images/bootunlock.jpg","path":"images/bootunlock.jpg","modified":1},{"_id":"source/images/bootlock.jpg","path":"images/bootlock.jpg","modified":1},{"_id":"source/images/adbserverfail.jpg","path":"images/adbserverfail.jpg","modified":1}],"Cache":[{"_id":"source/CNAME","shasum":"b15bcc5d51bc1c31d83cb4aaa35ba95c28a5377f","modified":1451222675000},{"_id":"source/_posts/ADB-server-didnot-ACK.md","shasum":"d4031c7b7f56049f7f60338a3e5c3bf977ad6086","modified":1451222675000},{"_id":"source/_posts/Android Url Scheme-所谓的唤醒.md","shasum":"acf1e1d649a605c34b05767f9c66b20fe012f427","modified":1451222675000},{"_id":"source/_posts/Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported.md","shasum":"e4bbb74ce448e7f6a9b1015f7b753a5c92e36f8e","modified":1451222675000},{"_id":"source/_posts/Android-Studio-启动找不到JVM.md","shasum":"a0f2185f1921228ac4778ead400b0c65b3b01c50","modified":1451222675000},{"_id":"source/_posts/Android-录制操作视频.md","shasum":"5f2399cf5051a741db6d07f587714cbc4717b408","modified":1451222675000},{"_id":"source/_posts/Android怎么打Log.md","shasum":"ca0fe7581da4e7660320eca176f6fd79cc2b50ea","modified":1451222675000},{"_id":"source/_posts/Chrome-timeline-检测页面性能.md","shasum":"6dc0b2dcaf6cc6c168f94ee20106ae7851945777","modified":1451222675000},{"_id":"source/_posts/Chrome和Chromium的区别.md","shasum":"70785fc3e695eaea304fc7444b467db780a9f6d3","modified":1451222675000},{"_id":"source/_posts/Chrome调试技巧.md","shasum":"043c4e703c4685e28db048b1e5bbe6bd60ca6fe0","modified":1451222675000},{"_id":"source/_posts/Darling,我好想去死.md","shasum":"365236f62bc9fc20664c38831f1ed27fb65bc4e1","modified":1451222675000},{"_id":"source/_posts/Debug-Grunt-in-Webstorm.md","shasum":"fedcfbed3ac1f2edc4c72ade9908e36d04209a14","modified":1451223455000},{"_id":"source/_posts/Git-部分提交.md","shasum":"46a2fb1a32528c0b661b2dc949c25a4c990eff58","modified":1451222675000},{"_id":"source/_posts/IOS-模拟器回到主页.md","shasum":"5d70f9eed9726c488fec3fff4cf4810be2c2e822","modified":1451222675000},{"_id":"source/_posts/LeetCode-Count-and-Say.md","shasum":"97da0865cc4679ce24b5abfaf4d180c4fa30d3e0","modified":1451222675000},{"_id":"source/_posts/LeetCode-Excel-Sheet-Column-Title.md","shasum":"06bde97e6bc4109e7e12c50a3ef40326c9d1b80c","modified":1451222675000},{"_id":"source/_posts/LeetCode-Intersection-of-Two-Linked-Lists.md","shasum":"54ab0b535a75ee5d1ccecd914b04ee050f6404b8","modified":1451222675000},{"_id":"source/_posts/LeetCode-Isomorphic-String.md","shasum":"82cc0b0e1a0043ac029ec450a2263537431d5957","modified":1451222675000},{"_id":"source/_posts/LeetCode-Longest-Common-Prefix.md","shasum":"9ddab4199b3aeb619964129564146761d4e06b94","modified":1451222675000},{"_id":"source/_posts/LeetCode-Maximum-Depth-of-Binary-Tree.md","shasum":"a824d4178dc90e4875016b9a2b2a583e8ba17b0c","modified":1451222675000},{"_id":"source/_posts/LeetCode-Merge-Sorted-Array.md","shasum":"2036b6c9715905b3e334612a190807f2af26f836","modified":1451222675000},{"_id":"source/_posts/LeetCode-Merge-Two-Sorted-Lists.md","shasum":"89c7d235ba0023a07c49e286a8b8e6b9727a5395","modified":1451222675000},{"_id":"source/_posts/LeetCode-Move-Zeroes.md","shasum":"733953f91cadd4f31fc512e0e3eaa3b9a59c634a","modified":1451222675000},{"_id":"source/_posts/LeetCode-Number-of-1-Bits.md","shasum":"6eb8e41a8cc8ffffa612944d23c34c1b79586c75","modified":1451222675000},{"_id":"source/_posts/LeetCode-Palindrome-Linked-List.md","shasum":"8bdafab7be0ba0798103f793e2b7846690c2a1da","modified":1451222675000},{"_id":"source/_posts/LeetCode-Plus-One.md","shasum":"d49eb68b4a21815377aa0a58b7fdd166d9744088","modified":1451222675000},{"_id":"source/_posts/LeetCode-Populating-Next-Right-Pointers-in-Each-Node.md","shasum":"a81e070c750c02b736f1090ed3508651f90a4ca5","modified":1451222675000},{"_id":"source/_posts/LeetCode-Power-of-Two.md","shasum":"cae7cf8257ef128013910abc6232144f847915ff","modified":1451222675000},{"_id":"source/_posts/LeetCode-Remove-Nth-from-end.md","shasum":"213c1fb07b495ebb257ee347631b537c9dc07e84","modified":1451222675000},{"_id":"source/_posts/LeetCode-Reverse-Linked-List.md","shasum":"7d05b501ee7a5c1f24c7f194d59a38851c33f68e","modified":1451222675000},{"_id":"source/_posts/LeetCode-Rotate-Array.md","shasum":"d780313208d37c0aa47b7fa25513519ea0748b36","modified":1451222675000},{"_id":"source/_posts/LeetCode-Single-Number.md","shasum":"44111a33e2507f93c83d02802bbaf9dc85262079","modified":1451222675000},{"_id":"source/_posts/LeetCode-Valid-Anagram.md","shasum":"61958fe58511b0de429dcc0eda9c74ad590a4f04","modified":1451222675000},{"_id":"source/_posts/LeetCode:Path Sum.md","shasum":"ced418288b5a281591135fea0bb4b5f2e1a7549f","modified":1451222675000},{"_id":"source/_posts/Mac-OS-X-中配置Apache.md","shasum":"b7b0ce12cd926811d39c65f885aa95cb24f27a04","modified":1451222675000},{"_id":"source/_posts/Mac-ox-默认环境变量.md","shasum":"3a07050a54405e0ba36946421efb83f7f5f518f1","modified":1451222675000},{"_id":"source/_posts/Mac下取消Chrome的ajax请求跨域.md","shasum":"aed7922575d2b6773db8357412c09d4e8d814a01","modified":1451222675000},{"_id":"source/_posts/Mac中修改host.md","shasum":"f908e843f5dacf94d6bb09bce59af7d28e72498e","modified":1451222675000},{"_id":"source/_posts/Mac版Webstorm的一些快捷键.md","shasum":"3f50361d18d21e3b189cd108b93d4714a953a63d","modified":1451222675000},{"_id":"source/_posts/Mitmproxy-抓包工具.md","shasum":"f8c28c13b32621aa95b7dec37f8579a434d915ba","modified":1451222675000},{"_id":"source/_posts/Monkey日志分析.md","shasum":"4704a8d402ee805c2317e07c4d51310898a10e76","modified":1451222675000},{"_id":"source/_posts/Nexus-7-刷小米开发版系统助力webview调试.md","shasum":"2f9d34a3fa4add8d4af1fbbe793a42f6982c764f","modified":1451222675000},{"_id":"source/_posts/Nexus-7-解锁.md","shasum":"a4d356a4373a4b3391f6d0a2592234cb790d5ef4","modified":1451222675000},{"_id":"source/_posts/Node-5-0-Cannot-find-module-lib.md","shasum":"a462964e2feb98e38af8886c6f651eeac64b185d","modified":1451222675000},{"_id":"source/_posts/React-Native-Node-4-0.md","shasum":"229cb7042e86cb6af59642c6906901ed8482f612","modified":1451222675000},{"_id":"source/_posts/React学习笔记.md","shasum":"f933c2f0d76ba0d9ba654618ad91f0bbc488c025","modified":1451222675000},{"_id":"source/_posts/UnsatisfiedLinkError.md","shasum":"734b338bd6dc1a7bf6fbce3d20770442ba8ccd56","modified":1451222675000},{"_id":"source/_posts/backbone的事件机制.md","shasum":"e0d2480ee6e6e055cfc7c41e532f0d00eb812c55","modified":1451222675000},{"_id":"source/_posts/blink-chromium-webkit-是什么关系.md","shasum":"adbca5c2627a913ceb2cdecb604bb3340f36c154","modified":1451222675000},{"_id":"source/_posts/box-sizing是什么东西.md","shasum":"d127171d2409594abe683685a5e6399ea4af3a7b","modified":1451222675000},{"_id":"source/_posts/currentColor关键字.md","shasum":"248043e9d475f224b26427d2f502d92c63c2f0a4","modified":1451222675000},{"_id":"source/_posts/git .ignore无效?.md","shasum":"4c8f3da2b7cb653d96d932e1f99d1f70ff1406d7","modified":1451222675000},{"_id":"source/_posts/git-modified-xxx-modified-content-untracked-content-commit-content.md","shasum":"743431b896e26709c46e16f51a27f4172e9d73f0","modified":1451224888000},{"_id":"source/_posts/git-stash-缓存当前的修改.md","shasum":"2418c6671a9990f51fe150e5e1ba3314433ebbea","modified":1451222675000},{"_id":"source/_posts/mac 调出adb shell.md","shasum":"a058027d9929d95d2387fa0b03b158aee8b59bbc","modified":1451222675000},{"_id":"source/_posts/markdown语法总忘.md","shasum":"a5f711fa588e1a4d8a75469ec8a853fbb64ede95","modified":1451222675000},{"_id":"source/_posts/node-应用绑定80端口.md","shasum":"c085702ba020b7aff8ff981bed0603e7966c3ba9","modified":1451222675000},{"_id":"source/_posts/nodejs入门文章读后感.md","shasum":"9620f98749ddb906213957411617059221843821","modified":1451222675000},{"_id":"source/_posts/node下如何调试.md","shasum":"7b1d64ada101e0ccc4d085c6d3a7939a95907e2a","modified":1451222675000},{"_id":"source/_posts/requirejs-的运行机制.md","shasum":"7bbcc522a6359124fbd4e20f4869de274283d7d9","modified":1451222675000},{"_id":"source/_posts/setWebChromeClient-setWebClient的区别.md","shasum":"107371377ecaa703e637ddfbd20a9e4b769d3c31","modified":1451222675000},{"_id":"source/_posts/style-currentStyle-getComputedStyle-三者区别.md","shasum":"e057c6fd0f18995e58a1d57d593fb88956ea627a","modified":1451222675000},{"_id":"source/_posts/ubuntu-上安装最新版本的express.md","shasum":"91a9ffb742e6ca78bff7348eb11e5b5870ac8ea0","modified":1451222675000},{"_id":"source/_posts/webstorm-11激活.md","shasum":"8effedf6d2b98eb66d34eb328c0e1d9571d373fc","modified":1451222675000},{"_id":"source/_posts/世界那么大翻墙出去看看.md","shasum":"e6775cbe4fc6029fa9fad54f2e66b4edf5a01517","modified":1451222675000},{"_id":"source/_posts/主流模引擎一览.md","shasum":"76ae66fd9fe870f53a34b595aaae9ae68717a454","modified":1451222675000},{"_id":"source/_posts/二分查找算法.md","shasum":"9f94e20d55df6d0ff546adec9148153ca11a21fa","modified":1451222675000},{"_id":"source/_posts/二叉排序树的实现.md","shasum":"cc17421be8181ed35fc8628065d510d1fe9b94bf","modified":1451222675000},{"_id":"source/_posts/冥王星为什么有个心呢？.md","shasum":"e9aab5eb9bb6adce656e1267eb20c916ca4bc122","modified":1451222675000},{"_id":"source/_posts/判断参数是Array还是Object.md","shasum":"f014570b2575ba8cac2cfde0965dccf246f0ae55","modified":1451222675000},{"_id":"source/_posts/修改Mac终端命令行颜色.md","shasum":"2f3ee24c0ba26fdebc0ac81660103bc382fae54b","modified":1451222675000},{"_id":"source/_posts/前端自动化测试探索.md","shasum":"75d229f09417bc784ee9e4da17ee8202dd577264","modified":1451222675000},{"_id":"source/_posts/单线程的Javascript.md","shasum":"f8a3268ec5e574c077f53d5e08b83f29c1ae99a6","modified":1451222675000},{"_id":"source/_posts/坑死的Amazon-AWS.md","shasum":"a48aeec0cdb5e9276a375831b4085901f051fe0c","modified":1451222675000},{"_id":"source/_posts/如何利用好碎片化的事件.md","shasum":"d2721a5b1634041f378736acc45b58d691067864","modified":1451222675000},{"_id":"source/_posts/如何进行Monkey自动化测试.md","shasum":"fc7d569e99222feb06b030a4eed239ca84452f24","modified":1451222675000},{"_id":"source/_posts/学习下ES6.md","shasum":"646830a7106702e094de08405d7d76b36c5d3694","modified":1451222675000},{"_id":"source/_posts/将hexo部署在github pages 的子目录.md","shasum":"9caa78674c4be7fe262f045d3674a3b98c4e1ed6","modified":1451222675000},{"_id":"source/_posts/将数字转换为千分位的金额格式.md","shasum":"65cbd45fd4b3eb286d0f13a0ba3a5b8d3940da88","modified":1451222675000},{"_id":"source/_posts/微信、手Q、Qzone之x5内核inspect调试解决方案.md","shasum":"8d2a8f20bc7eefaf73a505115938af6eed86ae1c","modified":1451222675000},{"_id":"source/_posts/正则获取url中的参数.md","shasum":"f14ddd1139151b08baededa311ff9e9d3ec20e3a","modified":1451222675000},{"_id":"source/_posts/求一个集合的所有子集.md","shasum":"c51d650153e554d7b3ee8d41fd64c793ed1a4eee","modified":1451222675000},{"_id":"source/_posts/快速排序算法.md","shasum":"83ded7e9244317bfeb05271436467366a3a4d8d6","modified":1451222675000},{"_id":"source/_posts/生活好Boring啊.md","shasum":"797bf396758396f864a514f3c7ac999b43d03d27","modified":1451222675000},{"_id":"source/_posts/自定义错误模块无法识别此错误.md","shasum":"7e7252b373e2e5cb992e2b450c2a99095874a33f","modified":1451222675000},{"_id":"source/_posts/获取keystore签名中得sha1.md","shasum":"95cddc08c5ee713702a6d00b1d0a7887142bad0b","modified":1451222675000},{"_id":"source/_posts/获取object的属性长度.md","shasum":"4a307bc93d0abf289a47314aeeede81c49f791cf","modified":1451222675000},{"_id":"source/_posts/这里面的一些console方法请用起来.md","shasum":"1dca1c63bda1d49512b65c707d75f6f6d659128c","modified":1451222675000},{"_id":"source/_posts/页面性能分析工具.md","shasum":"38db8fa188ed29d8b8555164d3c6ec976f0e6a22","modified":1451222675000},{"_id":"source/about/index.md","shasum":"ae3209f09d165bd5a5ff25a69be343e6cbde2733","modified":1451222675000},{"_id":"source/friends/index.md","shasum":"1ddb36403bd7d626f5238ea36cd298986bb733bc","modified":1451222675000},{"_id":"source/images/adbserverfail.jpg","shasum":"6d9934edd8479fd713191d2367d6da4c087b93a3","modified":1451222675000},{"_id":"source/images/movezeroes.png","shasum":"0dd4e2a877668668707050233a1f9d06cb7d7369","modified":1451222675000},{"_id":"source/images/nodaemon.jpg","shasum":"4f2c3b49b9a0c94b45ded10703fa559b4889c2cd","modified":1451222675000},{"_id":"source/images/profile.jpeg","shasum":"d38edb883d276d6fcb4f66441b5dd23c59f4c02f","modified":1451222675000},{"_id":"source/images/startadb.jpg","shasum":"42305932eca22441e1aadb197f18cff505478e7d","modified":1451222675000},{"_id":"source/tags/index.md","shasum":"619c45fff9ea9b08d9e75d27a1cabea4e94ef277","modified":1451222675000},{"_id":"source/wechat/index.md","shasum":"2b5ed5009927cf960c0bb9754e7d45648dff4e23","modified":1451222675000},{"_id":"source/images/webstormregister.png","shasum":"95d6990524e1ab17c0cb5f872bfd4f6a3a0065f2","modified":1451222675000},{"_id":"source/images/bootunlock.jpg","shasum":"5465609a0307ec760fefbb7b5e0a78ea3286ccd6","modified":1451222675000},{"_id":"source/images/countandsay.png","shasum":"aaa007d8c9b44b9e2f75f20777372d00e168450b","modified":1451222675000},{"_id":"source/images/excelcolumntotitle.png","shasum":"19aa90992bbceab184c602741e240a054f91774d","modified":1451222675000},{"_id":"source/images/fastbootmode.jpg","shasum":"abcacae82f997d7adff584fbfb9fe829d312e671","modified":1451222675000},{"_id":"source/images/gruntdebuginwebstorm.png","shasum":"cb1caff5c2f2be0f9785cc178dd48c5548ac029d","modified":1451222675000},{"_id":"source/images/intersection.png","shasum":"24fcfcdcda1846ab42d27e1daf31c0782c726336","modified":1451222675000},{"_id":"source/images/longestcommonprefix.png","shasum":"55fe965a504718cbcd1fad29906379868717d424","modified":1451222675000},{"_id":"source/images/isomorphicstring.png","shasum":"4b43e5206e21702522c174417593102bb4ed3e27","modified":1451222675000},{"_id":"source/images/maxdepth.png","shasum":"7a616eb753e587dd5927d4dc63c45fd198698cc3","modified":1451222675000},{"_id":"source/images/merge2sortedlists.png","shasum":"40c0717d92ec83d93730ff8893de7b5b34be14b6","modified":1451222675000},{"_id":"source/images/mergesortedarray.png","shasum":"cc7ddb7ccbc9cff8abbb5dd48dac99fb31db600f","modified":1451222675000},{"_id":"source/images/network.jpg","shasum":"f337db46bc1b660a7b58920684efc4d4c954c0b9","modified":1451222675000},{"_id":"source/images/nextpointer.png","shasum":"762f2d0d207af21c0ad2f9037156e9d2786d34fc","modified":1451222675000},{"_id":"source/images/plusone.png","shasum":"4f72aa0523328d3e7a978da2406a64a9e975e0f8","modified":1451222675000},{"_id":"source/images/pathsumruntime.png","shasum":"4476757aadfd0a2d444df5df31bdfb00496250b7","modified":1451222675000},{"_id":"source/images/poweroftwo.png","shasum":"b0fe7df1090a04d05ab15a8a355c49efc21b05fc","modified":1451222675000},{"_id":"source/images/removenthfromend.png","shasum":"311efb294b4ccc7224979659ff56bbbe8d909782","modified":1451222675000},{"_id":"source/images/reverselist.png","shasum":"7336ef713e000703cba9e06077742775a7412329","modified":1451222675000},{"_id":"source/images/rotatearray.png","shasum":"dc68c37e6a44c1a391508de47c529305dd8dc3fb","modified":1451222675000},{"_id":"source/images/singlenumber.png","shasum":"423321e94f6b3ac658fea0f68d61482ac27c85af","modified":1451222675000},{"_id":"source/images/xiaomisystem.jpg","shasum":"fc1a399e1a263fe7f1bdd2e44bf42ba899f1b4e5","modified":1451222675000},{"_id":"source/images/bootlock.jpg","shasum":"cf8c0ce9cec77a59e6b6fb8ab24d783d8c5148a6","modified":1451222675000},{"_id":"source/images/removedebug.png","shasum":"a499e27a7a7580280db6bcdb563748a2d516b68f","modified":1451222675000},{"_id":"source/images/wechat.png","shasum":"ac686b7bd6db2da209657c59a5a494259bfdc5f8","modified":1451222675000},{"_id":"source/images/zqtzhanghao.png","shasum":"d7095b720d4a7b4a03c5a418b214f8ddc47dec24","modified":1451222675000},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1437624370000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1437624370000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1437624370000},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1437624370000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1437624370000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1437624370000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1437624370000},{"_id":"themes/next/README.md","shasum":"aa16555d1aa1d80666ab9085042e118cdb7f5ef2","modified":1437624370000},{"_id":"themes/next/_config.yml","shasum":"b976d756b8ad6712c2c0edcf01375e204c9634fb","modified":1443688057000},{"_id":"themes/next/languages/de.yml","shasum":"784bea46de28a3113d7c91621740f521dae09dce","modified":1437624370000},{"_id":"themes/next/languages/default.yml","shasum":"d0cad2843283dd2a62cb8d1a2ed182a368210aca","modified":1437624370000},{"_id":"themes/next/languages/en.yml","shasum":"d0cad2843283dd2a62cb8d1a2ed182a368210aca","modified":1437624370000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"9ee1011db6307df957684c83f39ac7499391924c","modified":1437624370000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"282620a222ea32c062610f4ed6af016f862ccdfa","modified":1437624370000},{"_id":"themes/next/languages/ru.yml","shasum":"60cc1fb273adfd84137a207dd9d0d00f08605ccd","modified":1437624370000},{"_id":"themes/next/layout/_layout.swig","shasum":"417cc254ba47a77b43f6f45e398756a0a9a424e9","modified":1437624370000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"e0e16ca56917b51728a13453d0a2f932da7ecdcb","modified":1437624370000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"9f3819f348a8a3af97c0fc520ea3944da5c3e4a9","modified":1437624370000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"939dbfc3de22706702da59e67293e1f243cbcf9f","modified":1437624370000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"b4b39dd010307ab61008a70a8ae9199ceeee89b5","modified":1437624370000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"f2b7a6d43249622745a7d58daa11030f433d3c96","modified":1437624370000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"c18888bd0a26f9bda3c6f7d17e22774a56f7378b","modified":1437624370000},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1437624370000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"d6c7f04eee4388d8f133eb5526b7c0875c321a30","modified":1437624370000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"ee0c2540e8178f390051af7d365a42ae68375afa","modified":1437624370000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"94beb0764ccbbba0c9f5c9886cc656bf879bcfd5","modified":1437624370000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"8a18d32e2a257dafaaba75353692db901e1dddc5","modified":1437624370000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1437624370000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1437624370000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1437624370000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1437624370000},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"0ebbf76c2317faa8ba31365adba59331c2e0262c","modified":1437624370000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1437624370000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1437624370000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"3351ea62225933f8045d036a79654e19e84d19a7","modified":1437624370000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1437624370000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1437624370000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1437624370000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1437624370000},{"_id":"themes/next/layout/archive.swig","shasum":"ed242c832d27743375a5fb524dc5a116a6a723a7","modified":1437624370000},{"_id":"themes/next/layout/category.swig","shasum":"ca5b5b4c091e575487a398e5f1c0947fe3a13bfc","modified":1437624370000},{"_id":"themes/next/layout/index.swig","shasum":"9fcae9769998e5f4182b363ccf3ae5a026728d50","modified":1437624370000},{"_id":"themes/next/layout/page.swig","shasum":"0b0924774a562ff45ed98e40c4e913df9a77fe08","modified":1437624370000},{"_id":"themes/next/layout/post.swig","shasum":"3f3a183543cbb0d396484242952b02992366afef","modified":1437624370000},{"_id":"themes/next/layout/tag.swig","shasum":"f1dcfbc0eef76f1f6be29f31a343338d5bbfe814","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"54e73681ba6f57ef961138f94d2ee8ac845990c3","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"fa6e23ebddb6f235803b51974f36be2a43b2c9c4","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1437624370000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1437624370000},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"e79a08484b191dca14ccfc005053eb95786dafae","modified":1437624370000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1437624370000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1437624370000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"d776e241cf650b00ee1dd21b9ff377c250d9eeaa","modified":1437624370000},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"be6c1a04595cf38673511366a3d89fcdb046f533","modified":1437624370000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"86bd4135afa2589ad074e0cf8ebb054ff3d10f24","modified":1437624370000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"f49f8966496166bd62f79f75a3277d4d5b1102e8","modified":1437624370000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"90e68936ea0f26af93c2c517fe1b891538f9c1b1","modified":1437624370000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"6fd7caf8194656b90c3b7976295f157bce593b54","modified":1437624370000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"3874252c8392b5a18e849ac69b6d66999ec1de16","modified":1437624370000},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1437624370000},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1437624370000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1437624370000},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1437624370000},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1437624370000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"ba501332fb111bd72dc0777f2e1c8a29ad538ff9","modified":1437624370000},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"4daaadd156ece64ae05908ad6bb0159c8a27c071","modified":1437624370000},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1437624370000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"efdfda7a5f7a08c0c107dd79a70e33ee257c1427","modified":1439801120000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"6259f4780f2aae1e6f85b892d8822c1c7ebc28bc","modified":1437624370000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1437624370000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1437624370000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1437624370000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"7a961e3c538765faf265cd344ea8917147b7fa03","modified":1437629422000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1437624370000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"05045d24850a982dc8069012c86c878b130b60eb","modified":1437624370000},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"2588e55132e10d82c0608f03c2c72a2bace8fa4e","modified":1437624370000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"f5dda1ca48c1b73a0bd34e08413de57699f24083","modified":1437624370000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"01669c0d47fcc1df47ff0af293439f8371432cdc","modified":1437630002000},{"_id":"themes/next/source/css/main.styl","shasum":"b05c342e94ded24a5f2b203cedf77d3faa817fd5","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","shasum":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","shasum":"4f18f0bb815b1aeba57739069c3416106240b7c1","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","shasum":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","shasum":"4d0adc55240f331c6de225e23afd76ea5318da9c","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","shasum":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","shasum":"690836f81c0feb1a49e2253d4f984ad543414986","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","shasum":"8c865cffa3845be32406737fcc0466cf9cd965b3","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","shasum":"9159eea8641b840e0f7aa6e087dae414044ecdd3","modified":1437624370000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1437624370000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"f0f34a08d99802c526486af58e11a6a9d1461fb1","modified":1437624370000},{"_id":"themes/next/bower.json","shasum":"1a681eeb5bff68be34e4e5226678c6cd3a7a12cc","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"f0790da03008b6cb3ae4215cbb656cb4b4599633","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"e0b5e4a23a949bac499908bcef2fae56430e230e","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","shasum":"e316347805eb93425faa678611c5e42a7152da8f","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","shasum":"176695cc0dc12daba049b2bb889397a7bf2e553c","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","shasum":"d1ed08a17670fa259df02c1d52dc9ce754343775","modified":1437624370000},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1437624370000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1437624370000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1437624370000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1437624370000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","shasum":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4","modified":1437624370000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1437624370000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1437624370000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1437624370000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1437624370000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1437624370000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1437624370000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"116cafc741e048497287121a508d7a54c050c70c","modified":1437624370000},{"_id":"themes/next/source/js/helpers.js","shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1437624370000},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"a7a618126d6853d52f4e32be116d3985325ad17d","modified":1437624370000},{"_id":"themes/next/source/js/lazyload.js","shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1437624370000},{"_id":"themes/next/source/js/motion_fallback.js","shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1437624370000},{"_id":"themes/next/source/js/motion_global.js","shasum":"e6df9e7e61109667df0e22c4f7cc25c85015440b","modified":1437624370000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1437624370000},{"_id":"themes/next/source/js/search-toggle.js","shasum":"0bf617514cd86307f0678a226761341100dd86d4","modified":1437624370000},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1437624370000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1437624370000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1437624370000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1437624370000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1437624370000},{"_id":"themes/next/tests/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1437624370000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1437624370000},{"_id":"themes/next/tests/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1437624370000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","shasum":"888a285a4a7329210b2210742c673611c27425eb","modified":1437624370000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1437624370000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1437624370000},{"_id":"public/CNAME","modified":1451224899708,"shasum":"b15bcc5d51bc1c31d83cb4aaa35ba95c28a5377f"},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1451224899712,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1451224899713,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1451224899714,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1451224899716,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1451224899717,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/jquery/index.js","modified":1451224899718,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1451224899719,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1451224899721,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1451224899722,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1451224899723,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1451224899723,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1451224899724,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1451224899725,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1451224899725,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1451224899726,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1451224899728,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1451224899729,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1451224899730,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1451224899731,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1451224899732,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1451224899733,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/ua-parser.min.js","modified":1451224899735,"shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a"},{"_id":"public/js/search-toggle.js","modified":1451224899736,"shasum":"0bf617514cd86307f0678a226761341100dd86d4"},{"_id":"public/js/motion_global.js","modified":1451224899738,"shasum":"e6df9e7e61109667df0e22c4f7cc25c85015440b"},{"_id":"public/js/motion_fallback.js","modified":1451224899739,"shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e"},{"_id":"public/js/lazyload.js","modified":1451224899739,"shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf"},{"_id":"public/js/hook-duoshuo.js","modified":1451224899740,"shasum":"e529f5d6dda3aee77fadfed879da9fe1fb570165"},{"_id":"public/js/helpers.js","modified":1451224899742,"shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335"},{"_id":"public/js/fancy-box.js","modified":1451224899743,"shasum":"116cafc741e048497287121a508d7a54c050c70c"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1451224899744,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/images/searchicon.png","modified":1451224899746,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/placeholder.gif","modified":1451224899749,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1451224899755,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1451224899757,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1451224899759,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1451224899760,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1451224899761,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1451224899762,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1451224899763,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1451224899764,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/images/bkdefault_avatar.jpg","modified":1451224899766,"shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc"},{"_id":"public/fonts/icon-linecons/icomoon.woff","modified":1451224899768,"shasum":"d1ed08a17670fa259df02c1d52dc9ce754343775"},{"_id":"public/fonts/icon-linecons/icomoon.ttf","modified":1451224899773,"shasum":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4"},{"_id":"public/fonts/icon-linecons/icomoon.svg","modified":1451224899775,"shasum":"888a285a4a7329210b2210742c673611c27425eb"},{"_id":"public/fonts/icon-linecons/icomoon.eot","modified":1451224899777,"shasum":"176695cc0dc12daba049b2bb889397a7bf2e553c"},{"_id":"public/fonts/icon-icomoon/icomoon.woff","modified":1451224899778,"shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb"},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","modified":1451224899779,"shasum":"f399713d1c9400d4d3373e38991a7e362a754a94"},{"_id":"public/fonts/icon-icomoon/icomoon.svg","modified":1451224899780,"shasum":"e316347805eb93425faa678611c5e42a7152da8f"},{"_id":"public/fonts/icon-icomoon/icomoon.eot","modified":1451224899781,"shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d"},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","modified":1451224899783,"shasum":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4"},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","modified":1451224899785,"shasum":"e0b5e4a23a949bac499908bcef2fae56430e230e"},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","modified":1451224899786,"shasum":"f0790da03008b6cb3ae4215cbb656cb4b4599633"},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","modified":1451224899787,"shasum":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db"},{"_id":"public/fonts/icon-feather/icomoon.woff","modified":1451224899788,"shasum":"9159eea8641b840e0f7aa6e087dae414044ecdd3"},{"_id":"public/fonts/icon-feather/icomoon.ttf","modified":1451224899789,"shasum":"8c865cffa3845be32406737fcc0466cf9cd965b3"},{"_id":"public/fonts/icon-feather/icomoon.svg","modified":1451224899791,"shasum":"690836f81c0feb1a49e2253d4f984ad543414986"},{"_id":"public/fonts/icon-feather/icomoon.eot","modified":1451224899791,"shasum":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d"},{"_id":"public/fonts/icon-default/icomoon.woff","modified":1451224899793,"shasum":"4d0adc55240f331c6de225e23afd76ea5318da9c"},{"_id":"public/fonts/icon-default/icomoon.ttf","modified":1451224899795,"shasum":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2"},{"_id":"public/fonts/icon-default/icomoon.svg","modified":1451224899796,"shasum":"4f18f0bb815b1aeba57739069c3416106240b7c1"},{"_id":"public/fonts/icon-default/icomoon.eot","modified":1451224899797,"shasum":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a"},{"_id":"public/css/main.css","modified":1451224900149,"shasum":"e432232404807789b7b7ffe1bff1e6250b15efbf"},{"_id":"public/images/zqtzhanghao.png","modified":1451224900237,"shasum":"d7095b720d4a7b4a03c5a418b214f8ddc47dec24"},{"_id":"public/images/xiaomisystem.jpg","modified":1451224900240,"shasum":"fc1a399e1a263fe7f1bdd2e44bf42ba899f1b4e5"},{"_id":"public/images/wechat.png","modified":1451224900243,"shasum":"ac686b7bd6db2da209657c59a5a494259bfdc5f8"},{"_id":"public/images/webstormregister.png","modified":1451224900246,"shasum":"95d6990524e1ab17c0cb5f872bfd4f6a3a0065f2"},{"_id":"public/images/startadb.jpg","modified":1451224900248,"shasum":"42305932eca22441e1aadb197f18cff505478e7d"},{"_id":"public/images/singlenumber.png","modified":1451224900249,"shasum":"423321e94f6b3ac658fea0f68d61482ac27c85af"},{"_id":"public/images/rotatearray.png","modified":1451224900251,"shasum":"dc68c37e6a44c1a391508de47c529305dd8dc3fb"},{"_id":"public/images/reverselist.png","modified":1451224900255,"shasum":"7336ef713e000703cba9e06077742775a7412329"},{"_id":"public/images/removenthfromend.png","modified":1451224900258,"shasum":"311efb294b4ccc7224979659ff56bbbe8d909782"},{"_id":"public/images/removedebug.png","modified":1451224900260,"shasum":"a499e27a7a7580280db6bcdb563748a2d516b68f"},{"_id":"public/images/profile.jpeg","modified":1451224900262,"shasum":"d38edb883d276d6fcb4f66441b5dd23c59f4c02f"},{"_id":"public/images/poweroftwo.png","modified":1451224900264,"shasum":"b0fe7df1090a04d05ab15a8a355c49efc21b05fc"},{"_id":"public/images/plusone.png","modified":1451224900266,"shasum":"4f72aa0523328d3e7a978da2406a64a9e975e0f8"},{"_id":"public/images/pathsumruntime.png","modified":1451224900268,"shasum":"4476757aadfd0a2d444df5df31bdfb00496250b7"},{"_id":"public/images/nodaemon.jpg","modified":1451224900269,"shasum":"4f2c3b49b9a0c94b45ded10703fa559b4889c2cd"},{"_id":"public/images/nextpointer.png","modified":1451224900271,"shasum":"762f2d0d207af21c0ad2f9037156e9d2786d34fc"},{"_id":"public/images/network.jpg","modified":1451224900273,"shasum":"f337db46bc1b660a7b58920684efc4d4c954c0b9"},{"_id":"public/images/movezeroes.png","modified":1451224900275,"shasum":"0dd4e2a877668668707050233a1f9d06cb7d7369"},{"_id":"public/images/mergesortedarray.png","modified":1451224900276,"shasum":"cc7ddb7ccbc9cff8abbb5dd48dac99fb31db600f"},{"_id":"public/images/merge2sortedlists.png","modified":1451224900278,"shasum":"40c0717d92ec83d93730ff8893de7b5b34be14b6"},{"_id":"public/images/maxdepth.png","modified":1451224900281,"shasum":"7a616eb753e587dd5927d4dc63c45fd198698cc3"},{"_id":"public/images/longestcommonprefix.png","modified":1451224900283,"shasum":"55fe965a504718cbcd1fad29906379868717d424"},{"_id":"public/images/isomorphicstring.png","modified":1451224900285,"shasum":"4b43e5206e21702522c174417593102bb4ed3e27"},{"_id":"public/images/intersection.png","modified":1451224900290,"shasum":"24fcfcdcda1846ab42d27e1daf31c0782c726336"},{"_id":"public/images/gruntdebuginwebstorm.png","modified":1451224900293,"shasum":"cb1caff5c2f2be0f9785cc178dd48c5548ac029d"},{"_id":"public/images/fastbootmode.jpg","modified":1451224900296,"shasum":"abcacae82f997d7adff584fbfb9fe829d312e671"},{"_id":"public/images/excelcolumntotitle.png","modified":1451224900298,"shasum":"19aa90992bbceab184c602741e240a054f91774d"},{"_id":"public/images/countandsay.png","modified":1451224900302,"shasum":"aaa007d8c9b44b9e2f75f20777372d00e168450b"},{"_id":"public/images/bootunlock.jpg","modified":1451224900304,"shasum":"5465609a0307ec760fefbb7b5e0a78ea3286ccd6"},{"_id":"public/images/bootlock.jpg","modified":1451224900307,"shasum":"cf8c0ce9cec77a59e6b6fb8ab24d783d8c5148a6"},{"_id":"public/images/adbserverfail.jpg","modified":1451224900309,"shasum":"6d9934edd8479fd713191d2367d6da4c087b93a3"},{"_id":"public/wechat/index.html","modified":1451224900363,"shasum":"37bc0afc665aa9eacf87cc38c03f2909a5cd8cdc"},{"_id":"public/tags/index.html","modified":1451224900405,"shasum":"d54d5effa685c0ec8078a064b29c2a7ec6cbd2b3"},{"_id":"public/friends/index.html","modified":1451224900441,"shasum":"0ace48affa09ff09a418e4cbb777e0f417239551"},{"_id":"public/about/index.html","modified":1451224900472,"shasum":"faf23db52a4fd27007dd45d8857a5758fb6b8f35"},{"_id":"public/2015/12/27/git-modified-xxx-modified-content-untracked-content-commit-content/index.html","modified":1451224900527,"shasum":"f6b76746ff7be8ff2eff30a545e7cb59588abf6f"},{"_id":"public/2015/12/27/Mitmproxy-抓包工具/index.html","modified":1451224900575,"shasum":"9164cf8d99611f661b0b2d1a85c64eb8593c2b78"},{"_id":"public/2015/12/26/webstorm-11激活/index.html","modified":1451224900644,"shasum":"6681630bf4385194c16e19e79c07701d6f6379a8"},{"_id":"public/2015/12/13/自定义错误模块无法识别此错误/index.html","modified":1451224900682,"shasum":"9010ee3b5892e9b739ce5f27df8cb038a4d7e8d8"},{"_id":"public/2015/11/11/Node-5-0-Cannot-find-module-lib/index.html","modified":1451224900717,"shasum":"1212da64d5de51b0bd6103b6981629d425733a03"},{"_id":"public/2015/11/11/这里面的一些console方法请用起来/index.html","modified":1451224900754,"shasum":"ae139bbebee56d7ae25f14d3e32afa2d6c76f032"},{"_id":"public/2015/11/10/Mac-ox-默认环境变量/index.html","modified":1451224900788,"shasum":"9596ce0c210603eb6af24642fa78a5e92028baec"},{"_id":"public/2015/11/04/判断参数是Array还是Object/index.html","modified":1451224900826,"shasum":"5e6c0e2bcee305b5e2fde2f5ea80dc0d28871f9e"},{"_id":"public/2015/10/16/获取keystore签名中得sha1/index.html","modified":1451224900856,"shasum":"9659b7429ad253aa2b8f471d365e3fd56602f0c8"},{"_id":"public/2015/10/12/LeetCode-Populating-Next-Right-Pointers-in-Each-Node/index.html","modified":1451224900896,"shasum":"32c060962b03a0018c5d07b3519ef85140bed612"},{"_id":"public/2015/10/10/LeetCode-Move-Zeroes/index.html","modified":1451224900926,"shasum":"17402ae8494740c2eef9cb31f88a1d443a2704f5"},{"_id":"public/2015/09/30/ubuntu-上安装最新版本的express/index.html","modified":1451224900961,"shasum":"e864530a80b818af69b1ebd160bd06536c96e3c1"},{"_id":"public/2015/09/30/node-应用绑定80端口/index.html","modified":1451224900991,"shasum":"a4f4ea3cc042355bb6943fbc66bb1770ff5e2d4f"},{"_id":"public/2015/09/29/将hexo部署在github pages 的子目录/index.html","modified":1451224901026,"shasum":"b8cb07285c4b6a7a4690a3cb0514c5d965c59288"},{"_id":"public/2015/09/18/React-Native-Node-4-0/index.html","modified":1451224901054,"shasum":"8ea9470ffdf090a73114533d3b904ebeee435d77"},{"_id":"public/2015/09/17/IOS-模拟器回到主页/index.html","modified":1451224901091,"shasum":"fcfdb1f9c5d86f598cdf25aa4da10a6ae57d79d8"},{"_id":"public/2015/09/16/Android-录制操作视频/index.html","modified":1451224901119,"shasum":"b34805ae7bbdf6d302c3e974a8407e6dacdb728d"},{"_id":"public/2015/09/13/坑死的Amazon-AWS/index.html","modified":1451224901157,"shasum":"2ad888945743f92e86f44b3e92e5c5210be5ae2b"},{"_id":"public/2015/09/08/如何进行Monkey自动化测试/index.html","modified":1451224901189,"shasum":"6592b31beb08ef371609f7ea21f04548b4094f8b"},{"_id":"public/2015/09/07/Nexus-7-刷小米开发版系统助力webview调试/index.html","modified":1451224901220,"shasum":"64c6ca5773fd241d9e488f8a18bb235547a12f88"},{"_id":"public/2015/09/07/Nexus-7-解锁/index.html","modified":1451224901258,"shasum":"4b8523897ad18dd8759baa348161407a506f5edc"},{"_id":"public/2015/08/27/Monkey日志分析/index.html","modified":1451224901291,"shasum":"2932e26a230ea305566c24ad4a0960527a5becd9"},{"_id":"public/2015/08/20/git-stash-缓存当前的修改/index.html","modified":1451224901324,"shasum":"6794882a738e79334a45167a3e2ff78269642328"},{"_id":"public/2015/08/20/Git-部分提交/index.html","modified":1451224901358,"shasum":"020428d41c23f9b8f06a6742b24d8eea81c99d69"},{"_id":"public/2015/08/17/UnsatisfiedLinkError/index.html","modified":1451224901398,"shasum":"bea55d43592d0a9f7d06628489bdd5523ce43e32"},{"_id":"public/2015/08/17/ADB-server-didnot-ACK/index.html","modified":1451224901427,"shasum":"5c1d5972985a8c55da58f6f8ada216aba70924e2"},{"_id":"public/2015/08/17/主流模引擎一览/index.html","modified":1451224901463,"shasum":"2c6bfc92b396f87293f20962dd91f413d0ab1717"},{"_id":"public/2015/08/12/正则获取url中的参数/index.html","modified":1451224901494,"shasum":"aa02705a94b18b5ae193dc37e47e1e6522dfe617"},{"_id":"public/2015/08/09/LeetCode-Longest-Common-Prefix/index.html","modified":1451224901533,"shasum":"252c5a822b2caf898741a8c18b1a5e99fd2e8e2f"},{"_id":"public/2015/08/07/LeetCode-Remove-Nth-from-end/index.html","modified":1451224901565,"shasum":"f690c66bfdbdf06477bfb0d0b2b7d774592d0dd8"},{"_id":"public/2015/08/07/LeetCode-Merge-Sorted-Array/index.html","modified":1451224901604,"shasum":"ba83186b18da2cdaef417001bf0e3e597160745a"},{"_id":"public/2015/08/06/LeetCode-Count-and-Say/index.html","modified":1451224901635,"shasum":"9f0f1f17475d61236f95191e361669d23424a68c"},{"_id":"public/2015/08/05/世界那么大翻墙出去看看/index.html","modified":1451224901670,"shasum":"008367ca34b3d5da78b5b1c88033cafc5941836c"},{"_id":"public/2015/08/04/微信、手Q、Qzone之x5内核inspect调试解决方案/index.html","modified":1451224901702,"shasum":"e67e4fc358c2f146fe42f5a4985f32e806ebb2c8"},{"_id":"public/2015/08/04/LeetCode-Reverse-Linked-List/index.html","modified":1451224901734,"shasum":"5f6bd34a308e0f87b89ebc259ee71d7a249874aa"},{"_id":"public/2015/08/02/LeetCode-Valid-Anagram/index.html","modified":1451224901774,"shasum":"a5c12b09badd391fb7d9a8844adea86bc6bd8d8c"},{"_id":"public/2015/08/01/如何利用好碎片化的事件/index.html","modified":1451224901809,"shasum":"f12e7af743936df16fa8a8f462f323acb230bd04"},{"_id":"public/2015/07/30/Debug-Grunt-in-Webstorm/index.html","modified":1451224901843,"shasum":"da4a26c11a593ef8e28eec459a69e9f4ad7d5d97"},{"_id":"public/2015/07/30/setWebChromeClient-setWebClient的区别/index.html","modified":1451224901873,"shasum":"e7899fc2d9098db38a0ec5bbcf02e1dbd123cdfd"},{"_id":"public/2015/07/30/LeetCode-Excel-Sheet-Column-Title/index.html","modified":1451224901916,"shasum":"af40d654571958b0b27ab142bcab21664c3caeb4"},{"_id":"public/2015/07/29/LeetCode-Merge-Two-Sorted-Lists/index.html","modified":1451224901950,"shasum":"4678b6ca79dbbb474fad48145dbdd5e5d71a45ce"},{"_id":"public/2015/07/28/requirejs-的运行机制/index.html","modified":1451224901987,"shasum":"333ee1cf9f562f9058cbcd223f3796a250d1f3f8"},{"_id":"public/2015/07/28/Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported/index.html","modified":1451224902018,"shasum":"1765ec34d28b84396651e3a9a366443c88bfbf27"},{"_id":"public/2015/07/27/style-currentStyle-getComputedStyle-三者区别/index.html","modified":1451224902064,"shasum":"bc9b6dd2e3eedc157bef7c7dc56bb68696b30bee"},{"_id":"public/2015/07/27/获取object的属性长度/index.html","modified":1451224902096,"shasum":"b3f8b30c7c38322f1c659161dfe2140119c1e8b3"},{"_id":"public/2015/07/27/LeetCode-Isomorphic-String/index.html","modified":1451224902136,"shasum":"9505f95b11fde0cf4a8f5ecc844f76b75e4549e7"},{"_id":"public/2015/07/26/LeetCode-Number-of-1-Bits/index.html","modified":1451224902168,"shasum":"9226d1b7ef59862dd28ac726863bead84f853509"},{"_id":"public/2015/07/26/LeetCode-Palindrome-Linked-List/index.html","modified":1451224902205,"shasum":"3375f96990996b2e2b53c1ffa2abf1b2a4de6da3"},{"_id":"public/2015/07/25/将数字转换为千分位的金额格式/index.html","modified":1451224902238,"shasum":"97fba099178ad87ee6614d6ca6db942c0bdec0a8"},{"_id":"public/2015/07/24/Darling,我好想去死/index.html","modified":1451224902270,"shasum":"b43fc41a5d9237a0dfe28294d9041a2c768ef730"},{"_id":"public/2015/07/24/LeetCode-Intersection-of-Two-Linked-Lists/index.html","modified":1451224902308,"shasum":"ae7bf12fd7ae2c0f2cd70fdbcca1b8ee89a4c414"},{"_id":"public/2015/07/23/页面性能分析工具/index.html","modified":1451224902337,"shasum":"34ebda6f0f0bde5fe6e99461a7c9a03f988c4aff"},{"_id":"public/2015/07/23/LeetCode-Rotate-Array/index.html","modified":1451224902375,"shasum":"626f7914ba2f297bfe25511d70578006bac7a977"},{"_id":"public/2015/07/23/LeetCode-Maximum-Depth-of-Binary-Tree/index.html","modified":1451224902406,"shasum":"c67d0601b54401157cc163a8b32a2247680f9da2"},{"_id":"public/2015/07/22/LeetCode-Plus-One/index.html","modified":1451224902445,"shasum":"da004d84fb93614ed40d78d4ff74c85a97ded981"},{"_id":"public/2015/07/22/LeetCode-Single-Number/index.html","modified":1451224902478,"shasum":"54453769aa1995451b1e910e2b4edbce5c3b717f"},{"_id":"public/2015/07/22/LeetCode-Power-of-Two/index.html","modified":1451224902515,"shasum":"0ffa77e6a9e1d6a107f9b064aa513af704cd0470"},{"_id":"public/2015/07/21/Chrome-timeline-检测页面性能/index.html","modified":1451224902548,"shasum":"460dbcee414bf7754ed138087167448ccbe1ce3a"},{"_id":"public/2015/07/20/二叉排序树的实现/index.html","modified":1451224902584,"shasum":"cca16fb83268aeb105620fbe2b39bcd1a69916c4"},{"_id":"public/2015/07/20/Chrome和Chromium的区别/index.html","modified":1451224902615,"shasum":"2ad29421125ec2c37c8c7d640fb06133b174a7e3"},{"_id":"public/2015/07/19/LeetCode:Path Sum/index.html","modified":1451224902653,"shasum":"df09283484033171d713b7fce08302561eee44a4"},{"_id":"public/2015/07/19/blink-chromium-webkit-是什么关系/index.html","modified":1451224902681,"shasum":"b58c2938ebf6ec860c230bc927d44f7ebac1d9b6"},{"_id":"public/2015/07/19/node下如何调试/index.html","modified":1451224902719,"shasum":"f631f0458d9c3965e113ed85e04c8b6f08599ba5"},{"_id":"public/2015/07/18/求一个集合的所有子集/index.html","modified":1451224902750,"shasum":"119c97b22ec50e2361e37e19d823ed02a7ef9271"},{"_id":"public/2015/07/17/nodejs入门文章读后感/index.html","modified":1451224902791,"shasum":"795add8e86a7b6258fae3b04c43dbab4704d2863"},{"_id":"public/2015/07/16/冥王星为什么有个心呢？/index.html","modified":1451224902819,"shasum":"871c56c39724006d98498fadf0db78391af4d024"},{"_id":"public/2015/07/16/backbone的事件机制/index.html","modified":1451224902849,"shasum":"83767032feb7cd0deedbc6d431698bc4ce98e664"},{"_id":"public/2015/07/15/学习下ES6/index.html","modified":1451224902883,"shasum":"a260d4ec9cbbf36013be8096694ce1d08f01b09a"},{"_id":"public/2015/07/15/快速排序算法/index.html","modified":1451224902914,"shasum":"36e7060e4dfe8ce36018e1772edcb33048de7516"},{"_id":"public/2015/07/15/二分查找算法/index.html","modified":1451224902949,"shasum":"8b4b9419c1b1969e0d0bf2b27019ce039f36600a"},{"_id":"public/2015/07/15/前端自动化测试探索/index.html","modified":1451224902980,"shasum":"f47d025c3696c08351b252f27228f9ecf6b2c1f9"},{"_id":"public/2015/07/15/Chrome调试技巧/index.html","modified":1451224903015,"shasum":"fc93418ac16c9e26c8546c0b7fa8c4a692f274af"},{"_id":"public/2015/07/14/单线程的Javascript/index.html","modified":1451224903048,"shasum":"0b05600d3717ce2b14dc693591d4f06596c48cf1"},{"_id":"public/2015/07/14/Android Url Scheme-所谓的唤醒/index.html","modified":1451224903088,"shasum":"2920b88748d5227f1f0461d3da8ac8dbd5c03f0b"},{"_id":"public/2015/07/14/git .ignore无效","modified":1451224903121,"shasum":"13a9be8e8ade04a888c3e800644758734dc24956"},{"_id":"public/2015/07/14/box-sizing是什么东西/index.html","modified":1451224903160,"shasum":"d58366019ae94646a43cc54ea0f8fa306fa37644"},{"_id":"public/2015/07/14/Android怎么打Log/index.html","modified":1451224903191,"shasum":"b18bfc678b23122bddd3a8766022026726f896d2"},{"_id":"public/2015/07/13/生活好Boring啊/index.html","modified":1451224903228,"shasum":"2d80b6f5715e64b7c33ec15bc9a61aaa2e10d11c"},{"_id":"public/2015/07/07/mac 调出adb shell/index.html","modified":1451224903257,"shasum":"5acadd4b2c614fa997f17227056e5b6eb40b3b17"},{"_id":"public/2015/07/06/markdown语法总忘/index.html","modified":1451224903306,"shasum":"f16e54d1c787c856be10f5d3849c1447b65bfcb1"},{"_id":"public/2015/07/06/React学习笔记/index.html","modified":1451224903337,"shasum":"c391935b048abe08d8c99d90f8f63c858e99f060"},{"_id":"public/2015/07/06/Mac版Webstorm的一些快捷键/index.html","modified":1451224903378,"shasum":"28f740c0c4ac86f82185ae7249b43daff5f8f533"},{"_id":"public/2015/06/30/currentColor关键字/index.html","modified":1451224903408,"shasum":"f082986b1aeaf01f7deafa36deca730a7f01a8af"},{"_id":"public/2015/06/29/Mac下取消Chrome的ajax请求跨域/index.html","modified":1451224903449,"shasum":"3e0549f64cde90287426c39f41caf50ae48ca145"},{"_id":"public/2015/05/20/修改Mac终端命令行颜色/index.html","modified":1451224903487,"shasum":"ab4c0634955be70ef57761dcf774f002d413368f"},{"_id":"public/2015/05/20/Mac中修改host/index.html","modified":1451224903519,"shasum":"cde90cb6f1d2d8ff65666fdbbc6d266585a03cd3"},{"_id":"public/2015/03/30/Mac-OS-X-中配置Apache/index.html","modified":1451224903556,"shasum":"6ae8348d019e1a7a3223c5a6f459f608af908795"},{"_id":"public/2015/03/29/Android-Studio-启动找不到JVM/index.html","modified":1451224903587,"shasum":"56773296a34de78755b05b580800dc264d83771b"},{"_id":"public/archives/index.html","modified":1451224903635,"shasum":"d9ab2369b3942b63d10f9c5aef3fc4572e0a06d8"},{"_id":"public/archives/page/2/index.html","modified":1451224903684,"shasum":"2fd091d1769e32d3d47d0663f057e6168523a2db"},{"_id":"public/archives/page/3/index.html","modified":1451224903733,"shasum":"849520cdc947e36d46d8594265ab56d1b66ae74a"},{"_id":"public/archives/page/4/index.html","modified":1451224903776,"shasum":"0639c492bba090c976c50cc8d9cc01217369e726"},{"_id":"public/archives/page/5/index.html","modified":1451224903828,"shasum":"1da622f773579ee1e33000067a30c7de649629a6"},{"_id":"public/archives/page/6/index.html","modified":1451224903876,"shasum":"12c738b097b80d7829dd9f35c882dee270a29571"},{"_id":"public/archives/page/7/index.html","modified":1451224903917,"shasum":"5f774d873f84f272025fe6a83de75f7f856901d7"},{"_id":"public/archives/page/8/index.html","modified":1451224903965,"shasum":"5520ae674dc4a1f5cb266685f8c7cf667f661d67"},{"_id":"public/archives/page/9/index.html","modified":1451224904012,"shasum":"95225a2163b7c946e7fa7f3c0a86244342ffdc59"},{"_id":"public/archives/2015/index.html","modified":1451224904055,"shasum":"8a1d80306171814d5c21c78185b622d605a4f34e"},{"_id":"public/archives/2015/page/2/index.html","modified":1451224904105,"shasum":"960de4ce4ab0cca312b53e06c6d24dfd622c7ea1"},{"_id":"public/archives/2015/page/3/index.html","modified":1451224904150,"shasum":"7b44f8fc6681b6c8ef7490bc74b898c5ac0f554e"},{"_id":"public/archives/2015/page/4/index.html","modified":1451224904198,"shasum":"958f2e378c816971cdbe9cf3390b832f35daf27e"},{"_id":"public/archives/2015/page/5/index.html","modified":1451224904241,"shasum":"e75d55d3be99d6c096a5e498acfcc729bf0a17b5"},{"_id":"public/archives/2015/page/6/index.html","modified":1451224904289,"shasum":"50088288e6b08c13c6edc0d818e9739dc7c98b8d"},{"_id":"public/archives/2015/page/7/index.html","modified":1451224904339,"shasum":"c1670e9be9f1e8029114485a36084b4970ee21d6"},{"_id":"public/archives/2015/page/8/index.html","modified":1451224904384,"shasum":"53fe3f48bc5c5df5a981f6d7930e55fb6e287c90"},{"_id":"public/archives/2015/page/9/index.html","modified":1451224904443,"shasum":"3a114a6425a129466a9a9073c8829a48a8031354"},{"_id":"public/archives/2015/03/index.html","modified":1451224904478,"shasum":"5a8939cddd257677d8ab8a94dc13ab76f2cc7c48"},{"_id":"public/archives/2015/05/index.html","modified":1451224904530,"shasum":"7b2ae0ed2dd700427ecdc4aac0fcfb7af3f44f66"},{"_id":"public/archives/2015/06/index.html","modified":1451224904571,"shasum":"738c461dbd172cf7b5a9b8e7152e6d5fecb1873c"},{"_id":"public/archives/2015/07/index.html","modified":1451224904653,"shasum":"c6781b51f76e237dbf3b2abf6e10ca279d564aac"},{"_id":"public/archives/2015/07/page/2/index.html","modified":1451224904724,"shasum":"16951557514782b015745cd63cba3cd7b99ba8b2"},{"_id":"public/archives/2015/07/page/3/index.html","modified":1451224904790,"shasum":"649bd32b332e6bb26e8a2193764c4e2bcd66ef94"},{"_id":"public/archives/2015/07/page/4/index.html","modified":1451224904862,"shasum":"f156b9f449c9cda131384f49ca10b64fbb010361"},{"_id":"public/archives/2015/07/page/5/index.html","modified":1451224904932,"shasum":"da41e7ea489b43f1dcf0c3a334db65188f491ff5"},{"_id":"public/archives/2015/08/index.html","modified":1451224904978,"shasum":"866a6646a986466ae45c2410d235639bc6984651"},{"_id":"public/archives/2015/08/page/2/index.html","modified":1451224905018,"shasum":"c3bbdc047efd1acea45269fbe4b28f8f7e243275"},{"_id":"public/archives/2015/09/index.html","modified":1451224905066,"shasum":"1d722401c4a7634036ee801197730a63596985f4"},{"_id":"public/archives/2015/10/index.html","modified":1451224905093,"shasum":"4c8175e5f46d2de40868e57c302ea5dce963253f"},{"_id":"public/archives/2015/11/index.html","modified":1451224905129,"shasum":"cb7875f9cb67f653dc68c00903d8a87ad265eda4"},{"_id":"public/archives/2015/12/index.html","modified":1451224905158,"shasum":"a08044d70b5ee0d05a7402e5ffd057e496d473b4"},{"_id":"public/atom.xml","modified":1451224905159,"shasum":"cf1f01def74c38ce91fa64ca4edab8ab2cd7d36c"},{"_id":"public/index.html","modified":1451224905212,"shasum":"363730771196b2212beb0288376d3b9c21432dbf"},{"_id":"public/page/2/index.html","modified":1451224905266,"shasum":"9cefc46924c5a8e7b13ec9645edb2d85ed48e5cf"},{"_id":"public/page/3/index.html","modified":1451224905319,"shasum":"40af4c6c7cef32db4fec897e78794a03d7e6e008"},{"_id":"public/page/4/index.html","modified":1451224905366,"shasum":"dc97b00be7451628ffc64c181e8062f0177525ec"},{"_id":"public/page/5/index.html","modified":1451224905419,"shasum":"5b4579c6887aea183b44dbe9f4943f661a1b068b"},{"_id":"public/page/6/index.html","modified":1451224905472,"shasum":"30295616eda63029e15605a31724bef5fb062a71"},{"_id":"public/page/7/index.html","modified":1451224905525,"shasum":"942045f0348e7b6500a3081d7f2d3d475f03bf3d"},{"_id":"public/page/8/index.html","modified":1451224905579,"shasum":"95c59dbd8405dd99cfe946aa6954adf6ee9d5c21"},{"_id":"public/page/9/index.html","modified":1451224905623,"shasum":"e5d40745bc7549be1bd9c0bf6ff759d9778fab5e"},{"_id":"public/tags/工具/index.html","modified":1451224905661,"shasum":"c35f381575e5312aa4bd355a81563b9f70ceefcf"},{"_id":"public/tags/工具/page/2/index.html","modified":1451224905689,"shasum":"bb45319c31eff67cdd0dfa981eb9562a96cf04e3"},{"_id":"public/tags/JavaScript/index.html","modified":1451224905730,"shasum":"dfa0e2b561ade28824e0264453ee57eb0b8395fa"},{"_id":"public/tags/JavaScript/page/2/index.html","modified":1451224905750,"shasum":"949f4286a06236abee6814b8775eb3c2447c245d"},{"_id":"public/tags/Android/index.html","modified":1451224905790,"shasum":"563a1fd0f278e58599f8bc7c1ced3ae126e3442e"},{"_id":"public/tags/Android/page/2/index.html","modified":1451224905814,"shasum":"dc1f97bc717e8fb97536ee9bf95b44787c2baae8"},{"_id":"public/tags/故障排查/index.html","modified":1451224905843,"shasum":"d1a764deea0e31072efdd5b9f1327c5e828bbe9f"},{"_id":"public/tags/日常/index.html","modified":1451224905873,"shasum":"9366a261eb62f69a6ff84cd382105be63af0bc08"},{"_id":"public/tags/算法/index.html","modified":1451224905907,"shasum":"05242a03f7d8e80bef4f22fce5944b43beb03bf5"},{"_id":"public/tags/算法/page/2/index.html","modified":1451224905944,"shasum":"06cd331669fbf7e6ee93dd70c864bd8a838c363a"},{"_id":"public/tags/算法/page/3/index.html","modified":1451224905967,"shasum":"9c8a06619e35a4ed268259d9d336f8931fa631d1"},{"_id":"public/tags/正则/index.html","modified":1451224905998,"shasum":"72712d8b14af1bc711301ae19d467ab431edc969"},{"_id":"public/tags/Monkey/index.html","modified":1451224906026,"shasum":"68492cfb9865f1e3e772f03c5e58c9c701c90ea9"},{"_id":"public/tags/mac/index.html","modified":1451224906055,"shasum":"e225d9323930e127d87b03152aaee7b4e7708dfd"},{"_id":"public/tags/Html/index.html","modified":1451224906085,"shasum":"78c032c6ad536fc5c42aeaa516f0949eaa994b5f"},{"_id":"public/tags/webstorm/index.html","modified":1451224906111,"shasum":"52656f1fcde489c00f32464c68a071e86299463a"},{"_id":"public/tags/node/index.html","modified":1451224906142,"shasum":"0f31f30ce2ce20ac76bf4491c8c5f8f3b58f38ae"},{"_id":"public/tags/markdown/index.html","modified":1451224906162,"shasum":"63fcd3a468ceff0d5ac786211e8c59822c80d23e"},{"_id":"public/tags/git/index.html","modified":1451224906188,"shasum":"93ebdcea43fb0d403ba8fd5d5dfc2feb6bf811d2"},{"_id":"public/tags/css/index.html","modified":1451224906214,"shasum":"e9a2eb40c2f8b49917faf7080aeabc0d649accd1"},{"_id":"public/tags/异常/index.html","modified":1451224906236,"shasum":"debc6d3258b62602daa4e5f280408407343d8738"},{"_id":"public/tags/React/index.html","modified":1451224906261,"shasum":"6695082af93d4e1be79a83dec7bec0425e8c509f"},{"_id":"public/tags/LeetCode/index.html","modified":1451224906302,"shasum":"603424c34ab4fb2d030e2da71c8422126deaa4ed"},{"_id":"public/tags/LeetCode/page/2/index.html","modified":1451224906333,"shasum":"4ba5f2719540891269b88d4f5132b1a85d323621"},{"_id":"public/tags/IOS/index.html","modified":1451224906361,"shasum":"a54178fd9ede7113ab44dc37141c11ed2dbc3d78"},{"_id":"public/tags/adb/index.html","modified":1451224906387,"shasum":"dca681ffa61091e1a50762b90c76dc9fb55cd90f"}],"Category":[],"Data":[],"Page":[{"title":"wechat","date":"2015-07-23T05:14:07.000Z","comments":0,"_content":"\n![wechat](/images/wechat.png)\n","source":"wechat/index.md","raw":"title: \"wechat\"\ndate: 2015-07-23 13:14:07\ncomments: false\n---\n\n![wechat](/images/wechat.png)\n","updated":"2015-12-27T13:24:35.000Z","path":"wechat/index.html","layout":"page","_id":"ciiolu1rs00008a6bgv4ub76m"},{"title":"tags","date":"2015-07-23T04:18:09.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: \"tags\"\ndate: 2015-07-23 12:18:09\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-12-27T13:24:35.000Z","path":"tags/index.html","layout":"page","_id":"ciiolu1s600018a6bshkcw3oc"},{"title":"friends","date":"2015-08-17T08:32:12.000Z","comments":0,"_content":"\n##我的好友们：\n----\n\n   [An7|文不能测字，武不能防身](http://www.an7.me/)\n   \n   [风一样的男子](http://fy98.com/)","source":"friends/index.md","raw":"title: \"friends\"\ndate: 2015-08-17 16:32:12\ncomments: false\n---\n\n##我的好友们：\n----\n\n   [An7|文不能测字，武不能防身](http://www.an7.me/)\n   \n   [风一样的男子](http://fy98.com/)","updated":"2015-12-27T13:24:35.000Z","path":"friends/index.html","layout":"page","_id":"ciiolu1sb00028a6bopsmxeiu"},{"title":"About","date":"2015-03-29T13:36:20.000Z","_content":"### 关于什么都不重要了\n\n``` bash\n$ 胖子固有一死。或重于泰山，或重于其他山\n```\n\n联系方式\n\n  * E-mail:   judastree@live.cn\n  * Github:   https://github.com/judastree","source":"about/index.md","raw":"title: \"About\"\ndate: 2015-03-29 21:36:20\n---\n### 关于什么都不重要了\n\n``` bash\n$ 胖子固有一死。或重于泰山，或重于其他山\n```\n\n联系方式\n\n  * E-mail:   judastree@live.cn\n  * Github:   https://github.com/judastree","updated":"2015-12-27T13:24:35.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciiolu1sc00038a6b6vmrovj3"}],"Post":[{"title":"页面性能分析工具","date":"2015-07-23T14:09:38.000Z","_content":"\n[Google Page Speed Insights](https://developers.google.com/speed/pagespeed/insights/)\n\n[webpagetest](http://www.webpagetest.org/)\n","source":"_posts/页面性能分析工具.md","raw":"title: \"页面性能分析工具\"\ndate: 2015-07-23 22:09:38\ntags: [工具]\n---\n\n[Google Page Speed Insights](https://developers.google.com/speed/pagespeed/insights/)\n\n[webpagetest](http://www.webpagetest.org/)\n","slug":"页面性能分析工具","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1se00048a6blahxel4m"},{"title":"这里面的一些console方法请用起来","date":"2015-11-11T07:02:12.000Z","_content":"\nconsole.profile([profileLabel]);\n\nconsole.time(name);\n\nconsole.timeEnd(name);\n\nconsole.trace();\n\n\n详见：[你真的了解 console 吗](http://www.w3cfuns.com/article-5600040-1-1.html)\n","source":"_posts/这里面的一些console方法请用起来.md","raw":"title: \"这里面的一些console方法请用起来\"\ndate: 2015-11-11 15:02:12\ntags: [JavaScript]\n---\n\nconsole.profile([profileLabel]);\n\nconsole.time(name);\n\nconsole.timeEnd(name);\n\nconsole.trace();\n\n\n详见：[你真的了解 console 吗](http://www.w3cfuns.com/article-5600040-1-1.html)\n","slug":"这里面的一些console方法请用起来","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sj00078a6bsql88ujp"},{"title":"计算Object的长度","date":"2015-07-27T11:22:11.000Z","_content":"\n##题目\n\n对于Object来说，其实没有长度的概念，所以也并没有length的属性或者size()的方法来获取。\n\n那如果想要计算这个object中定义了多少属性值呢？(从Ojbect继承过来的不算)\n\n\n##思路\n\n方法1:  Object中有hasOwnProperty()的方法，可以判断对象是否有某个特定的属性。\nfor-in 可以查找object的所有属性。而hasOwnProperty是判断本身对象的属性，不查找原型链的属性，这正好是我们要的。\n\n方法2:  Object还有另外一个keys的方法，可以返回所有的keys。\n\n##实现\n\n方法1:\n    \n        var obj = {a:\"1\",b:\"2\",c:\"3\"},length=0;\n        \n        for (var property in obj) {\n            if (obj.hasOwnProperty(property)) {\n                length++;\n            }\n        }\n    \n       console.log(length);\n       \n       \n方法2:\n\n       var obj = {a:\"1\",b:\"2\",c:\"3\"};       \n       console.log(Object.keys(obj).length);\n    \n\n\n\n","source":"_posts/获取object的属性长度.md","raw":"title: \"计算Object的长度\"\ndate: 2015-07-27 19:22:11\ntags: [JavaScript]\n---\n\n##题目\n\n对于Object来说，其实没有长度的概念，所以也并没有length的属性或者size()的方法来获取。\n\n那如果想要计算这个object中定义了多少属性值呢？(从Ojbect继承过来的不算)\n\n\n##思路\n\n方法1:  Object中有hasOwnProperty()的方法，可以判断对象是否有某个特定的属性。\nfor-in 可以查找object的所有属性。而hasOwnProperty是判断本身对象的属性，不查找原型链的属性，这正好是我们要的。\n\n方法2:  Object还有另外一个keys的方法，可以返回所有的keys。\n\n##实现\n\n方法1:\n    \n        var obj = {a:\"1\",b:\"2\",c:\"3\"},length=0;\n        \n        for (var property in obj) {\n            if (obj.hasOwnProperty(property)) {\n                length++;\n            }\n        }\n    \n       console.log(length);\n       \n       \n方法2:\n\n       var obj = {a:\"1\",b:\"2\",c:\"3\"};       \n       console.log(Object.keys(obj).length);\n    \n\n\n\n","slug":"获取object的属性长度","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sl000a8a6b037x75tx"},{"title":"获取安卓签名keystore中的sha1","date":"2015-10-16T06:43:23.000Z","_content":"\n\nkeytool的命令，可以获取keystore中的很多信息。\n\ncmd 到用户根目录下的.android目录。\n\n    cd .android\n    \n将你的keystore(比如叫yourdebug.keystore)文件拷到.android目录，然后执行命令：\n\n    keytool -list -v -keystore yourdebug.keystore\n    \n    \n    \n    \n","source":"_posts/获取keystore签名中得sha1.md","raw":"title: \"获取安卓签名keystore中的sha1\"\ndate: 2015-10-16 14:43:23\ntags: [Android]\n---\n\n\nkeytool的命令，可以获取keystore中的很多信息。\n\ncmd 到用户根目录下的.android目录。\n\n    cd .android\n    \n将你的keystore(比如叫yourdebug.keystore)文件拷到.android目录，然后执行命令：\n\n    keytool -list -v -keystore yourdebug.keystore\n    \n    \n    \n    \n","slug":"获取keystore签名中得sha1","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sm000c8a6b4bo5mrfh"},{"title":"自定义错误模块无法识别此错误","date":"2015-12-13T11:00:22.000Z","_content":"\n##问题描述\n\n前两天生产上发现某地区的部分用户手机扫码打开页面出现【自定义错误模块无法识别此错误】。\n\n##排查过程\n\n1.前端代码中并没有过这样的处理，所以就先查服务接口是否有这样的报错。\n\n2.但发现服务接口并没有异常，于是去看页面请求的日志，发现当前页面出现了大量的429错。\n\n3.http 的 429 错误码是Too Many Request.因为请求太多服务器拒绝了该IP的访问。查了下被拒绝的IP，刚好地区与故障用户的地区一致。\n\n4.问题基本就是这个了，服务器返回了429的错误码，不像404，502这些常见的，用户的手机浏览器一般都没有去处理这个错误码，于是返回的【自定义错误模块无法识别此错误】\n\n5.和业务反映原因，可能是手机连的wifi，出口ip一致，请求过多导致服务器拒绝，建议用户扫码时用移动网络。\n\n6.业务反馈说，用户确实用的是移动网络啊。\n\n7. = =！继续查，发现曾经那个地方有爬虫访问公司网络，那个移动基站的IP被封了20几个。\n\n\n","source":"_posts/自定义错误模块无法识别此错误.md","raw":"title: \"自定义错误模块无法识别此错误\"\ndate: 2015-12-13 19:00:22\ntags: [故障排查]\n---\n\n##问题描述\n\n前两天生产上发现某地区的部分用户手机扫码打开页面出现【自定义错误模块无法识别此错误】。\n\n##排查过程\n\n1.前端代码中并没有过这样的处理，所以就先查服务接口是否有这样的报错。\n\n2.但发现服务接口并没有异常，于是去看页面请求的日志，发现当前页面出现了大量的429错。\n\n3.http 的 429 错误码是Too Many Request.因为请求太多服务器拒绝了该IP的访问。查了下被拒绝的IP，刚好地区与故障用户的地区一致。\n\n4.问题基本就是这个了，服务器返回了429的错误码，不像404，502这些常见的，用户的手机浏览器一般都没有去处理这个错误码，于是返回的【自定义错误模块无法识别此错误】\n\n5.和业务反映原因，可能是手机连的wifi，出口ip一致，请求过多导致服务器拒绝，建议用户扫码时用移动网络。\n\n6.业务反馈说，用户确实用的是移动网络啊。\n\n7. = =！继续查，发现曾经那个地方有爬虫访问公司网络，那个移动基站的IP被封了20几个。\n\n\n","slug":"自定义错误模块无法识别此错误","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sn000f8a6bluzm9zqi"},{"title":"生活好boring啊","date":"2015-07-13T02:10:53.000Z","_content":"\n工作也好boring啊，虽然也是很有挑战性的项目，但又回到一个人工作的状态。\n\nflighting都说得越来越没底气。\n\n男朋友重新当了码农，也越来越忙了。一起加班一起写代码什么的真是够了。\n\n找一个自己不会迷路的目标，然后每天迁入吧。\n\n","source":"_posts/生活好Boring啊.md","raw":"title: \"生活好boring啊\"\ndate: 2015-07-13 10:10:53\ntags: [日常]\n---\n\n工作也好boring啊，虽然也是很有挑战性的项目，但又回到一个人工作的状态。\n\nflighting都说得越来越没底气。\n\n男朋友重新当了码农，也越来越忙了。一起加班一起写代码什么的真是够了。\n\n找一个自己不会迷路的目标，然后每天迁入吧。\n\n","slug":"生活好Boring啊","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sp000i8a6bu83zx5qc"},{"title":"求一个集合的所有子集","date":"2015-07-18T03:35:17.000Z","_content":"\n给定一个集合，求出它的所有子集。例如给[1,2,3], 那么输出应该是[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3].\n\n\n\n","source":"_posts/求一个集合的所有子集.md","raw":"title: \"求一个集合的所有子集\"\ndate: 2015-07-18 11:35:17\ntags: [算法]\n---\n\n给定一个集合，求出它的所有子集。例如给[1,2,3], 那么输出应该是[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3].\n\n\n\n","slug":"求一个集合的所有子集","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sq000l8a6bgcphjhql"},{"title":"正则获取url中的参数","date":"2015-08-12T14:26:32.000Z","_content":"\n##思路\n\nurl中的参数都是以[&]name=value的形式带在url后面的，而location.search中可以拿到url中？之后的字符串（包括？在内）。\n\n那么通过处理location.search的字符串，即可得到想要的参数。\n\n我们用正则匹配的方式,给一个参数name，求它的value。\n\n    function getQueryString(param){\n        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');\n        var r = window.location.search.substr(1).match(reg);\n        if (r != null) {\n            return unescape(r[2]);      \n        }\n        return null;\n    }\n    \n    \n\n这个正则是找以 &name 或者 name 为开头，以 =value& 或者 =value 结尾的字符串，忽略大小写，一次匹配不循环。\n\n以 a=2&b=3&c=4 为例子.\n\n当name=a时:\n    \n    r= [\"a=2&\",\"\",\"2\",\"$\"]\n \n当name=b时:\n    \n    r = [\"&b=3&\",\"&\",\"3\",\"&\"]\n    \n当name=c时:\n    \n    r = [\"&c=4\",\"&\",\"4\",\"\"]\n    \n##match的用法    \n\nmatch() 方法将检索字符串 stringObject，以找到一个或多个与 regexp 匹配的文本。\n\n这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。\n\n如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。\n\n如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。\n\n该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。\n\n除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。\n\n如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。\n\n注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用 RegExp.exec()。    \n    \n","source":"_posts/正则获取url中的参数.md","raw":"title: \"正则获取url中的参数\"\ndate: 2015-08-12 22:26:32\ntags:  [正则,JavaScript]\n---\n\n##思路\n\nurl中的参数都是以[&]name=value的形式带在url后面的，而location.search中可以拿到url中？之后的字符串（包括？在内）。\n\n那么通过处理location.search的字符串，即可得到想要的参数。\n\n我们用正则匹配的方式,给一个参数name，求它的value。\n\n    function getQueryString(param){\n        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');\n        var r = window.location.search.substr(1).match(reg);\n        if (r != null) {\n            return unescape(r[2]);      \n        }\n        return null;\n    }\n    \n    \n\n这个正则是找以 &name 或者 name 为开头，以 =value& 或者 =value 结尾的字符串，忽略大小写，一次匹配不循环。\n\n以 a=2&b=3&c=4 为例子.\n\n当name=a时:\n    \n    r= [\"a=2&\",\"\",\"2\",\"$\"]\n \n当name=b时:\n    \n    r = [\"&b=3&\",\"&\",\"3\",\"&\"]\n    \n当name=c时:\n    \n    r = [\"&c=4\",\"&\",\"4\",\"\"]\n    \n##match的用法    \n\nmatch() 方法将检索字符串 stringObject，以找到一个或多个与 regexp 匹配的文本。\n\n这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。\n\n如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。\n\n如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。\n\n该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。\n\n除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。\n\n如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。\n\n注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用 RegExp.exec()。    \n    \n","slug":"正则获取url中的参数","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1st000o8a6bu92ofdks"},{"title":"快速排序算法","date":"2015-07-15T03:15:22.000Z","_content":"\n##概念\n\n通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小。\n然后再按此方法对这两部分数据分别进行快速排序，以此达到整个数据变成有序序列。\n\n##思路\n一趟快速排序的算法是：\n1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；\n2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；\n3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；\n4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；\n5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。\n\n##时间复杂度\n假设其数组长度为n，其算法复杂度为o（nlog（n））\n\n##实现\n\n    //var array = [3, 8, 1, 9, 0, 6, 5, 2, 4, 7];\n    var array = [111,34,231,89,22,90,1,23,7,45,222,55,2456,34,33,9,3,55,1234,67,3,80,46,37,48,24,16];\n      console.log(array.toString());\n\n    function quickSort(array) {\n        var count = 0;\n\n\n        function sortPartial(front, back) {\n\n            var key = array[front], i = front, j = back;\n            if(j-i>=1){\n\n                while ( i < j) {\n                    //从后往前遍历，找到第一个比key小的替换位置。\n                    for (; j >i; j--) {\n\n                        if (array[j] < key) {\n                            array[i] = array[j];\n                            array[j] = key;\n                            console.log(array.toString());\n                            break;\n                        }\n                    }\n                    //从前往后遍历，找到第一个比key大的替换位置\n                    for (; i < j; i++) {\n                        count++;\n                        if (array[i] > key) {\n                            array[j] = array[i];\n                            array[i] = key;\n                            console.log(array.toString());\n                            break;\n                        }\n                    }\n                }\n\n                //当前key的位置确定，开始递归key前半部分，和key后半部分。\n                 sortPartial(front, i-1);\n                 sortPartial(j+1, back);\n            }\n\n        }\n\n        sortPartial(0, array.length - 1);\n        return array;\n\n    }\n\n    console.log(quickSort(array).toString());\n\nPS: 写了一个小时。。。也真是醉了。","source":"_posts/快速排序算法.md","raw":"title: \"快速排序算法\"\ndate: 2015-07-15 11:15:22\ntags: [算法]\n---\n\n##概念\n\n通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小。\n然后再按此方法对这两部分数据分别进行快速排序，以此达到整个数据变成有序序列。\n\n##思路\n一趟快速排序的算法是：\n1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；\n2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；\n3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；\n4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；\n5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。\n\n##时间复杂度\n假设其数组长度为n，其算法复杂度为o（nlog（n））\n\n##实现\n\n    //var array = [3, 8, 1, 9, 0, 6, 5, 2, 4, 7];\n    var array = [111,34,231,89,22,90,1,23,7,45,222,55,2456,34,33,9,3,55,1234,67,3,80,46,37,48,24,16];\n      console.log(array.toString());\n\n    function quickSort(array) {\n        var count = 0;\n\n\n        function sortPartial(front, back) {\n\n            var key = array[front], i = front, j = back;\n            if(j-i>=1){\n\n                while ( i < j) {\n                    //从后往前遍历，找到第一个比key小的替换位置。\n                    for (; j >i; j--) {\n\n                        if (array[j] < key) {\n                            array[i] = array[j];\n                            array[j] = key;\n                            console.log(array.toString());\n                            break;\n                        }\n                    }\n                    //从前往后遍历，找到第一个比key大的替换位置\n                    for (; i < j; i++) {\n                        count++;\n                        if (array[i] > key) {\n                            array[j] = array[i];\n                            array[i] = key;\n                            console.log(array.toString());\n                            break;\n                        }\n                    }\n                }\n\n                //当前key的位置确定，开始递归key前半部分，和key后半部分。\n                 sortPartial(front, i-1);\n                 sortPartial(j+1, back);\n            }\n\n        }\n\n        sortPartial(0, array.length - 1);\n        return array;\n\n    }\n\n    console.log(quickSort(array).toString());\n\nPS: 写了一个小时。。。也真是醉了。","slug":"快速排序算法","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sv000s8a6bkyjuu5f4"},{"title":"微信、手Q、Qzone之x5内核inspect调试解决方案","date":"2015-08-04T11:33:53.000Z","_content":"\n[具体操作点这里](http://bbs.mb.qq.com/thread-243399-1-1.html?pid=313743&fid=93)\n\n这个远程调试的方法和weinre类似，优势在于不用将调试脚本部署到线上，缺点就是只能安卓平台。\n","source":"_posts/微信、手Q、Qzone之x5内核inspect调试解决方案.md","raw":"title: \"微信、手Q、Qzone之x5内核inspect调试解决方案\"\ndate: 2015-08-04 19:33:53\ntags: [工具]\n---\n\n[具体操作点这里](http://bbs.mb.qq.com/thread-243399-1-1.html?pid=313743&fid=93)\n\n这个远程调试的方法和weinre类似，优势在于不用将调试脚本部署到线上，缺点就是只能安卓平台。\n","slug":"微信、手Q、Qzone之x5内核inspect调试解决方案","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sw000u8a6bm6os8nk2"},{"title":"将数字转换为千分位的金额格式","date":"2015-07-25T02:58:43.000Z","_content":"\n##实现\n\n将一个数字转换为千分位的金额格式，找了酱一个正则表达式。\n\n    var num =12345;\n    console.log ((num.toFixed(2) + '').replace(/\\d{1,3}(?=(\\d{3})+(\\.\\d*)?$)/g, '$&,'));\n    \n\n##解析\n    \n 一点点来看这个正则式什么意思。\n \n **toFixed(2)** : 数字保留2位小数。\n \n **\\d{1,3}**    : 包含1个或者3个数字的字符串。（为简便表述，这个字符串先记做A）\n    \n **\\d{3}**      : 包含3个数字\n \n **(\\d{3})+**   : 包含至少1个的3个数字的组合    \n \n **(\\.\\d*)?$**  : 以小数点以及其n位数字为结尾\n \n **(\\d{3})+(\\.\\d*)?$**     : 小数点前至少1个3个数组，小数点后有n为数字的字符串（为简便表述，这个字符串先记做B）\n \n **?=(\\d{3})+(\\.\\d*)?$**   : 找出任何其后紧接指定字符串B的字符串A\n \n ** /g**    : 全局匹配\n \n **$&,**     : 当前匹配的字符串，集合上面的，这个匹配字符串为A,并将A后面加个逗号“,”\n \n \n 字面的意思就酱了。\n \n##验证 \n 我们举几个例子来验证一下。\n \n 假设num 是2位数或1位数，那么字符串B是为空的，不做逗号替换，直接返回;\n \n num是3位数，则B = num，但是字符串A是空的，不做逗号替换，直接返回。\n \n num是4,5位数，B是后三位，A是B前一位，找到这样的A，对A进行逗号替换。然后继续找，发现找不到了。\n \n num是6位数，B = num， 找不到A，继续， B = num的后三位，找到A是B的前一位，加逗号。\n \n num是7位数（1234567），B = num的后六位（234567），A是第一位（1），加逗号，此时结果为(1,234567).\n \n 再继续查找，B是567，找到A是4，加逗号，结果为（1,234,567）.这就递归num是6为数的情况了。\n \n \n 我们先找字符串B为345.00,然后找到2是满足字符串A的要求的。2后面加逗号。\n g 继续找，发现没有了，结果是12,345.00;\n \n \n 话说其实试验下来发现字符串A可以直接是**\\d{1}**\n \n \n \n##PS：\n\n正则中$1,$2,$3,..$99,代表第1,2,3,...99匹配的字符串。\n\n$'代表当前匹配字符串后面的字符串。\n$`代表当前匹配字符串前面的字符串。\n\n比如字符串“Hello,World”， 匹配字符串为\",\"的话，$`代表“Hello”,$'代表“World”\n\n","source":"_posts/将数字转换为千分位的金额格式.md","raw":"title: \"将数字转换为千分位的金额格式\"\ndate: 2015-07-25 10:58:43\ntags: [正则]\n---\n\n##实现\n\n将一个数字转换为千分位的金额格式，找了酱一个正则表达式。\n\n    var num =12345;\n    console.log ((num.toFixed(2) + '').replace(/\\d{1,3}(?=(\\d{3})+(\\.\\d*)?$)/g, '$&,'));\n    \n\n##解析\n    \n 一点点来看这个正则式什么意思。\n \n **toFixed(2)** : 数字保留2位小数。\n \n **\\d{1,3}**    : 包含1个或者3个数字的字符串。（为简便表述，这个字符串先记做A）\n    \n **\\d{3}**      : 包含3个数字\n \n **(\\d{3})+**   : 包含至少1个的3个数字的组合    \n \n **(\\.\\d*)?$**  : 以小数点以及其n位数字为结尾\n \n **(\\d{3})+(\\.\\d*)?$**     : 小数点前至少1个3个数组，小数点后有n为数字的字符串（为简便表述，这个字符串先记做B）\n \n **?=(\\d{3})+(\\.\\d*)?$**   : 找出任何其后紧接指定字符串B的字符串A\n \n ** /g**    : 全局匹配\n \n **$&,**     : 当前匹配的字符串，集合上面的，这个匹配字符串为A,并将A后面加个逗号“,”\n \n \n 字面的意思就酱了。\n \n##验证 \n 我们举几个例子来验证一下。\n \n 假设num 是2位数或1位数，那么字符串B是为空的，不做逗号替换，直接返回;\n \n num是3位数，则B = num，但是字符串A是空的，不做逗号替换，直接返回。\n \n num是4,5位数，B是后三位，A是B前一位，找到这样的A，对A进行逗号替换。然后继续找，发现找不到了。\n \n num是6位数，B = num， 找不到A，继续， B = num的后三位，找到A是B的前一位，加逗号。\n \n num是7位数（1234567），B = num的后六位（234567），A是第一位（1），加逗号，此时结果为(1,234567).\n \n 再继续查找，B是567，找到A是4，加逗号，结果为（1,234,567）.这就递归num是6为数的情况了。\n \n \n 我们先找字符串B为345.00,然后找到2是满足字符串A的要求的。2后面加逗号。\n g 继续找，发现没有了，结果是12,345.00;\n \n \n 话说其实试验下来发现字符串A可以直接是**\\d{1}**\n \n \n \n##PS：\n\n正则中$1,$2,$3,..$99,代表第1,2,3,...99匹配的字符串。\n\n$'代表当前匹配字符串后面的字符串。\n$`代表当前匹配字符串前面的字符串。\n\n比如字符串“Hello,World”， 匹配字符串为\",\"的话，$`代表“Hello”,$'代表“World”\n\n","slug":"将数字转换为千分位的金额格式","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1sy000w8a6b57ysfh5h"},{"title":"将hexo部署在github pages 的子目录","date":"2015-09-29T03:25:07.000Z","_content":"\n##场景：\n\n  个人博客和个人一些项目都想放到github pages这个静态服务器上。\n  \n##冲突：\n\n  1. 最简单的想到的是在根目录下分blog和project的目录。\n  \n  但是我之前搭hexo的时候已经把博客的东西放到了根目录，试了一下整体搬迁到blog目录，会出现css，图片，js的路径问题。\n  \n  这里就要逐个修改hexo的路径配置。\n  \n  2. 还有另外一种办法就是，博客继续保留在github.io的根目录上，同时再建一个project目录。\n  \n  project目录下是一些需要运行在静态服务器上的代码，比如做demo。\n  \n  但用hexo deploy进行部署的时候，只能deploy 博客的代码，不能把自己project的代码也push上去。\n  \n  这里就需要修改hexo自带的deployer.js的文件。自行添加文件拷贝的任务。\n  \n##修改hexo的路径配置\n\n  1. 首先是博客目录下的_config.yml 文件\n  \n        url: http://judastree.github.io/blog/\n        root: /blog/\n\n  2. 然后是主题目录下的_config.yml 文件\n        \n        #菜单\n        menu:\n          home: /blog/\n          archives: /blog/archives\n          about: /blog/about\n          tags: /blog/tags            \n        #头像\n        avatar: /blog/images/profile.jpeg\n  \n  3. 再接下来是需要自己细看的修改的，比如图片的引用地址。\n\n##修改hexo deployer.js文件\n  \n  1. 打开文件:node_modules/hexo-deployer-git/lib/deployer.js\n  \n  2. 找到对应代码片段，拷贝project目录，还有gitignore的文件，hexo的.deploy_git目录下原来没有gitignore文件\n  \n        return fs.exists(deployDir).then(function(exist){\n          if (exist) return;\n          log.info('Setting up Git deployment...');\n          return setup();\n        }).then(function(){\n          //log.info('Git pull first');\n          //git('pull');\n          log.info('Clearing .deploy folder...');\n          return fs.emptyDir(deployDir);\n        }).then(function(){\n          //log.info('Copying files from public folder...');\n          return fs.copyDir(publicDir, deployDir);\n          //log.info('Copying gitignore...');\n          //fs.copyFile(gitignoreFile,deployDir+\"/.gitignore\");\n          //log.info('Copying files from other project folder...');\n          //return fs.copyDir(otherProjectFolderDir,deployDir+\"/projects\");\n        }).then(function(){\n          return parseConfig(args);\n        }).map(function(repo){\n          return push(repo);\n        });\n        \n  3. 注意这里还要加入git pull 的命令，因为当你在project的目录提交了代码，博客的目录不拉取最新的commit的话，提交会有问题的。\n        \n##博客文章的push问题\n        \n   我用第一种方法，将博客从根目录搬到blog子目录。 除了路径的问题，和第二种方法一样，也遇到了push的问题。\n   \n   因为git本地仓库和远程仓库对应，不能只push博客的目录，要push整个本地仓库都要push上去。\n      \n   这里还是修改hexo 的deployer.js ，添加自定义的任务。\n   \n   比如将hexo的public目录不是复制到.deploy_git目录，而是复制到我们本地的仓库的blog目录。\n   \n     //var deployDir = pathFn.join(baseDir, '.deploy_git');\n     var deployDir = \"/Users/judastree/Documents/code/github/judastree.github.io/blog\";\n   \n      \n   这里commit可以，但是push可能会遇到问题。 \n   \n   继续修改deployer.js里的push代码。将push -u origin branch --force 改成直接push。github默认会给我们-u的。\n   \n         //return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n         return git('push','-u','origin',repo.branch);\n         \n         \n   \n      ","source":"_posts/将hexo部署在github pages 的子目录.md","raw":"title: \"将hexo部署在github pages 的子目录\"\ndate: 2015-09-29 11:25:07\ntags: [工具]\n---\n\n##场景：\n\n  个人博客和个人一些项目都想放到github pages这个静态服务器上。\n  \n##冲突：\n\n  1. 最简单的想到的是在根目录下分blog和project的目录。\n  \n  但是我之前搭hexo的时候已经把博客的东西放到了根目录，试了一下整体搬迁到blog目录，会出现css，图片，js的路径问题。\n  \n  这里就要逐个修改hexo的路径配置。\n  \n  2. 还有另外一种办法就是，博客继续保留在github.io的根目录上，同时再建一个project目录。\n  \n  project目录下是一些需要运行在静态服务器上的代码，比如做demo。\n  \n  但用hexo deploy进行部署的时候，只能deploy 博客的代码，不能把自己project的代码也push上去。\n  \n  这里就需要修改hexo自带的deployer.js的文件。自行添加文件拷贝的任务。\n  \n##修改hexo的路径配置\n\n  1. 首先是博客目录下的_config.yml 文件\n  \n        url: http://judastree.github.io/blog/\n        root: /blog/\n\n  2. 然后是主题目录下的_config.yml 文件\n        \n        #菜单\n        menu:\n          home: /blog/\n          archives: /blog/archives\n          about: /blog/about\n          tags: /blog/tags            \n        #头像\n        avatar: /blog/images/profile.jpeg\n  \n  3. 再接下来是需要自己细看的修改的，比如图片的引用地址。\n\n##修改hexo deployer.js文件\n  \n  1. 打开文件:node_modules/hexo-deployer-git/lib/deployer.js\n  \n  2. 找到对应代码片段，拷贝project目录，还有gitignore的文件，hexo的.deploy_git目录下原来没有gitignore文件\n  \n        return fs.exists(deployDir).then(function(exist){\n          if (exist) return;\n          log.info('Setting up Git deployment...');\n          return setup();\n        }).then(function(){\n          //log.info('Git pull first');\n          //git('pull');\n          log.info('Clearing .deploy folder...');\n          return fs.emptyDir(deployDir);\n        }).then(function(){\n          //log.info('Copying files from public folder...');\n          return fs.copyDir(publicDir, deployDir);\n          //log.info('Copying gitignore...');\n          //fs.copyFile(gitignoreFile,deployDir+\"/.gitignore\");\n          //log.info('Copying files from other project folder...');\n          //return fs.copyDir(otherProjectFolderDir,deployDir+\"/projects\");\n        }).then(function(){\n          return parseConfig(args);\n        }).map(function(repo){\n          return push(repo);\n        });\n        \n  3. 注意这里还要加入git pull 的命令，因为当你在project的目录提交了代码，博客的目录不拉取最新的commit的话，提交会有问题的。\n        \n##博客文章的push问题\n        \n   我用第一种方法，将博客从根目录搬到blog子目录。 除了路径的问题，和第二种方法一样，也遇到了push的问题。\n   \n   因为git本地仓库和远程仓库对应，不能只push博客的目录，要push整个本地仓库都要push上去。\n      \n   这里还是修改hexo 的deployer.js ，添加自定义的任务。\n   \n   比如将hexo的public目录不是复制到.deploy_git目录，而是复制到我们本地的仓库的blog目录。\n   \n     //var deployDir = pathFn.join(baseDir, '.deploy_git');\n     var deployDir = \"/Users/judastree/Documents/code/github/judastree.github.io/blog\";\n   \n      \n   这里commit可以，但是push可能会遇到问题。 \n   \n   继续修改deployer.js里的push代码。将push -u origin branch --force 改成直接push。github默认会给我们-u的。\n   \n         //return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n         return git('push','-u','origin',repo.branch);\n         \n         \n   \n      ","slug":"将hexo部署在github pages 的子目录","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1t0000y8a6bihmuzn8k"},{"title":"学习下ES6","date":"2015-07-15T03:26:29.000Z","_content":"\n主要是看阮一峰的[入门教程](http://es6.ruanyifeng.com/#docs/intro)\n还有csdn上的[探秘ES6](http://www.csdn.net/tag/%E6%8E%A2%E7%A7%98es6/news)\ngithub上的[es6 feature](https://github.com/lukehoban/es6features)\n\n说起来好惭愧，一直都没有去了解ECMAScript,枉做前端。\n\nES6有哪些酷炫的新特性呢？\n\n## 新增箭头操作符=> ,简化函数书写\n coffeescript的语法糖里也是有样，各种回调需要写function,现在用=> 代替function关键字\n\n## 新增基本类型 \n JS有null,undefined,boolean,number,string五种基本类型，object是引用类型。\n 现在新增Symbol这个基本类型，避免与已有代码命名冲突\n \n    var key = Symbol(\"key\");\n \n## 自带Promise\n 现在已经很多js的类库都支持Promise了，比如Jquery。ES6正式引入，提供原生的Promise对象。\n \n##新增块级变量的定义 关键字let\n JS是变量var定义是不存在块级生命周期的。现在新增let关键字，仅可以在块级中使用。\n \n     for(let i = 0; i < arr.length; i++){}\n     \n     console.log(i)\n     //ReferenceError: i is not defined\n \n##变量的解构赋值\n 自动解析数组或对象中的值，并给对应变量进行赋值，这被称为解构（Destructuring）。\n \n     \n     var [x,y]=getVal(),//函数返回值的解构\n         [name,,age]=['wayou','male','secrect'];//数组解构\n     \n     function getVal() {\n         return [ 1, 2 ];\n     }\n     \n     console.log('x:'+x+', y:'+y);//输出：x:1, y:2 \n     console.log('name:'+name+', age:'+age);//输出： name:wayou, age:secrect\n \n 据说在函数传参中很有用。\n 如果函数的参数列表很长，又不想记住他们的顺序，我们对参数对象使用解构赋值，这样，在访问对象属性时，便可以避免重复调用这一参数对象    \n\n##for of 的遍历\n   我们以前用for in 遍历数组，但拿到的是数组的索引值，这点很烦。for of 拿到的值不是索引，完全没有这个烦恼。\n   \n       for (var value of myArray) { \n           console.log(value); \n       }\n   \n   另外，我们以前也用forEach遍历数组，for(var i of array){} 和forEach(function(i){})比起来，优势在于还可以有break,continue,return这些操作。\n   \n##Generator函数\n\n  没有看明白这是干什么，mark下\n  \n##引入模块化 Module\n  模块功能主要由两个命令构成：export和import。\n  export命令用于用户自定义模块，规定对外接口；\n  import命令用于输入其他模块提供的功能，同时创造命名空间（namespace），防止函数名冲突。\n  这个对于代码管理很有用啊。越来越像java了...\n  \n##还有一些其他的新增api，新增的map和set集合等等，到时再看了。","source":"_posts/学习下ES6.md","raw":"title: \"学习下ES6\"\ndate: 2015-07-15 11:26:29\ntags: [JavaScript]\n---\n\n主要是看阮一峰的[入门教程](http://es6.ruanyifeng.com/#docs/intro)\n还有csdn上的[探秘ES6](http://www.csdn.net/tag/%E6%8E%A2%E7%A7%98es6/news)\ngithub上的[es6 feature](https://github.com/lukehoban/es6features)\n\n说起来好惭愧，一直都没有去了解ECMAScript,枉做前端。\n\nES6有哪些酷炫的新特性呢？\n\n## 新增箭头操作符=> ,简化函数书写\n coffeescript的语法糖里也是有样，各种回调需要写function,现在用=> 代替function关键字\n\n## 新增基本类型 \n JS有null,undefined,boolean,number,string五种基本类型，object是引用类型。\n 现在新增Symbol这个基本类型，避免与已有代码命名冲突\n \n    var key = Symbol(\"key\");\n \n## 自带Promise\n 现在已经很多js的类库都支持Promise了，比如Jquery。ES6正式引入，提供原生的Promise对象。\n \n##新增块级变量的定义 关键字let\n JS是变量var定义是不存在块级生命周期的。现在新增let关键字，仅可以在块级中使用。\n \n     for(let i = 0; i < arr.length; i++){}\n     \n     console.log(i)\n     //ReferenceError: i is not defined\n \n##变量的解构赋值\n 自动解析数组或对象中的值，并给对应变量进行赋值，这被称为解构（Destructuring）。\n \n     \n     var [x,y]=getVal(),//函数返回值的解构\n         [name,,age]=['wayou','male','secrect'];//数组解构\n     \n     function getVal() {\n         return [ 1, 2 ];\n     }\n     \n     console.log('x:'+x+', y:'+y);//输出：x:1, y:2 \n     console.log('name:'+name+', age:'+age);//输出： name:wayou, age:secrect\n \n 据说在函数传参中很有用。\n 如果函数的参数列表很长，又不想记住他们的顺序，我们对参数对象使用解构赋值，这样，在访问对象属性时，便可以避免重复调用这一参数对象    \n\n##for of 的遍历\n   我们以前用for in 遍历数组，但拿到的是数组的索引值，这点很烦。for of 拿到的值不是索引，完全没有这个烦恼。\n   \n       for (var value of myArray) { \n           console.log(value); \n       }\n   \n   另外，我们以前也用forEach遍历数组，for(var i of array){} 和forEach(function(i){})比起来，优势在于还可以有break,continue,return这些操作。\n   \n##Generator函数\n\n  没有看明白这是干什么，mark下\n  \n##引入模块化 Module\n  模块功能主要由两个命令构成：export和import。\n  export命令用于用户自定义模块，规定对外接口；\n  import命令用于输入其他模块提供的功能，同时创造命名空间（namespace），防止函数名冲突。\n  这个对于代码管理很有用啊。越来越像java了...\n  \n##还有一些其他的新增api，新增的map和set集合等等，到时再看了。","slug":"学习下ES6","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1t100108a6bubcni4ho"},{"title":"如何进行monkey自动化测试","date":"2015-09-08T11:30:06.000Z","_content":"\n##简介\n  Android Monkey自动化测试：Monkey是Android SDK中自带的一个命令行工具，可以运行在模拟器里或实际设备中。\n  它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试。\n\n##准备条件\n  \n  1. Android SDK\n  2. USB数据线\n  3. 将sdk中的adb加入全局环境变量\n  \n##步骤\n  \n  1. 确认设备已经连接到PC上\n  \n        adb devices\n    \n  2.你可以指定要测试的app的包名，如果没有指定的话是测试所有的app。将日志输出到c盘monkeylog.txt中\n  \n        adb shell monkey -p com.android.test  --throttle 1000 -s 600 -v -v -v 1000>C:\\monkeylog.txt\n  \n  \n##如何停止Monkey测试\n    \n   1. adb shell(登录设备)。\n   \n   2. ps|grep monkey(查找进程)。\n   \n   3. kill ID(结束进程)。 \n\n##如何获取ANR文件？（需要具备root权限）\n\n   1. adb shell(登录设备)\n   2. cd /data/anr(进入到anr文件夹)\n   3. ll(查看文件)\n   4. adb pull /data/anr/traces.txt C:\\traces.txt(文件复制)       \n    \n##Monkey命令行参数详解\n    \n   -p: 所要测试的包。\n         示例：-p com.android.test\n   -throttle: 在事件之间插入固定延迟。\n         示例：--throttle 1000（毫秒）\n   -s: 伪随机数生成器的seed值。\n         示例： -s 600（如果用相同的seed值再次运行monkey，它将生成相同的事件序列。）\n   -v: 用于指定日志的详细程度。\n         示例： -v -v -v 100（3个-v代表最详细的日志级别）（数字1000： 表示测试事件数）\n         \n   [其他命令参数](http://developer.android.com/tools/help/monkey.html)      ","source":"_posts/如何进行Monkey自动化测试.md","raw":"title: \"如何进行monkey自动化测试\"\ndate: 2015-09-08 19:30:06\ntags: [Monkey, Android]\n---\n\n##简介\n  Android Monkey自动化测试：Monkey是Android SDK中自带的一个命令行工具，可以运行在模拟器里或实际设备中。\n  它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试。\n\n##准备条件\n  \n  1. Android SDK\n  2. USB数据线\n  3. 将sdk中的adb加入全局环境变量\n  \n##步骤\n  \n  1. 确认设备已经连接到PC上\n  \n        adb devices\n    \n  2.你可以指定要测试的app的包名，如果没有指定的话是测试所有的app。将日志输出到c盘monkeylog.txt中\n  \n        adb shell monkey -p com.android.test  --throttle 1000 -s 600 -v -v -v 1000>C:\\monkeylog.txt\n  \n  \n##如何停止Monkey测试\n    \n   1. adb shell(登录设备)。\n   \n   2. ps|grep monkey(查找进程)。\n   \n   3. kill ID(结束进程)。 \n\n##如何获取ANR文件？（需要具备root权限）\n\n   1. adb shell(登录设备)\n   2. cd /data/anr(进入到anr文件夹)\n   3. ll(查看文件)\n   4. adb pull /data/anr/traces.txt C:\\traces.txt(文件复制)       \n    \n##Monkey命令行参数详解\n    \n   -p: 所要测试的包。\n         示例：-p com.android.test\n   -throttle: 在事件之间插入固定延迟。\n         示例：--throttle 1000（毫秒）\n   -s: 伪随机数生成器的seed值。\n         示例： -s 600（如果用相同的seed值再次运行monkey，它将生成相同的事件序列。）\n   -v: 用于指定日志的详细程度。\n         示例： -v -v -v 100（3个-v代表最详细的日志级别）（数字1000： 表示测试事件数）\n         \n   [其他命令参数](http://developer.android.com/tools/help/monkey.html)      ","slug":"如何进行Monkey自动化测试","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1t200128a6bwuart1j9"},{"title":"如何有效利用碎片化的时间","date":"2015-08-01T02:48:06.000Z","_content":"\n今天周末就不写技能性的学习了，讲下刚才逛知乎的一点感悟。\n\n[如何有效地利用碎片化的时间](http://www.zhihu.com/question/19562330/answer/48706421)\n\n**看了玉伯的回答顿时豁然开朗**\n\n        尽量减少碎片时间。\n        \n        对于无法减少的碎片时间，则好好感受天空、泥土与空气。\n\n常常抱怨时间不够，要学习的东西太多而自己总是浪费在无意义的事情上，也常常抱怨和家人和朋友的相处太少，更会因为男朋友和自己聊天也不时刷微博的恼怒。\n\n然后把自己陷入到烦恼自责的生活中，但其实这样不好。\n\n不要给自己上发条，要找到乐趣，并享受之。\n\n就像玉伯在签名一样，因上努力，果上随缘，这样不是更好么？\n","source":"_posts/如何利用好碎片化的事件.md","raw":"title: \"如何有效利用碎片化的时间\"\ndate: 2015-08-01 10:48:06\ntags: [日常]\n---\n\n今天周末就不写技能性的学习了，讲下刚才逛知乎的一点感悟。\n\n[如何有效地利用碎片化的时间](http://www.zhihu.com/question/19562330/answer/48706421)\n\n**看了玉伯的回答顿时豁然开朗**\n\n        尽量减少碎片时间。\n        \n        对于无法减少的碎片时间，则好好感受天空、泥土与空气。\n\n常常抱怨时间不够，要学习的东西太多而自己总是浪费在无意义的事情上，也常常抱怨和家人和朋友的相处太少，更会因为男朋友和自己聊天也不时刷微博的恼怒。\n\n然后把自己陷入到烦恼自责的生活中，但其实这样不好。\n\n不要给自己上发条，要找到乐趣，并享受之。\n\n就像玉伯在签名一样，因上努力，果上随缘，这样不是更好么？\n","slug":"如何利用好碎片化的事件","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1t400168a6bmev1khv3"},{"title":"坑死的Amazon AWS","date":"2015-09-13T06:42:28.000Z","_content":"\n很久前，想要找个免费的云空间搭服务，听说亚马逊的AWS可以免费使用多久，就去注册试了下，后面忙别的忘了这事。\n\n直到AWS的账单邮件一封封发来......\n\n一个月2，3刀就酱没了，坑死！！！！没钱了应该邮件提醒不续费就停止啊，一直不停止应用然后默默收费算什么啊。\n\n赶紧把应用停掉，以后再也不用AWS了。\n\n\n","source":"_posts/坑死的Amazon-AWS.md","raw":"title: \"坑死的Amazon AWS\"\ndate: 2015-09-13 14:42:28\ntags: [工具]\n---\n\n很久前，想要找个免费的云空间搭服务，听说亚马逊的AWS可以免费使用多久，就去注册试了下，后面忙别的忘了这事。\n\n直到AWS的账单邮件一封封发来......\n\n一个月2，3刀就酱没了，坑死！！！！没钱了应该邮件提醒不续费就停止啊，一直不停止应用然后默默收费算什么啊。\n\n赶紧把应用停掉，以后再也不用AWS了。\n\n\n","slug":"坑死的Amazon-AWS","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1t600188a6bg7nc1ufb"},{"title":"单线程的JavaScript","date":"2015-07-14T15:21:04.000Z","_content":"\n在看别人的代码时发现setTimeout(func,0)的写法很不解。为什么要settimeout 0？\n在网上查资料都引入了单线程的JS这个话题。\n\n一点点来看。\n\n有这样一段代码\n\n    alert(1); \n    setTimeout(\"alert(2)\", 0); \n    alert(3); \n    \n按照正常的理解，延迟0秒就是不延迟执行嘛，但其实不是。输出的结果是1，3，2。\n\n## 为什么会这样呢？\n\nsettimout函数造成一种多线程异步的假象，让你认为js可以顺序执行主逻辑的代码，并同时开另外一个线程去处理要延迟的代码。\n\n但其实JS引擎是单线程，浏览器的一个页面只有一个线程在处理。\n\n那么JS为什么会给人多线程的假象呢？\n\n**因为JS的运行是事件驱动的。**\n\n浏览器中很多行为都是异步的，鼠标点击，窗口拖拽等。如果响应这些事件呢？浏览器把这些异步的事件都放在放入一个行为队列中。\nJS引擎单线程的，顺序处理队列中任务。\n\nsettimeout的延迟做某件事情并没有另开一个线程处理，而是在设定的延时时间到了之后在队列中新建了一个任务。\n\n那么上面的代码就很好理解了。\n\nalert(1)输出1之后，延迟0秒，队列中新建一个任务。\n\n现在队列中有两个任务，一个是执行alert(3),一个是执行alert(2)。\n\n由于js现在正处于alert(3)的任务中，所以会先执行完这个任务，再取任务队列中settimeout插入的alert(2)的任务。\n\nsetTimeout的执行时间点只是加入js主执行队列中的时间点，至于什么时候执行，是由js引擎线程按顺序执行的队列来决定。所以很多时候用setTimeout做动画不流畅的原因。\n\n## 为什么要settimeout 0 呢？\n\nsetTimeout(func, 0)神奇在哪儿？那就是告诉js引擎，在0ms以后把func放到主事件队列中，等待当前的代码执行完毕再执行。\n\n这里的关键就是**改变了代码流程**，把func的执行放到了等待当前的代码执行完毕再执行。\n\n   * 让浏览器渲染当前的变化（很多浏览器UI render和js执行是放在一个线程中，线程阻塞会导致界面无法更新渲染）\n   * 重新评估”script is running too long”警告\n   \n##又引出一个问题\n##既然js多线程异步是假象，那么Ajax请求到底是不是异步呢？\n\n继续查资料，查到了浏览器的一些工作机制。\n浏览器是多线程的，每开一个页面都至少开有下面几个线程：\n\n * javascript引擎线程\n * UI界面渲染线程\n * 浏览器事件触发线程\n * Http请求线程\n \n其中Http请求线程是执行完了就终止的线程，比如我们的Ajax请求。只要有一个ajax请求，浏览器就会开一个http请求线程去异步地执行。\n\n当请求的状态变更时，如果先前已设置回调，这异步线程就产生状态变更事件放到 JavaScript引擎的事件处理队列中等待处理。\n所以JavaScript引擎始终是单线程运行回调函数。\n\n![浏览器线程机制](http://t1.baidu.com/it/u=1569352962,3480269446&fm=21&gp=0.jpg)\n\n   \n**参考资料：**\n\n1.[Javascript是单线程的深入分析](http://blog.csdn.net/talking12391239/article/details/21168489)\n2.[Javascript可否多线程](http://www.2cto.com/kf/201204/129337.html)\n\n\n\n\n","source":"_posts/单线程的Javascript.md","raw":"title: \"单线程的JavaScript\"\ndate: 2015-07-14 23:21:04\ntags: [JavaScript]\n---\n\n在看别人的代码时发现setTimeout(func,0)的写法很不解。为什么要settimeout 0？\n在网上查资料都引入了单线程的JS这个话题。\n\n一点点来看。\n\n有这样一段代码\n\n    alert(1); \n    setTimeout(\"alert(2)\", 0); \n    alert(3); \n    \n按照正常的理解，延迟0秒就是不延迟执行嘛，但其实不是。输出的结果是1，3，2。\n\n## 为什么会这样呢？\n\nsettimout函数造成一种多线程异步的假象，让你认为js可以顺序执行主逻辑的代码，并同时开另外一个线程去处理要延迟的代码。\n\n但其实JS引擎是单线程，浏览器的一个页面只有一个线程在处理。\n\n那么JS为什么会给人多线程的假象呢？\n\n**因为JS的运行是事件驱动的。**\n\n浏览器中很多行为都是异步的，鼠标点击，窗口拖拽等。如果响应这些事件呢？浏览器把这些异步的事件都放在放入一个行为队列中。\nJS引擎单线程的，顺序处理队列中任务。\n\nsettimeout的延迟做某件事情并没有另开一个线程处理，而是在设定的延时时间到了之后在队列中新建了一个任务。\n\n那么上面的代码就很好理解了。\n\nalert(1)输出1之后，延迟0秒，队列中新建一个任务。\n\n现在队列中有两个任务，一个是执行alert(3),一个是执行alert(2)。\n\n由于js现在正处于alert(3)的任务中，所以会先执行完这个任务，再取任务队列中settimeout插入的alert(2)的任务。\n\nsetTimeout的执行时间点只是加入js主执行队列中的时间点，至于什么时候执行，是由js引擎线程按顺序执行的队列来决定。所以很多时候用setTimeout做动画不流畅的原因。\n\n## 为什么要settimeout 0 呢？\n\nsetTimeout(func, 0)神奇在哪儿？那就是告诉js引擎，在0ms以后把func放到主事件队列中，等待当前的代码执行完毕再执行。\n\n这里的关键就是**改变了代码流程**，把func的执行放到了等待当前的代码执行完毕再执行。\n\n   * 让浏览器渲染当前的变化（很多浏览器UI render和js执行是放在一个线程中，线程阻塞会导致界面无法更新渲染）\n   * 重新评估”script is running too long”警告\n   \n##又引出一个问题\n##既然js多线程异步是假象，那么Ajax请求到底是不是异步呢？\n\n继续查资料，查到了浏览器的一些工作机制。\n浏览器是多线程的，每开一个页面都至少开有下面几个线程：\n\n * javascript引擎线程\n * UI界面渲染线程\n * 浏览器事件触发线程\n * Http请求线程\n \n其中Http请求线程是执行完了就终止的线程，比如我们的Ajax请求。只要有一个ajax请求，浏览器就会开一个http请求线程去异步地执行。\n\n当请求的状态变更时，如果先前已设置回调，这异步线程就产生状态变更事件放到 JavaScript引擎的事件处理队列中等待处理。\n所以JavaScript引擎始终是单线程运行回调函数。\n\n![浏览器线程机制](http://t1.baidu.com/it/u=1569352962,3480269446&fm=21&gp=0.jpg)\n\n   \n**参考资料：**\n\n1.[Javascript是单线程的深入分析](http://blog.csdn.net/talking12391239/article/details/21168489)\n2.[Javascript可否多线程](http://www.2cto.com/kf/201204/129337.html)\n\n\n\n\n","slug":"单线程的Javascript","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1t8001a8a6b8b9gmyi4"},{"title":"前端自动化测试探索","date":"2015-07-15T03:13:10.000Z","_content":"\n先挖个坑，以后慢慢填。\n","source":"_posts/前端自动化测试探索.md","raw":"title: \"前端自动化测试探索\"\ndate: 2015-07-15 11:13:10\ntags: \n---\n\n先挖个坑，以后慢慢填。\n","slug":"前端自动化测试探索","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1t9001c8a6bgg0r5gmm"},{"title":"JS判断一个变量是否是Array","date":"2015-11-04T15:03:39.000Z","_content":"##问题描述\n\n用typeof来检查一个变量，不论是array还是object，都将返回‘object'。那么怎样判断一个JavaScript变量是array还是obiect？ \n\n\n##方案\n\n 1. 通过该变量的length属性。\n\n    Array类型有length属性，得到是>=0的数值。Object的length是undefined。\n\n    但当该对象自己有length属性时，这个方法失效。\n\n 2. 通过instanceof 方法\n \n    a instanceof Array 是一个语法糖，相当于 a.constructor == Array.\n    \n    这种方法在多个frame的环境下失效，因为每个iframe都有一套自己的执行环境，跨frame实例化的对象彼此是不共享原型链。\n\n 3. Array.isArray()\n \n    ECMAScript 5的写法，绝大多数的浏览器支持这种方式，早期的一些浏览器不支持。\n    \n 4. 用prototype的call方法来实现\n \n    这也是Jquery的实现，推荐采用这种。\n   \n    因为js中每一个function中都会有call方法和prototype属性，并且js在Object.prototype中的tostring函数上做了一个封装，\n   \n    就是调用toString.call后，会返回[object constructorName]的字符串格式，这里的constructorName就是call参数的函数名\n   \n \n \n \n \n    Object.prototype.toString.call(arr) == '[object Array]'\n   \n   \n   \n   ","source":"_posts/判断参数是Array还是Object.md","raw":"title: \"JS判断一个变量是否是Array\"\ndate: 2015-11-04 23:03:39\ntags: [JavaScript]\n---\n##问题描述\n\n用typeof来检查一个变量，不论是array还是object，都将返回‘object'。那么怎样判断一个JavaScript变量是array还是obiect？ \n\n\n##方案\n\n 1. 通过该变量的length属性。\n\n    Array类型有length属性，得到是>=0的数值。Object的length是undefined。\n\n    但当该对象自己有length属性时，这个方法失效。\n\n 2. 通过instanceof 方法\n \n    a instanceof Array 是一个语法糖，相当于 a.constructor == Array.\n    \n    这种方法在多个frame的环境下失效，因为每个iframe都有一套自己的执行环境，跨frame实例化的对象彼此是不共享原型链。\n\n 3. Array.isArray()\n \n    ECMAScript 5的写法，绝大多数的浏览器支持这种方式，早期的一些浏览器不支持。\n    \n 4. 用prototype的call方法来实现\n \n    这也是Jquery的实现，推荐采用这种。\n   \n    因为js中每一个function中都会有call方法和prototype属性，并且js在Object.prototype中的tostring函数上做了一个封装，\n   \n    就是调用toString.call后，会返回[object constructorName]的字符串格式，这里的constructorName就是call参数的函数名\n   \n \n \n \n \n    Object.prototype.toString.call(arr) == '[object Array]'\n   \n   \n   \n   ","slug":"判断参数是Array还是Object","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tb001d8a6bh0x4wpsn"},{"title":"冥王星为什么有个心呢？","date":"2015-07-16T10:54:42.000Z","_content":"\n晚饭后散步，bf一心在看手机刷微博。\n\n我趴在扶栏上，看飞机慢慢降落。我问bf:\"为什么冥王星有个心呢？\"\n\nbf果断答：“没有心。”\n\n“有心。”我继续问，“为什么冥王星有个心呢？”\n\n“没有心。”\n\n“照片都出来了，怎么没有？可为什么冥王星有个心呢？”\n\nbf还是很确定：“没有心。”\n\n“为什么冥王星有个心呢？”\n\n“没有心。”\n\n“为什么冥王星有个心呢？”\n\n\"没有心。\"\n\n“为什么冥王星有个心呢？”\n\n\"没有心。\"\n\n.....\n\n如此重复了很多遍之后，我终于忍不了了:\"为什么明明有心你要说没心！\"\n\n然后bf也忍不住笑场了：“否定掉冥王星有心就不会继续追问,反正你一直问一直问也不是真正想要知道。”\n\n","source":"_posts/冥王星为什么有个心呢？.md","raw":"title: \"冥王星为什么有个心呢？\"\ndate: 2015-07-16 18:54:42\ntags: [日常]\n---\n\n晚饭后散步，bf一心在看手机刷微博。\n\n我趴在扶栏上，看飞机慢慢降落。我问bf:\"为什么冥王星有个心呢？\"\n\nbf果断答：“没有心。”\n\n“有心。”我继续问，“为什么冥王星有个心呢？”\n\n“没有心。”\n\n“照片都出来了，怎么没有？可为什么冥王星有个心呢？”\n\nbf还是很确定：“没有心。”\n\n“为什么冥王星有个心呢？”\n\n“没有心。”\n\n“为什么冥王星有个心呢？”\n\n\"没有心。\"\n\n“为什么冥王星有个心呢？”\n\n\"没有心。\"\n\n.....\n\n如此重复了很多遍之后，我终于忍不了了:\"为什么明明有心你要说没心！\"\n\n然后bf也忍不住笑场了：“否定掉冥王星有心就不会继续追问,反正你一直问一直问也不是真正想要知道。”\n\n","slug":"冥王星为什么有个心呢？","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tc001f8a6bf20s9201"},{"title":"修改Mac终端命令行颜色","date":"2015-05-20T14:15:55.000Z","_content":"打开终端，输入命令\n\n\t$sudo vim .bash_profile\n\t\n这时在出来的编辑器中输入下面两行配置，然后保存\n\n\texport CLICOLOR=1\n\texport LSCOLORS=cxfxaxdxcxegedabagacad\n\t\n重新打开一个命令行终端，输入“ls”命令，你就能看到颜色变成了绿色。\n\n###详解\n\nLSCOLORS是用来设置当CLICOLOR被启用后，各种文件类型的颜色。LSCOLORS的值中每两个字母为一组，分别设置某个文件类型的文字颜色和背景颜色。\n\n\ta 黑色  \n\tb 红色  \n\tc 绿色  \n\td 棕色  \n\te 蓝色  \n\tf 洋红色  \n\tg 青色  \n\th 浅灰色  \n\tA 黑色粗体  \n\tB 红色粗体  \n\tC 绿色粗体  \n\tD 棕色粗体  \n\tE 蓝色粗体  \n\tF 洋红色粗体  \n\tG 青色粗体  \n\tH 浅灰色粗体  \n\tx 系统默认颜色 \n\n\nLSCOLORS中一共 11 组颜色设置（所以一共22个字符），按照先后顺序，分别对以下的文件类型进行设置：\n\n\t-directory  \n\t-symbolic link  \n\t-socket  \n\t-pipe  \n\t-executable  \n\t-block special  \n\t-character special  \n\t-executable with setuid bit set  \n\t-executable with setgid bit set  \n\t-directory writable to others, with sticky bit  \n\t-directory writable to others, without sticky bit  \n","source":"_posts/修改Mac终端命令行颜色.md","raw":"title: \"修改Mac终端命令行颜色\"\ndate: 2015-05-20 22:15:55\ntags: [mac]\n---\n打开终端，输入命令\n\n\t$sudo vim .bash_profile\n\t\n这时在出来的编辑器中输入下面两行配置，然后保存\n\n\texport CLICOLOR=1\n\texport LSCOLORS=cxfxaxdxcxegedabagacad\n\t\n重新打开一个命令行终端，输入“ls”命令，你就能看到颜色变成了绿色。\n\n###详解\n\nLSCOLORS是用来设置当CLICOLOR被启用后，各种文件类型的颜色。LSCOLORS的值中每两个字母为一组，分别设置某个文件类型的文字颜色和背景颜色。\n\n\ta 黑色  \n\tb 红色  \n\tc 绿色  \n\td 棕色  \n\te 蓝色  \n\tf 洋红色  \n\tg 青色  \n\th 浅灰色  \n\tA 黑色粗体  \n\tB 红色粗体  \n\tC 绿色粗体  \n\tD 棕色粗体  \n\tE 蓝色粗体  \n\tF 洋红色粗体  \n\tG 青色粗体  \n\tH 浅灰色粗体  \n\tx 系统默认颜色 \n\n\nLSCOLORS中一共 11 组颜色设置（所以一共22个字符），按照先后顺序，分别对以下的文件类型进行设置：\n\n\t-directory  \n\t-symbolic link  \n\t-socket  \n\t-pipe  \n\t-executable  \n\t-block special  \n\t-character special  \n\t-executable with setuid bit set  \n\t-executable with setgid bit set  \n\t-directory writable to others, with sticky bit  \n\t-directory writable to others, without sticky bit  \n","slug":"修改Mac终端命令行颜色","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1te001h8a6bsm7pkisx"},{"title":"二叉排序树的实现","date":"2015-07-20T10:44:33.000Z","_content":"\n二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：\n（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；\n（2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；\n（3）左、右子树也分别为二叉排序树；\n（4）没有键值相等的节点。\n\n            /**\n             * Created by judastree on 15/7/20.\n             * 二叉排序树\n             */\n            \n            \n            function Node(value, left, right) {\n                this.value = value;\n                this.left = left;\n                this.right = right;\n            }\n            function BST() {\n                this.root = null;\n            }\n            BST.prototype = {\n                add: function (value) {\n                    var n = new Node(value, null, null);\n                    if (this.root == null) {\n                        //根节点为空，直接插入\n                        this.root = n;\n                        return true;\n                    } else {\n                        //根节点不为空，找到匹配的子节点插\n                        var current = this.root;\n                        while (true) {\n                            if (value < current.value) {\n                                //比当前节点小，而且当前节点没有左孩子，直接插入\n                                if (current.left == null) {\n                                    current.left = n;\n                                    break;\n                                } else {\n                                    //当前节点有左孩子，往下遍历，再和左孩子比较\n                                    current = current.left;\n                                }\n                            } else if (value > current.value) {\n                                //大于当前节点，而且当前节点没有右孩子，直接插入\n                                if (current.right == null) {\n                                    current.right = n;\n                                    break;\n                                } else {\n                                    //当前节点有右孩子，往下遍历，再和右孩子比较\n                                    current = current.right;\n                                }\n            \n                            } else {\n                                //等于的情况，忽略不进行插入\n                                break;\n                            }\n                        }\n                    }\n            \n                },\n                //中序遍历\n                inOrder: function (node, fn) {\n                    if (node) {\n                        if (node.left != null) {\n                            this.inOrder(node.left, fn);\n                        }\n                        fn.call(this, node);\n            \n                        if (node.right != null) {\n                            this.inOrder(node.right, fn);\n                        }\n                    }\n                },\n                //先序遍历\n                preOrder: function (node, fn) {\n                    if (node) {\n                        fn.call(this, node);\n                        if (node.left != null) {\n                            this.preOrder(node.left, fn);\n                        }\n                        if (node.right != null) {\n                            this.preOrder(node.right, fn);\n                        }\n                    }\n                },\n                //后序遍历\n                postOrder: function (node, fn) {\n                    if (node) {\n            \n                        if (node.left != null) {\n                            this.postOrder(node.left, fn);\n                        }\n                        if (node.right != null) {\n                            this.postOrder(node.right, fn);\n                        }\n                        fn.call(this, node);\n                    }\n                },\n                //默认调用中序遍历\n                toArray: function () {\n                    var result = [];\n                    this.inOrder(this.root, function (node) {\n                        result.push(node.value);\n                    });\n                    return result;\n                },\n                toString: function () {\n                    return this.toArray().toString();\n                }\n            };\n            \n            var bst = new BST();\n            \n            bst.add(4);\n            bst.add(8);\n            bst.add(3);\n            bst.add(7);\n            bst.add(1);\n            bst.add(2);\n            console.log(\"中序遍历：\");\n            console.log(bst.toString());\n            console.log(\"先序遍历\");\n            var preResults = [];\n            bst.preOrder(bst.root, function (node) {\n                preResults.push(node.value);\n            });\n            console.log(preResults.toString());\n            console.log(\"后序遍历\");\n            var postResults = [];\n            bst.postOrder(bst.root, function (node) {\n                postResults.push(node.value);\n            });\n            console.log(postResults.toString());\n            \n     \nPS: 边参考别人的，写了一个小时。            ","source":"_posts/二叉排序树的实现.md","raw":"title: \"二叉排序树的实现\"\ndate: 2015-07-20 18:44:33\ntags: [算法]\n---\n\n二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：\n（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；\n（2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；\n（3）左、右子树也分别为二叉排序树；\n（4）没有键值相等的节点。\n\n            /**\n             * Created by judastree on 15/7/20.\n             * 二叉排序树\n             */\n            \n            \n            function Node(value, left, right) {\n                this.value = value;\n                this.left = left;\n                this.right = right;\n            }\n            function BST() {\n                this.root = null;\n            }\n            BST.prototype = {\n                add: function (value) {\n                    var n = new Node(value, null, null);\n                    if (this.root == null) {\n                        //根节点为空，直接插入\n                        this.root = n;\n                        return true;\n                    } else {\n                        //根节点不为空，找到匹配的子节点插\n                        var current = this.root;\n                        while (true) {\n                            if (value < current.value) {\n                                //比当前节点小，而且当前节点没有左孩子，直接插入\n                                if (current.left == null) {\n                                    current.left = n;\n                                    break;\n                                } else {\n                                    //当前节点有左孩子，往下遍历，再和左孩子比较\n                                    current = current.left;\n                                }\n                            } else if (value > current.value) {\n                                //大于当前节点，而且当前节点没有右孩子，直接插入\n                                if (current.right == null) {\n                                    current.right = n;\n                                    break;\n                                } else {\n                                    //当前节点有右孩子，往下遍历，再和右孩子比较\n                                    current = current.right;\n                                }\n            \n                            } else {\n                                //等于的情况，忽略不进行插入\n                                break;\n                            }\n                        }\n                    }\n            \n                },\n                //中序遍历\n                inOrder: function (node, fn) {\n                    if (node) {\n                        if (node.left != null) {\n                            this.inOrder(node.left, fn);\n                        }\n                        fn.call(this, node);\n            \n                        if (node.right != null) {\n                            this.inOrder(node.right, fn);\n                        }\n                    }\n                },\n                //先序遍历\n                preOrder: function (node, fn) {\n                    if (node) {\n                        fn.call(this, node);\n                        if (node.left != null) {\n                            this.preOrder(node.left, fn);\n                        }\n                        if (node.right != null) {\n                            this.preOrder(node.right, fn);\n                        }\n                    }\n                },\n                //后序遍历\n                postOrder: function (node, fn) {\n                    if (node) {\n            \n                        if (node.left != null) {\n                            this.postOrder(node.left, fn);\n                        }\n                        if (node.right != null) {\n                            this.postOrder(node.right, fn);\n                        }\n                        fn.call(this, node);\n                    }\n                },\n                //默认调用中序遍历\n                toArray: function () {\n                    var result = [];\n                    this.inOrder(this.root, function (node) {\n                        result.push(node.value);\n                    });\n                    return result;\n                },\n                toString: function () {\n                    return this.toArray().toString();\n                }\n            };\n            \n            var bst = new BST();\n            \n            bst.add(4);\n            bst.add(8);\n            bst.add(3);\n            bst.add(7);\n            bst.add(1);\n            bst.add(2);\n            console.log(\"中序遍历：\");\n            console.log(bst.toString());\n            console.log(\"先序遍历\");\n            var preResults = [];\n            bst.preOrder(bst.root, function (node) {\n                preResults.push(node.value);\n            });\n            console.log(preResults.toString());\n            console.log(\"后序遍历\");\n            var postResults = [];\n            bst.postOrder(bst.root, function (node) {\n                postResults.push(node.value);\n            });\n            console.log(postResults.toString());\n            \n     \nPS: 边参考别人的，写了一个小时。            ","slug":"二叉排序树的实现","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tf001k8a6bon5plfoh"},{"title":"二分查找算法","date":"2015-07-15T03:15:06.000Z","_content":"\n##概念\n二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；\n其缺点是要求待查表为有序表，且插入删除困难。\n因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\n\n##思路\n将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；\n否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。\n重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。\n\n##时间复杂度\n假设其数组长度为n，其算法复杂度为o（log（n））\n\n##Javascript实现\n\n    var Arr=[3,5,6,7,9,12,15];\n    function binary(find,arr,low,high){\n        if(low<=high){\n            if(arr[low]==find) return low;\n            if(arr[high]==find) return high;\n            \n            var mid=Math.ceil((high+low)/2);\n            \n            if(arr[mid]==find){\n                return mid;\n            }else if(arr[mid]>find){\n                return binary(find,arr,low,mid-1);\n            }else{\n                return binary(find,arr,mid+1,high);\n            }\n        }\n        return -1;\n    }\n    binary(15,Arr,0,Arr.length-1);\n\nPS: 写了半个小时...","source":"_posts/二分查找算法.md","raw":"title: \"二分查找算法\"\ndate: 2015-07-15 11:15:06\ntags: [算法]\n---\n\n##概念\n二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；\n其缺点是要求待查表为有序表，且插入删除困难。\n因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\n\n##思路\n将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；\n否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。\n重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。\n\n##时间复杂度\n假设其数组长度为n，其算法复杂度为o（log（n））\n\n##Javascript实现\n\n    var Arr=[3,5,6,7,9,12,15];\n    function binary(find,arr,low,high){\n        if(low<=high){\n            if(arr[low]==find) return low;\n            if(arr[high]==find) return high;\n            \n            var mid=Math.ceil((high+low)/2);\n            \n            if(arr[mid]==find){\n                return mid;\n            }else if(arr[mid]>find){\n                return binary(find,arr,low,mid-1);\n            }else{\n                return binary(find,arr,mid+1,high);\n            }\n        }\n        return -1;\n    }\n    binary(15,Arr,0,Arr.length-1);\n\nPS: 写了半个小时...","slug":"二分查找算法","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tg001m8a6b1jujkc7o"},{"title":"主流模引擎一览","date":"2015-08-17T09:04:21.000Z","_content":"\nJade，Swig，Handlerbar，UnderScore，Ejs\n\n先占个坑，晚上填\n","source":"_posts/主流模引擎一览.md","raw":"title: \"主流模引擎一览\"\ndate: 2015-08-17 17:04:21\ntags: [Html]\n---\n\nJade，Swig，Handlerbar，UnderScore，Ejs\n\n先占个坑，晚上填\n","slug":"主流模引擎一览","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1th001o8a6bozwmdg28"},{"title":"世界那么大翻墙出去看看","date":"2015-08-05T02:31:28.000Z","_content":"\n一直用的红杏，前几天发现另外一个挺好用的翻墙方法，[最前台](https://zqt.pw/)的zpn。\n\n现在还在内测阶段，需要申请账号。\n\n![zqtzhanghao](/images/zqtzhanghao.png)\n\n##常见问题\n\n[无法使用zpn？](http://mp.weixin.qq.com/s?__biz=MzAxOTU5Nzg1Ng==&mid=210884848&idx=1&sn=b9eb764ce37198723266c611f548a074#rd)\n\n[启动边缘模式](http://mp.weixin.qq.com/s?__biz=MzAxOTU5Nzg1Ng==&mid=210885311&idx=1&sn=7be955b972eae3fd0603b95b39f5a993#wechat_redirect)\n","source":"_posts/世界那么大翻墙出去看看.md","raw":"title: \"世界那么大翻墙出去看看\"\ndate: 2015-08-05 10:31:28\ntags: [工具]\n---\n\n一直用的红杏，前几天发现另外一个挺好用的翻墙方法，[最前台](https://zqt.pw/)的zpn。\n\n现在还在内测阶段，需要申请账号。\n\n![zqtzhanghao](/images/zqtzhanghao.png)\n\n##常见问题\n\n[无法使用zpn？](http://mp.weixin.qq.com/s?__biz=MzAxOTU5Nzg1Ng==&mid=210884848&idx=1&sn=b9eb764ce37198723266c611f548a074#rd)\n\n[启动边缘模式](http://mp.weixin.qq.com/s?__biz=MzAxOTU5Nzg1Ng==&mid=210885311&idx=1&sn=7be955b972eae3fd0603b95b39f5a993#wechat_redirect)\n","slug":"世界那么大翻墙出去看看","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tj001r8a6bjw240db1"},{"title":"webstorm 11激活","date":"2015-12-26T09:01:35.000Z","_content":"\n今天将webstorm更新到了11，全新的icon，同样是要激活，发现一个超方便的方式，不过原理木有搞清楚。\n\nwebstorm菜单栏【Help】->【Register】，在弹出的对话框中选中【License server】\n\n地址输入：http://idea.lanyus.com/\n\n如下图\n\n![webstormregister](/images/webstormregister.png)\n\n\n\n\n","source":"_posts/webstorm-11激活.md","raw":"title: \"webstorm 11激活\"\ndate: 2015-12-26 17:01:35\ntags: [工具, webstorm]\n---\n\n今天将webstorm更新到了11，全新的icon，同样是要激活，发现一个超方便的方式，不过原理木有搞清楚。\n\nwebstorm菜单栏【Help】->【Register】，在弹出的对话框中选中【License server】\n\n地址输入：http://idea.lanyus.com/\n\n如下图\n\n![webstormregister](/images/webstormregister.png)\n\n\n\n\n","slug":"webstorm-11激活","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tl001t8a6bhc72v1j1"},{"title":"ubuntu 上安装最新版本的express","date":"2015-09-30T08:58:37.000Z","_content":"\n##问题描述\n\n  在ubuntu上通过apt-get install node-express命令安装的express版本只有2.5.8\n  \n  用npm install express@4.13.1 -g 命令可以安装高版本的express\n  \n  但是执行express --version时却返现并没有这个目录。\n  \n##解决办法\n\n  这个问题是express的安装目录并不在系统的环境变量之中。\n  \n  1 将 express的实际安装目录加入环境变量。\n  \n    sudo vi /etc/environment \n  \n  2 保存\n  \n  3 使它立即生效\n    \n    source /etc/environment \n    \n    \n  \n\n  \n","source":"_posts/ubuntu-上安装最新版本的express.md","raw":"title: \"ubuntu 上安装最新版本的express\"\ndate: 2015-09-30 16:58:37\ntags: [工具]\n---\n\n##问题描述\n\n  在ubuntu上通过apt-get install node-express命令安装的express版本只有2.5.8\n  \n  用npm install express@4.13.1 -g 命令可以安装高版本的express\n  \n  但是执行express --version时却返现并没有这个目录。\n  \n##解决办法\n\n  这个问题是express的安装目录并不在系统的环境变量之中。\n  \n  1 将 express的实际安装目录加入环境变量。\n  \n    sudo vi /etc/environment \n  \n  2 保存\n  \n  3 使它立即生效\n    \n    source /etc/environment \n    \n    \n  \n\n  \n","slug":"ubuntu-上安装最新版本的express","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tm001x8a6bh9fw9dpq"},{"title":"style currentStyle getComputedStyle 三者区别","date":"2015-07-27T11:58:26.000Z","_content":"\nJS中通过style来获取元素的样式有时并获取不到，为什么呢?\n\n一个元素的样式由三部分组成，嵌入样式，内联样式和外联样式。\n\n   * 内联样式: 写在标签内的样式，<div style=\"\"></div>\n   * 嵌入样式: 写在<html>和<head>之间，用<style></style>包住的样式\n   * 外联样式: 由<link>标签引入的外部css\n   \n   \ndocument.getElementById(\"ID\").style 只可以获取到内嵌样式，也就是写在标签内style属性中定义的样式。\n  \n在IE下可以用**currentStyle**中获取其他样式,但在别的浏览器中不支持。\n  \n而火狐,chrome等可以通过getComputedStyle这个方法来获取所有计算过的样式。\n  \n    getComputedStyle(document.getElementById(\"ID\"))\n    \n    \n","source":"_posts/style-currentStyle-getComputedStyle-三者区别.md","raw":"title: \"style currentStyle getComputedStyle 三者区别\"\ndate: 2015-07-27 19:58:26\ntags: [JavaScript]\n---\n\nJS中通过style来获取元素的样式有时并获取不到，为什么呢?\n\n一个元素的样式由三部分组成，嵌入样式，内联样式和外联样式。\n\n   * 内联样式: 写在标签内的样式，<div style=\"\"></div>\n   * 嵌入样式: 写在<html>和<head>之间，用<style></style>包住的样式\n   * 外联样式: 由<link>标签引入的外部css\n   \n   \ndocument.getElementById(\"ID\").style 只可以获取到内嵌样式，也就是写在标签内style属性中定义的样式。\n  \n在IE下可以用**currentStyle**中获取其他样式,但在别的浏览器中不支持。\n  \n而火狐,chrome等可以通过getComputedStyle这个方法来获取所有计算过的样式。\n  \n    getComputedStyle(document.getElementById(\"ID\"))\n    \n    \n","slug":"style-currentStyle-getComputedStyle-三者区别","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1to001z8a6bsm2ysti6"},{"title":"setWebChromeClient setWebviewClient的区别","date":"2015-07-30T06:23:10.000Z","_content":"\nwebChromeClient 比webviewclient功能更强大，支持页面js。\n\n[same question in stackoverflow](http://stackoverflow.com/questions/2835556/whats-the-difference-between-setwebviewclient-vs-setwebchromeclient)\n\n\n\n","source":"_posts/setWebChromeClient-setWebClient的区别.md","raw":"title: \"setWebChromeClient setWebviewClient的区别\"\ndate: 2015-07-30 14:23:10\ntags: [Android]\n---\n\nwebChromeClient 比webviewclient功能更强大，支持页面js。\n\n[same question in stackoverflow](http://stackoverflow.com/questions/2835556/whats-the-difference-between-setwebviewclient-vs-setwebchromeclient)\n\n\n\n","slug":"setWebChromeClient-setWebClient的区别","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tq00218a6blbxtu1je"},{"title":"requirejs 的运行机制","date":"2015-07-28T09:06:25.000Z","_content":"\n\n在requirejs的官网找到这样一段话：\n    RequireJS loads each dependency as a script tag, using head.appendChild().\n    RequireJS waits for all dependencies to load, figures out the right order in which to call the functions that define the modules,\n    then calls the module definition functions once the dependencies for those functions have been called. \n    \n翻译过来是：\n\n    RequireJS通过head.appendChild()将每一个依赖加载为一个script标签。\n    \n    等到所有的依赖都加载完成之后，RequireJS计算出模块定义函数的调用顺序。\n    \n    一旦依赖这些功能的地方被调用时requiredjs会调用这些功能的模块定义。\n    \n  \n**requirejs是怎么做到模块化的？** \n   \nrequirejs有个loader来保存和监听所有依赖的状态。script标签来加载这些文件，加载成功和失败都会更新依赖的状态。\n\n*是否有重复引用?*\n\nRequirejs是单例的设计，只要同名的被引入过一次（这里的同名相当于amd define的id）就一直是用这个模块的定义。\n\n为了避免全局污染，遵循AMD的规范，define和export。\n\n理想状况下，每个加载的脚本都是通过define()来定义的一个模块；\n\n但有些\"浏览器全局变量注入\"型的传统/遗留库并没有使用define()来定义它们的依赖关系，就必须为此使用shim config来指明它们的依赖关系。 \n\n\n\n\n\n\n\n    \n","source":"_posts/requirejs-的运行机制.md","raw":"title: \"requirejs 的运行机制\"\ndate: 2015-07-28 17:06:25\ntags: [JavaScript]\n---\n\n\n在requirejs的官网找到这样一段话：\n    RequireJS loads each dependency as a script tag, using head.appendChild().\n    RequireJS waits for all dependencies to load, figures out the right order in which to call the functions that define the modules,\n    then calls the module definition functions once the dependencies for those functions have been called. \n    \n翻译过来是：\n\n    RequireJS通过head.appendChild()将每一个依赖加载为一个script标签。\n    \n    等到所有的依赖都加载完成之后，RequireJS计算出模块定义函数的调用顺序。\n    \n    一旦依赖这些功能的地方被调用时requiredjs会调用这些功能的模块定义。\n    \n  \n**requirejs是怎么做到模块化的？** \n   \nrequirejs有个loader来保存和监听所有依赖的状态。script标签来加载这些文件，加载成功和失败都会更新依赖的状态。\n\n*是否有重复引用?*\n\nRequirejs是单例的设计，只要同名的被引入过一次（这里的同名相当于amd define的id）就一直是用这个模块的定义。\n\n为了避免全局污染，遵循AMD的规范，define和export。\n\n理想状况下，每个加载的脚本都是通过define()来定义的一个模块；\n\n但有些\"浏览器全局变量注入\"型的传统/遗留库并没有使用define()来定义它们的依赖关系，就必须为此使用shim config来指明它们的依赖关系。 \n\n\n\n\n\n\n\n    \n","slug":"requirejs-的运行机制","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ts00238a6byxewsk9r"},{"title":"node下如何调试","date":"2015-07-18T16:14:39.000Z","_content":"目前遇到的场景，直接在webstorm上打断点，然后shift+ctrl+D, 就可以调试了。\n\n后面遇到更复杂的场景再继续研究。\n","source":"_posts/node下如何调试.md","raw":"title: \"node下如何调试\"\ndate: 2015-07-19 00:14:39\ntags: [JavaScript]\n---\n目前遇到的场景，直接在webstorm上打断点，然后shift+ctrl+D, 就可以调试了。\n\n后面遇到更复杂的场景再继续研究。\n","slug":"node下如何调试","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tu00258a6b2y36tk4o"},{"title":"nodejs入门文章读后感","date":"2015-07-17T02:38:43.000Z","_content":"\n[Node入门](http://www.nodebeginner.org/index-zh-cn.html)\n\n很久前就把它加入了手机的书签栏，然后陆陆续续利用吃饭排队的事件看完的。\n\n文章是翻译的，写得很清晰易懂，node细节的我就不说了，因为也不是完全懂，就谈谈读后感。\n\nnodejs很早就听过，也很早就去看过一些介绍的文章、入门的文章，快速搭建的文章，在JS权威指南里也有关于nodejs的介绍。\n\n为什么这次看的这篇文章和以前看的感觉就不一样呢？\n\n我仔细地想了下。\n\n**因为那时我还不知道JS是单线程的，是基于事件驱动的**\n\n没有这样的一层基础去看node(注意是【看】 不是【学习】)，根本理解不了，只能是别人说什么是什么，然后转天就忘了。\n\n**在学习的路上，我们看了很多东西。**\n\n有些让你豁然开朗，有些让你越看越迷糊。豁然开朗的就很有兴趣地看下去，越看越迷糊的就被搁浅了，而搁浅的时间以年为单位。\n\n看完文章，我想到之前ES6中的一个generator概念还是不清楚，或许现在可以更好地理解了。\n\n * 事件轮询\n * 非阻塞的实现机制\n * generator\n\n\n\n\n\n\n\n\n","source":"_posts/nodejs入门文章读后感.md","raw":"title: \"nodejs入门文章读后感\"\ndate: 2015-07-17 10:38:43\ntags: [JavaScript]\n---\n\n[Node入门](http://www.nodebeginner.org/index-zh-cn.html)\n\n很久前就把它加入了手机的书签栏，然后陆陆续续利用吃饭排队的事件看完的。\n\n文章是翻译的，写得很清晰易懂，node细节的我就不说了，因为也不是完全懂，就谈谈读后感。\n\nnodejs很早就听过，也很早就去看过一些介绍的文章、入门的文章，快速搭建的文章，在JS权威指南里也有关于nodejs的介绍。\n\n为什么这次看的这篇文章和以前看的感觉就不一样呢？\n\n我仔细地想了下。\n\n**因为那时我还不知道JS是单线程的，是基于事件驱动的**\n\n没有这样的一层基础去看node(注意是【看】 不是【学习】)，根本理解不了，只能是别人说什么是什么，然后转天就忘了。\n\n**在学习的路上，我们看了很多东西。**\n\n有些让你豁然开朗，有些让你越看越迷糊。豁然开朗的就很有兴趣地看下去，越看越迷糊的就被搁浅了，而搁浅的时间以年为单位。\n\n看完文章，我想到之前ES6中的一个generator概念还是不清楚，或许现在可以更好地理解了。\n\n * 事件轮询\n * 非阻塞的实现机制\n * generator\n\n\n\n\n\n\n\n\n","slug":"nodejs入门文章读后感","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1tw00278a6bh2m7sgnq"},{"title":"node 应用绑定80端口","date":"2015-09-30T05:20:41.000Z","_content":"\nnode 应用绑定80端口，启动时需要管理员权限。\n","source":"_posts/node-应用绑定80端口.md","raw":"title: \"node 应用绑定80端口\"\ndate: 2015-09-30 13:20:41\ntags: [node]\n---\n\nnode 应用绑定80端口，启动时需要管理员权限。\n","slug":"node-应用绑定80端口","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ty00298a6bqjjvu2xl"},{"title":"markdown语法总忘","date":"2015-07-06T09:48:26.000Z","_content":"\nmarkdown语法总忘,看来必须copy点什么。StackEdit\n\n\nWelcome to StackEdit!\n===================\n\n\nHey! I'm your first Markdown document in **StackEdit**[^stackedit]. Don't delete me, I'm very helpful! I can be recovered anyway in the **Utils** tab of the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n----------\n\n\nDocuments\n-------------\n\nStackEdit stores your documents in your browser, which means all your documents are automatically saved locally and are accessible **offline!**\n\n> **Note:**\n\n> - StackEdit is accessible offline after the application has been loaded for the first time.\n> - Your local documents are not shared between different browsers or computers.\n> - Clearing your browser's data may **delete all your local documents!** Make sure your documents are synchronized with **Google Drive** or **Dropbox** (check out the [<i class=\"icon-refresh\"></i> Synchronization](#synchronization) section).\n\n#### <i class=\"icon-file\"></i> Create a document\n\nThe document panel is accessible using the <i class=\"icon-folder-open\"></i> button in the navigation bar. You can create a new document by clicking <i class=\"icon-file\"></i> **New document** in the document panel.\n\n#### <i class=\"icon-folder-open\"></i> Switch to another document\n\nAll your local documents are listed in the document panel. You can switch from one to another by clicking a document in the list or you can toggle documents using <kbd>Ctrl+[</kbd> and <kbd>Ctrl+]</kbd>.\n\n#### <i class=\"icon-pencil\"></i> Rename a document\n\nYou can rename the current document by clicking the document title in the navigation bar.\n\n#### <i class=\"icon-trash\"></i> Delete a document\n\nYou can delete the current document by clicking <i class=\"icon-trash\"></i> **Delete document** in the document panel.\n\n#### <i class=\"icon-hdd\"></i> Export a document\n\nYou can save the current document to a file by clicking <i class=\"icon-hdd\"></i> **Export to disk** from the <i class=\"icon-provider-stackedit\"></i> menu panel.\n\n> **Tip:** Check out the [<i class=\"icon-upload\"></i> Publish a document](#publish-a-document) section for a description of the different output formats.\n\n\n----------\n\n\nSynchronization\n-------------------\n\nStackEdit can be combined with <i class=\"icon-provider-gdrive\"></i> **Google Drive** and <i class=\"icon-provider-dropbox\"></i> **Dropbox** to have your documents saved in the *Cloud*. The synchronization mechanism takes care of uploading your modifications or downloading the latest version of your documents.\n\n> **Note:**\n\n> - Full access to **Google Drive** or **Dropbox** is required to be able to import any document in StackEdit. Permission restrictions can be configured in the settings.\n> - Imported documents are downloaded in your browser and are not transmitted to a server.\n> - If you experience problems saving your documents on Google Drive, check and optionally disable browser extensions, such as Disconnect.\n\n#### <i class=\"icon-refresh\"></i> Open a document\n\nYou can open a document from <i class=\"icon-provider-gdrive\"></i> **Google Drive** or the <i class=\"icon-provider-dropbox\"></i> **Dropbox** by opening the <i class=\"icon-refresh\"></i> **Synchronize** sub-menu and by clicking **Open from...**. Once opened, any modification in your document will be automatically synchronized with the file in your **Google Drive** / **Dropbox** account.\n\n#### <i class=\"icon-refresh\"></i> Save a document\n\nYou can save any document by opening the <i class=\"icon-refresh\"></i> **Synchronize** sub-menu and by clicking **Save on...**. Even if your document is already synchronized with **Google Drive** or **Dropbox**, you can export it to a another location. StackEdit can synchronize one document with multiple locations and accounts.\n\n#### <i class=\"icon-refresh\"></i> Synchronize a document\n\nOnce your document is linked to a <i class=\"icon-provider-gdrive\"></i> **Google Drive** or a <i class=\"icon-provider-dropbox\"></i> **Dropbox** file, StackEdit will periodically (every 3 minutes) synchronize it by downloading/uploading any modification. A merge will be performed if necessary and conflicts will be detected.\n\nIf you just have modified your document and you want to force the synchronization, click the <i class=\"icon-refresh\"></i> button in the navigation bar.\n\n> **Note:** The <i class=\"icon-refresh\"></i> button is disabled when you have no document to synchronize.\n\n#### <i class=\"icon-refresh\"></i> Manage document synchronization\n\nSince one document can be synchronized with multiple locations, you can list and manage synchronized locations by clicking <i class=\"icon-refresh\"></i> **Manage synchronization** in the <i class=\"icon-refresh\"></i> **Synchronize** sub-menu. This will let you remove synchronization locations that are associated to your document.\n\n> **Note:** If you delete the file from **Google Drive** or from **Dropbox**, the document will no longer be synchronized with that location.\n\n----------\n\n\nPublication\n-------------\n\nOnce you are happy with your document, you can publish it on different websites directly from StackEdit. As for now, StackEdit can publish on **Blogger**, **Dropbox**, **Gist**, **GitHub**, **Google Drive**, **Tumblr**, **WordPress** and on any SSH server.\n\n#### <i class=\"icon-upload\"></i> Publish a document\n\nYou can publish your document by opening the <i class=\"icon-upload\"></i> **Publish** sub-menu and by choosing a website. In the dialog box, you can choose the publication format:\n\n- Markdown, to publish the Markdown text on a website that can interpret it (**GitHub** for instance),\n- HTML, to publish the document converted into HTML (on a blog for example),\n- Template, to have a full control of the output.\n\n> **Note:** The default template is a simple webpage wrapping your document in HTML format. You can customize it in the **Advanced** tab of the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n#### <i class=\"icon-upload\"></i> Update a publication\n\nAfter publishing, StackEdit will keep your document linked to that publication which makes it easy for you to update it. Once you have modified your document and you want to update your publication, click on the <i class=\"icon-upload\"></i> button in the navigation bar.\n\n> **Note:** The <i class=\"icon-upload\"></i> button is disabled when your document has not been published yet.\n\n#### <i class=\"icon-upload\"></i> Manage document publication\n\nSince one document can be published on multiple locations, you can list and manage publish locations by clicking <i class=\"icon-upload\"></i> **Manage publication** in the <i class=\"icon-provider-stackedit\"></i> menu panel. This will let you remove publication locations that are associated to your document.\n\n> **Note:** If the file has been removed from the website or the blog, the document will no longer be published on that location.\n\n----------\n\n\nMarkdown Extra\n--------------------\n\nStackEdit supports **Markdown Extra**, which extends **Markdown** syntax with some nice features.\n\n> **Tip:** You can disable any **Markdown Extra** feature in the **Extensions** tab of the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n> **Note:** You can find more information about **Markdown** syntax [here][2] and **Markdown Extra** extension [here][3].\n\n\n### Tables\n\n**Markdown Extra** has a special syntax for tables:\n\nItem     | Value\n-------- | ---\nComputer | $1600\nPhone    | $12\nPipe     | $1\n\nYou can specify column alignment with one or two colons:\n\n| Item     | Value | Qty   |\n| :------- | ----: | :---: |\n| Computer | $1600 |  5    |\n| Phone    | $12   |  12   |\n| Pipe     | $1    |  234  |\n\n\n### Definition Lists\n\n**Markdown Extra** has a special syntax for definition lists too:\n\nTerm 1\nTerm 2\n:   Definition A\n:   Definition B\n\nTerm 3\n\n:   Definition C\n\n:   Definition D\n\n\t> part of definition D\n\n\n### Fenced code blocks\n\nGitHub's fenced code blocks are also supported with **Highlight.js** syntax highlighting:\n\n```\n// Foo\nvar bar = 0;\n```\n\n> **Tip:** To use **Prettify** instead of **Highlight.js**, just configure the **Markdown Extra** extension in the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n> **Note:** You can find more information:\n\n> - about **Prettify** syntax highlighting [here][5],\n> - about **Highlight.js** syntax highlighting [here][6].\n\n\n### Footnotes\n\nYou can create footnotes like this[^footnote].\n\n  [^footnote]: Here is the *text* of the **footnote**.\n\n\n### SmartyPants\n\nSmartyPants converts ASCII punctuation characters into \"smart\" typographic punctuation HTML entities. For example:\n\n|                  | ASCII                        | HTML              |\n ----------------- | ---------------------------- | ------------------\n| Single backticks | `'Isn't this fun?'`            | 'Isn't this fun?' |\n| Quotes           | `\"Isn't this fun?\"`            | \"Isn't this fun?\" |\n| Dashes           | `-- is en-dash, --- is em-dash` | -- is en-dash, --- is em-dash |\n\n\n### Table of contents\n\nYou can insert a table of contents using the marker `[TOC]`:\n\n[TOC]\n\n\n### MathJax\n\nYou can render *LaTeX* mathematical expressions using **MathJax**, as on [math.stackexchange.com][1]:\n\nThe *Gamma function* satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral\n\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n$$\n\n> **Tip:** To make sure mathematical expressions are rendered properly on your website, include **MathJax** into your template:\n\n```\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n```\n\n> **Note:** You can find more information about **LaTeX** mathematical expressions [here][4].\n\n\n### UML diagrams\n\nYou can also render sequence diagrams like this:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\nAnd flow charts like this:\n\n```flow\nst=>start: Start\ne=>end\nop=>operation: My Operation\ncond=>condition: Yes or No?\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n> **Note:** You can find more information:\n\n> - about **Sequence diagrams** syntax [here][7],\n> - about **Flow charts** syntax [here][8].\n\n### Support StackEdit\n\n[![](https://cdn.monetizejs.com/resources/button-32.png)](https://monetizejs.com/authorize?client_id=ESTHdCYOi18iLhhO&summary=true)\n\n  [^stackedit]: [StackEdit](https://stackedit.io/) is a full-featured, open-source Markdown editor based on PageDown, the Markdown library used by Stack Overflow and the other Stack Exchange sites.\n\n\n  [1]: http://math.stackexchange.com/\n  [2]: http://daringfireball.net/projects/markdown/syntax \"Markdown\"\n  [3]: https://github.com/jmcmanus/pagedown-extra \"Pagedown Extra\"\n  [4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n  [5]: https://code.google.com/p/google-code-prettify/\n  [6]: http://highlightjs.org/\n  [7]: http://bramp.github.io/js-sequence-diagrams/\n  [8]: http://adrai.github.io/flowchart.js/\n","source":"_posts/markdown语法总忘.md","raw":"title: \"markdown语法总忘\"\ndate: 2015-07-06 17:48:26\ntags: [markdown]\n---\n\nmarkdown语法总忘,看来必须copy点什么。StackEdit\n\n\nWelcome to StackEdit!\n===================\n\n\nHey! I'm your first Markdown document in **StackEdit**[^stackedit]. Don't delete me, I'm very helpful! I can be recovered anyway in the **Utils** tab of the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n----------\n\n\nDocuments\n-------------\n\nStackEdit stores your documents in your browser, which means all your documents are automatically saved locally and are accessible **offline!**\n\n> **Note:**\n\n> - StackEdit is accessible offline after the application has been loaded for the first time.\n> - Your local documents are not shared between different browsers or computers.\n> - Clearing your browser's data may **delete all your local documents!** Make sure your documents are synchronized with **Google Drive** or **Dropbox** (check out the [<i class=\"icon-refresh\"></i> Synchronization](#synchronization) section).\n\n#### <i class=\"icon-file\"></i> Create a document\n\nThe document panel is accessible using the <i class=\"icon-folder-open\"></i> button in the navigation bar. You can create a new document by clicking <i class=\"icon-file\"></i> **New document** in the document panel.\n\n#### <i class=\"icon-folder-open\"></i> Switch to another document\n\nAll your local documents are listed in the document panel. You can switch from one to another by clicking a document in the list or you can toggle documents using <kbd>Ctrl+[</kbd> and <kbd>Ctrl+]</kbd>.\n\n#### <i class=\"icon-pencil\"></i> Rename a document\n\nYou can rename the current document by clicking the document title in the navigation bar.\n\n#### <i class=\"icon-trash\"></i> Delete a document\n\nYou can delete the current document by clicking <i class=\"icon-trash\"></i> **Delete document** in the document panel.\n\n#### <i class=\"icon-hdd\"></i> Export a document\n\nYou can save the current document to a file by clicking <i class=\"icon-hdd\"></i> **Export to disk** from the <i class=\"icon-provider-stackedit\"></i> menu panel.\n\n> **Tip:** Check out the [<i class=\"icon-upload\"></i> Publish a document](#publish-a-document) section for a description of the different output formats.\n\n\n----------\n\n\nSynchronization\n-------------------\n\nStackEdit can be combined with <i class=\"icon-provider-gdrive\"></i> **Google Drive** and <i class=\"icon-provider-dropbox\"></i> **Dropbox** to have your documents saved in the *Cloud*. The synchronization mechanism takes care of uploading your modifications or downloading the latest version of your documents.\n\n> **Note:**\n\n> - Full access to **Google Drive** or **Dropbox** is required to be able to import any document in StackEdit. Permission restrictions can be configured in the settings.\n> - Imported documents are downloaded in your browser and are not transmitted to a server.\n> - If you experience problems saving your documents on Google Drive, check and optionally disable browser extensions, such as Disconnect.\n\n#### <i class=\"icon-refresh\"></i> Open a document\n\nYou can open a document from <i class=\"icon-provider-gdrive\"></i> **Google Drive** or the <i class=\"icon-provider-dropbox\"></i> **Dropbox** by opening the <i class=\"icon-refresh\"></i> **Synchronize** sub-menu and by clicking **Open from...**. Once opened, any modification in your document will be automatically synchronized with the file in your **Google Drive** / **Dropbox** account.\n\n#### <i class=\"icon-refresh\"></i> Save a document\n\nYou can save any document by opening the <i class=\"icon-refresh\"></i> **Synchronize** sub-menu and by clicking **Save on...**. Even if your document is already synchronized with **Google Drive** or **Dropbox**, you can export it to a another location. StackEdit can synchronize one document with multiple locations and accounts.\n\n#### <i class=\"icon-refresh\"></i> Synchronize a document\n\nOnce your document is linked to a <i class=\"icon-provider-gdrive\"></i> **Google Drive** or a <i class=\"icon-provider-dropbox\"></i> **Dropbox** file, StackEdit will periodically (every 3 minutes) synchronize it by downloading/uploading any modification. A merge will be performed if necessary and conflicts will be detected.\n\nIf you just have modified your document and you want to force the synchronization, click the <i class=\"icon-refresh\"></i> button in the navigation bar.\n\n> **Note:** The <i class=\"icon-refresh\"></i> button is disabled when you have no document to synchronize.\n\n#### <i class=\"icon-refresh\"></i> Manage document synchronization\n\nSince one document can be synchronized with multiple locations, you can list and manage synchronized locations by clicking <i class=\"icon-refresh\"></i> **Manage synchronization** in the <i class=\"icon-refresh\"></i> **Synchronize** sub-menu. This will let you remove synchronization locations that are associated to your document.\n\n> **Note:** If you delete the file from **Google Drive** or from **Dropbox**, the document will no longer be synchronized with that location.\n\n----------\n\n\nPublication\n-------------\n\nOnce you are happy with your document, you can publish it on different websites directly from StackEdit. As for now, StackEdit can publish on **Blogger**, **Dropbox**, **Gist**, **GitHub**, **Google Drive**, **Tumblr**, **WordPress** and on any SSH server.\n\n#### <i class=\"icon-upload\"></i> Publish a document\n\nYou can publish your document by opening the <i class=\"icon-upload\"></i> **Publish** sub-menu and by choosing a website. In the dialog box, you can choose the publication format:\n\n- Markdown, to publish the Markdown text on a website that can interpret it (**GitHub** for instance),\n- HTML, to publish the document converted into HTML (on a blog for example),\n- Template, to have a full control of the output.\n\n> **Note:** The default template is a simple webpage wrapping your document in HTML format. You can customize it in the **Advanced** tab of the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n#### <i class=\"icon-upload\"></i> Update a publication\n\nAfter publishing, StackEdit will keep your document linked to that publication which makes it easy for you to update it. Once you have modified your document and you want to update your publication, click on the <i class=\"icon-upload\"></i> button in the navigation bar.\n\n> **Note:** The <i class=\"icon-upload\"></i> button is disabled when your document has not been published yet.\n\n#### <i class=\"icon-upload\"></i> Manage document publication\n\nSince one document can be published on multiple locations, you can list and manage publish locations by clicking <i class=\"icon-upload\"></i> **Manage publication** in the <i class=\"icon-provider-stackedit\"></i> menu panel. This will let you remove publication locations that are associated to your document.\n\n> **Note:** If the file has been removed from the website or the blog, the document will no longer be published on that location.\n\n----------\n\n\nMarkdown Extra\n--------------------\n\nStackEdit supports **Markdown Extra**, which extends **Markdown** syntax with some nice features.\n\n> **Tip:** You can disable any **Markdown Extra** feature in the **Extensions** tab of the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n> **Note:** You can find more information about **Markdown** syntax [here][2] and **Markdown Extra** extension [here][3].\n\n\n### Tables\n\n**Markdown Extra** has a special syntax for tables:\n\nItem     | Value\n-------- | ---\nComputer | $1600\nPhone    | $12\nPipe     | $1\n\nYou can specify column alignment with one or two colons:\n\n| Item     | Value | Qty   |\n| :------- | ----: | :---: |\n| Computer | $1600 |  5    |\n| Phone    | $12   |  12   |\n| Pipe     | $1    |  234  |\n\n\n### Definition Lists\n\n**Markdown Extra** has a special syntax for definition lists too:\n\nTerm 1\nTerm 2\n:   Definition A\n:   Definition B\n\nTerm 3\n\n:   Definition C\n\n:   Definition D\n\n\t> part of definition D\n\n\n### Fenced code blocks\n\nGitHub's fenced code blocks are also supported with **Highlight.js** syntax highlighting:\n\n```\n// Foo\nvar bar = 0;\n```\n\n> **Tip:** To use **Prettify** instead of **Highlight.js**, just configure the **Markdown Extra** extension in the <i class=\"icon-cog\"></i> **Settings** dialog.\n\n> **Note:** You can find more information:\n\n> - about **Prettify** syntax highlighting [here][5],\n> - about **Highlight.js** syntax highlighting [here][6].\n\n\n### Footnotes\n\nYou can create footnotes like this[^footnote].\n\n  [^footnote]: Here is the *text* of the **footnote**.\n\n\n### SmartyPants\n\nSmartyPants converts ASCII punctuation characters into \"smart\" typographic punctuation HTML entities. For example:\n\n|                  | ASCII                        | HTML              |\n ----------------- | ---------------------------- | ------------------\n| Single backticks | `'Isn't this fun?'`            | 'Isn't this fun?' |\n| Quotes           | `\"Isn't this fun?\"`            | \"Isn't this fun?\" |\n| Dashes           | `-- is en-dash, --- is em-dash` | -- is en-dash, --- is em-dash |\n\n\n### Table of contents\n\nYou can insert a table of contents using the marker `[TOC]`:\n\n[TOC]\n\n\n### MathJax\n\nYou can render *LaTeX* mathematical expressions using **MathJax**, as on [math.stackexchange.com][1]:\n\nThe *Gamma function* satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral\n\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n$$\n\n> **Tip:** To make sure mathematical expressions are rendered properly on your website, include **MathJax** into your template:\n\n```\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n```\n\n> **Note:** You can find more information about **LaTeX** mathematical expressions [here][4].\n\n\n### UML diagrams\n\nYou can also render sequence diagrams like this:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\nAnd flow charts like this:\n\n```flow\nst=>start: Start\ne=>end\nop=>operation: My Operation\ncond=>condition: Yes or No?\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n> **Note:** You can find more information:\n\n> - about **Sequence diagrams** syntax [here][7],\n> - about **Flow charts** syntax [here][8].\n\n### Support StackEdit\n\n[![](https://cdn.monetizejs.com/resources/button-32.png)](https://monetizejs.com/authorize?client_id=ESTHdCYOi18iLhhO&summary=true)\n\n  [^stackedit]: [StackEdit](https://stackedit.io/) is a full-featured, open-source Markdown editor based on PageDown, the Markdown library used by Stack Overflow and the other Stack Exchange sites.\n\n\n  [1]: http://math.stackexchange.com/\n  [2]: http://daringfireball.net/projects/markdown/syntax \"Markdown\"\n  [3]: https://github.com/jmcmanus/pagedown-extra \"Pagedown Extra\"\n  [4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n  [5]: https://code.google.com/p/google-code-prettify/\n  [6]: http://highlightjs.org/\n  [7]: http://bramp.github.io/js-sequence-diagrams/\n  [8]: http://adrai.github.io/flowchart.js/\n","slug":"markdown语法总忘","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1u0002c8a6buj6e0v4o"},{"title":"mac调出adb shell","date":"2015-07-07T13:30:01.000Z","_content":"\n已安装了android studio， 但在mac的命令行输入adb，提示-bash: adb: command not found\n\n解决办法：\n\n1. 首先找到你的android sdk目录。比如我的目录是在 /Users/Alice/Library/Android/sdk\n2. 终端切换至sdk目录下的platform-tools中，adb就在这个目录中。输入pwd命令，拷贝这个目录路径XXXX。\n3. 然后输入下面两个命令\n    \n        touch .bash_profile\n        open -e .bash_profile\n4. 如果打开的文档里面已经有内容,我们只要之后添加;XXXX(注意前面一定要用分号隔开)，\n   如果是一个空白文档的话，我们就输入以下内容,然后保存。\n\n        export PATH=${PATH}:/Users/Alice/Library/Android/sdk/platform-tools    \n   \n5. 更新一下这个文件：\n    \n        source .bash_profile\n    \n6. 之后再输入adb,应该就不会提示adb: command not found了。        \n   \n   \n","source":"_posts/mac 调出adb shell.md","raw":"title: \"mac调出adb shell\"\ndate: 2015-07-07 21:30:01\ntags: [mac, Android]\n---\n\n已安装了android studio， 但在mac的命令行输入adb，提示-bash: adb: command not found\n\n解决办法：\n\n1. 首先找到你的android sdk目录。比如我的目录是在 /Users/Alice/Library/Android/sdk\n2. 终端切换至sdk目录下的platform-tools中，adb就在这个目录中。输入pwd命令，拷贝这个目录路径XXXX。\n3. 然后输入下面两个命令\n    \n        touch .bash_profile\n        open -e .bash_profile\n4. 如果打开的文档里面已经有内容,我们只要之后添加;XXXX(注意前面一定要用分号隔开)，\n   如果是一个空白文档的话，我们就输入以下内容,然后保存。\n\n        export PATH=${PATH}:/Users/Alice/Library/Android/sdk/platform-tools    \n   \n5. 更新一下这个文件：\n    \n        source .bash_profile\n    \n6. 之后再输入adb,应该就不会提示adb: command not found了。        \n   \n   \n","slug":"mac 调出adb shell","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1u2002f8a6bktgm2p6h"},{"title":"git stash 前缓存当前的修改","date":"2015-08-20T10:00:29.000Z","_content":"\n##场景\n\n本地有修改，暂时不想commit，但又必须git pull 拉去最新的代码。这时可以用git stash来缓存当前的修改。\n\n##步骤\n\n1 先缓存当前修改。\n    \n    git stash\n    \n2 拉取最新的代码\n\n    git pull\n    \n3 拉完最新的之后再恢复之前修改\n    \n    git stash pop\n    \n##更多\n\ngit stash save \"work in progress for foo feature\"\n\n当你多次使用 **git stash**命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，\n\n**git stash list**命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，\n\n例如使用 **git stash apply stash@{1}**就可以将你指定版本号为stash@{1}的工作取出来，\n\n当你将所有的栈都应用回来的时候，可以使用 **git stash clear**来将栈清空。\n    \n##参考\n    \n  [git stash和git stash pop](http://blog.csdn.net/wh_19910525/article/details/7784901)","source":"_posts/git-stash-缓存当前的修改.md","raw":"title: \"git stash 前缓存当前的修改\"\ndate: 2015-08-20 18:00:29\ntags: [工具, git]\n---\n\n##场景\n\n本地有修改，暂时不想commit，但又必须git pull 拉去最新的代码。这时可以用git stash来缓存当前的修改。\n\n##步骤\n\n1 先缓存当前修改。\n    \n    git stash\n    \n2 拉取最新的代码\n\n    git pull\n    \n3 拉完最新的之后再恢复之前修改\n    \n    git stash pop\n    \n##更多\n\ngit stash save \"work in progress for foo feature\"\n\n当你多次使用 **git stash**命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，\n\n**git stash list**命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，\n\n例如使用 **git stash apply stash@{1}**就可以将你指定版本号为stash@{1}的工作取出来，\n\n当你将所有的栈都应用回来的时候，可以使用 **git stash clear**来将栈清空。\n    \n##参考\n    \n  [git stash和git stash pop](http://blog.csdn.net/wh_19910525/article/details/7784901)","slug":"git-stash-缓存当前的修改","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1u4002i8a6bwwbtghej"},{"title":"git modified:xxx(modified content,untracked content,commit content)","date":"2015-12-27T13:58:00.000Z","_content":"\ngit add 或者commit,push的时候发现某个文件夹不能被add,commit,提示当前文件夹 modified:xxx(modified content)\n\n去git远程仓库查看,这个目录是空的.\n\n打开本地仓库的目录,发现xxx目录下有个.git的目录,影响了其父目录的trace.\n\n解决办法:删除.git目录,重新提交\n","source":"_posts/git-modified-xxx-modified-content-untracked-content-commit-content.md","raw":"title: \"git modified:xxx(modified content,untracked content,commit content)\"\ndate: 2015-12-27 21:58:00\ntags: [git]\n---\n\ngit add 或者commit,push的时候发现某个文件夹不能被add,commit,提示当前文件夹 modified:xxx(modified content)\n\n去git远程仓库查看,这个目录是空的.\n\n打开本地仓库的目录,发现xxx目录下有个.git的目录,影响了其父目录的trace.\n\n解决办法:删除.git目录,重新提交\n","slug":"git-modified-xxx-modified-content-untracked-content-commit-content","published":1,"updated":"2015-12-27T14:01:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1u7002m8a6bzadrukdl"},{"title":"git ignore 无效?","date":"2015-07-14T02:23:49.000Z","_content":"\n有一些build文件总是自动生成，为了不想每次提交都更新到仓库里，可以在git的.gitignore文件中设置，忽略这些文件。\n\n但是。\n\n有的时候ignore失效，即使添加了忽略然并卵，为什么呢？\n\n因为在git库中已存在了这些build文件，只要之前push过，这些文件都会加入git的跟踪中。\n\n而.gitignore文件只对还没有加入跟踪的文件起作用。\n\n那么解决办法就很明显了，两个字，删掉！\n\n把原来在仓库里的文件删掉，重新和更新过的.gitignore文件一起提交。\n\n之后ignore文件就生效了。\n\n","source":"_posts/git .ignore无效?.md","raw":"title: \"git ignore 无效?\"\ndate: 2015-07-14 10:23:49\ntags: [git]\n---\n\n有一些build文件总是自动生成，为了不想每次提交都更新到仓库里，可以在git的.gitignore文件中设置，忽略这些文件。\n\n但是。\n\n有的时候ignore失效，即使添加了忽略然并卵，为什么呢？\n\n因为在git库中已存在了这些build文件，只要之前push过，这些文件都会加入git的跟踪中。\n\n而.gitignore文件只对还没有加入跟踪的文件起作用。\n\n那么解决办法就很明显了，两个字，删掉！\n\n把原来在仓库里的文件删掉，重新和更新过的.gitignore文件一起提交。\n\n之后ignore文件就生效了。\n\n","slug":"git .ignore无效?","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1u9002o8a6bdtr019ts"},{"title":"currentColor关键字","date":"2015-06-30T05:31:24.000Z","_content":"\n与其说这是一个css的关键字，但其实说是个变量更好理解一点。\n\ncurrentColor 代表了当前元素被应用的color颜色值。使用它可以将当前这个颜色值应用到其他属性上，或者嵌套元素的其他属性上。\n\n如果当前元素没有显示地指定一个color值，那么它的颜色值从父级集成而来。\n\n\n使用了currentColor之后，css更好维护了，一改全改。\n\n\tdiv{\n\t\tcolor: #33; \n\t\tborder: 5px solid currentColor;\n\t\tbox-shadow: 0 0 5px solid currentColor;\n\t}\n\t\n除了IE8，PC和手机上的浏览器基本都支持这个关键字。\n","source":"_posts/currentColor关键字.md","raw":"title: \"currentColor关键字\"\ndate: 2015-06-30 13:31:24\ntags: [css]\n---\n\n与其说这是一个css的关键字，但其实说是个变量更好理解一点。\n\ncurrentColor 代表了当前元素被应用的color颜色值。使用它可以将当前这个颜色值应用到其他属性上，或者嵌套元素的其他属性上。\n\n如果当前元素没有显示地指定一个color值，那么它的颜色值从父级集成而来。\n\n\n使用了currentColor之后，css更好维护了，一改全改。\n\n\tdiv{\n\t\tcolor: #33; \n\t\tborder: 5px solid currentColor;\n\t\tbox-shadow: 0 0 5px solid currentColor;\n\t}\n\t\n除了IE8，PC和手机上的浏览器基本都支持这个关键字。\n","slug":"currentColor关键字","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ua002q8a6bsr8yojq1"},{"title":"box-sizing 是什么东西","date":"2015-07-14T01:59:02.000Z","_content":"\n昨天有人问我知道盒子模型么？那必须的呀。width,height,margin,padding,border这些的嘛。\n\n然后又问什么是box-sizing?好熟悉，但没概念了。\n\n在说盒子模型的时候，肯定会说IE对盒子模型的支持和其他浏览器不一样。它的width是包含了padding和border的。\n\nCSS3中新增box-sizing属性刚好可以解决这个问题，不用费心去算是否盒子模型不一致了。\n\n\n    box-sizing: content-box|border-box|inherit;\n    \nbox-sizing的属性值有两种，(inherit继承就不说了)\n\n + content-box：border 和 padding 不计入width和height （默认的）\n + border-box ：border 和 padding 计入width和height  （IE那种的）","source":"_posts/box-sizing是什么东西.md","raw":"title: \"box-sizing 是什么东西\"\ndate: 2015-07-14 09:59:02\ntags: [css]\n---\n\n昨天有人问我知道盒子模型么？那必须的呀。width,height,margin,padding,border这些的嘛。\n\n然后又问什么是box-sizing?好熟悉，但没概念了。\n\n在说盒子模型的时候，肯定会说IE对盒子模型的支持和其他浏览器不一样。它的width是包含了padding和border的。\n\nCSS3中新增box-sizing属性刚好可以解决这个问题，不用费心去算是否盒子模型不一致了。\n\n\n    box-sizing: content-box|border-box|inherit;\n    \nbox-sizing的属性值有两种，(inherit继承就不说了)\n\n + content-box：border 和 padding 不计入width和height （默认的）\n + border-box ：border 和 padding 计入width和height  （IE那种的）","slug":"box-sizing是什么东西","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1uc002t8a6b1oy8gri3"},{"title":"blink chromium webkit 是什么关系","date":"2015-07-19T14:06:01.000Z","_content":"\n转帖：[原文](http://blog.csdn.net/milado_nju/article/details/8805810)\n\nGoogle退出WebKit项目，创建自己的渲染引擎Blink。这其实不能说完全没有先兆，合合分分，纯属正常。\n\n其实，之前关于WebKit2，双方的争论就非常的大。Apple希望它可以随便加入和删除代码而无需担心它会破坏其它Ports的代码，这遭到很多人的反对和不满。\n\n同时，另一方面，Google有很多新的功能希望加入WebKit中，但是WebKit可能并不认可他们。双方分歧越来越多，终于分道扬镳。\n\n这里面有个误区，就是Google的Blink是一个全新的引擎。其实不是这样，Blink目前就是从WebKit直接复制出一个版本出来，然后将与chromium无关的Ports全部移除掉，将代码结构重新整理，就目前而言，Blink的渲染和WebKit是一样，但是，以后两者将各自走不同的路。这有点类似于之前WebKit从KHTML中复制出来一样，历史总是惊人的相似。\n\n目前参与Blink和Chromium大致一样，拥有Chromium的commit权限对Blink也适用。原来一些WebKit的committer和reviewer也开始成为blink的committer。它的提交代码流程，review流程等都是chromium的风格，这对chromium的开发者来说非常熟悉。\n\n","source":"_posts/blink-chromium-webkit-是什么关系.md","raw":"title: \"blink chromium webkit 是什么关系\"\ndate: 2015-07-19 22:06:01\ntags: [工具]\n---\n\n转帖：[原文](http://blog.csdn.net/milado_nju/article/details/8805810)\n\nGoogle退出WebKit项目，创建自己的渲染引擎Blink。这其实不能说完全没有先兆，合合分分，纯属正常。\n\n其实，之前关于WebKit2，双方的争论就非常的大。Apple希望它可以随便加入和删除代码而无需担心它会破坏其它Ports的代码，这遭到很多人的反对和不满。\n\n同时，另一方面，Google有很多新的功能希望加入WebKit中，但是WebKit可能并不认可他们。双方分歧越来越多，终于分道扬镳。\n\n这里面有个误区，就是Google的Blink是一个全新的引擎。其实不是这样，Blink目前就是从WebKit直接复制出一个版本出来，然后将与chromium无关的Ports全部移除掉，将代码结构重新整理，就目前而言，Blink的渲染和WebKit是一样，但是，以后两者将各自走不同的路。这有点类似于之前WebKit从KHTML中复制出来一样，历史总是惊人的相似。\n\n目前参与Blink和Chromium大致一样，拥有Chromium的commit权限对Blink也适用。原来一些WebKit的committer和reviewer也开始成为blink的committer。它的提交代码流程，review流程等都是chromium的风格，这对chromium的开发者来说非常熟悉。\n\n","slug":"blink-chromium-webkit-是什么关系","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ud002v8a6bb95ifnne"},{"title":"backbone的事件机制","date":"2015-07-16T03:54:57.000Z","_content":"\n因为最近在做事件绑定的时候总是出现一些问题，看来有必要去研究下了。\n先占个坑，以后再填。\n\n","source":"_posts/backbone的事件机制.md","raw":"title: \"backbone的事件机制\"\ndate: 2015-07-16 11:54:57\ntags: [JavaScript]\n---\n\n因为最近在做事件绑定的时候总是出现一些问题，看来有必要去研究下了。\n先占个坑，以后再填。\n\n","slug":"backbone的事件机制","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ud002x8a6bbgdtlawo"},{"title":"UnsatisfiedLinkError","date":"2015-08-17T12:22:37.000Z","_content":"\n这两天被这个异常搞死了：\n\n    java.lang.UnsatisfiedLinkError:dlopen failed: “**/*/arm/*.so” has unexpected e_machine: 3\n    \n**原因是一个在x86机器编译的so文件放到了arm机器上。**\n\napk安装时，系统把armeabi下的so动态库都放入应用的私有目录中了。\n但这个so不是arm的，而是x86编译的。\n所以运行时，系统检察ELF文件中的e_machine字段的值，跟arm的不匹配，就会抛出这个异常了！\n\n参考资料:[精神哥讲Crash（一）：UnsatisfiedLinkError](http://bugly.qq.com/blog/?p=34)","source":"_posts/UnsatisfiedLinkError.md","raw":"title: \"UnsatisfiedLinkError\"\ndate: 2015-08-17 20:22:37\ntags: [Android,异常]\n---\n\n这两天被这个异常搞死了：\n\n    java.lang.UnsatisfiedLinkError:dlopen failed: “**/*/arm/*.so” has unexpected e_machine: 3\n    \n**原因是一个在x86机器编译的so文件放到了arm机器上。**\n\napk安装时，系统把armeabi下的so动态库都放入应用的私有目录中了。\n但这个so不是arm的，而是x86编译的。\n所以运行时，系统检察ELF文件中的e_machine字段的值，跟arm的不匹配，就会抛出这个异常了！\n\n参考资料:[精神哥讲Crash（一）：UnsatisfiedLinkError](http://bugly.qq.com/blog/?p=34)","slug":"UnsatisfiedLinkError","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ue002z8a6bjwqqvmsi"},{"title":"React 学习 笔记 ","date":"2015-07-06T09:30:08.000Z","_content":"其实早就有听闻React很火了，但脑子里一直没有概念，于是花了一个小时去找了几篇相关介绍。\n\n其中知乎上的一篇翻译的文章[ReactJS 傻瓜教程](http://zhuanlan.zhihu.com/FrontendMagazine/19896745)\n\n然后就记住了两点。\n\n    1. React是组件化的，而且是仅仅View层面的，还需要配合其他MVC的框架。\n    2. React有自己的渲染方式，一种类似XML的，将Html和Javascript结合的叫JSX的东西。\n\n虽然这个时候还是不清楚什么是JSX，也对组件化的概念很模糊。\n\n于是就去React官网找了快速入门来看。有中文版当然还是看[中文版](http://reactjs.cn/react/docs/getting-started.html)。\n\n仅是看quick start这一篇，只记住了一点。\n\n    1.html分离，在单独的js文件中通过React.render来渲染html\n\n接着继续看下一篇[教程](http://reactjs.cn/react/docs/tutorial.html)。\n这个看起来就相当于更完整的一个例子了，实现评论+展示评论列表。\n\n教程里一步一步讲的很详细。到这里就稍微清晰一些之前的两个概念。\n\n    1.组件化\n    2.JSX\n\n不得不说，中文理解起来就是方便快捷。如果是英文，虽然能看懂单词但理解还是会有偏差。【英语不好的借口\n\n先理解下组件化。\n\nCommentBox组件中包括CommentList组件和CommentForm组件。而CommentList组件又循环渲染Comment组件。\n每个组件都是React Create出来的一个element,它们包含但不仅限于html。\n     \n        \n        var CommentBox = React.createClass({\n          render: function() {\n            return (\n              <div className=\"commentBox\">\n                <h1>Comments</h1>\n                <CommentList data={this.props.data} />\n                <CommentForm />\n              </div>\n            );\n          }\n        });\n数据的传递在自定义标签的属性中，所以这里又出现了一个新的名词props。但数据处理和渲染还是在自定义的组件中。\n        \n        var CommentList = React.createClass({\n          render: function() {\n            var commentNodes = this.props.data.map(function (comment) {\n              return (\n                <Comment author={comment.author}>\n                  {comment.text}\n                </Comment>\n              );\n            });\n            return (\n              <div className=\"commentList\">\n                {commentNodes}\n              </div>\n            );\n          }\n        }); \n   \n然后什么是JSX？\n   \n我们看到在进行Html渲染的时候，出现了很多自定义html标签，或者说是类xml的标签。\nReact里有一个简单的预编译器，用于将JSX这种语法糖转换成纯的JavaScript代码。作为语法糖，确实JSX 语句比纯 JavaScript 更加容易使用\n\n>>>\n   这个 div 标签不是真实的DOM节点；他们是 React div 组件的实例。\n\n这句话我不是很理解。明明在chrome运行的时候，审查元素能看到div，为什么说不是真实的DOM节点呢？","source":"_posts/React学习笔记.md","raw":"title: \"React 学习 笔记 \"\ndate: 2015-07-06 17:30:08\ntags: [React]\n---\n其实早就有听闻React很火了，但脑子里一直没有概念，于是花了一个小时去找了几篇相关介绍。\n\n其中知乎上的一篇翻译的文章[ReactJS 傻瓜教程](http://zhuanlan.zhihu.com/FrontendMagazine/19896745)\n\n然后就记住了两点。\n\n    1. React是组件化的，而且是仅仅View层面的，还需要配合其他MVC的框架。\n    2. React有自己的渲染方式，一种类似XML的，将Html和Javascript结合的叫JSX的东西。\n\n虽然这个时候还是不清楚什么是JSX，也对组件化的概念很模糊。\n\n于是就去React官网找了快速入门来看。有中文版当然还是看[中文版](http://reactjs.cn/react/docs/getting-started.html)。\n\n仅是看quick start这一篇，只记住了一点。\n\n    1.html分离，在单独的js文件中通过React.render来渲染html\n\n接着继续看下一篇[教程](http://reactjs.cn/react/docs/tutorial.html)。\n这个看起来就相当于更完整的一个例子了，实现评论+展示评论列表。\n\n教程里一步一步讲的很详细。到这里就稍微清晰一些之前的两个概念。\n\n    1.组件化\n    2.JSX\n\n不得不说，中文理解起来就是方便快捷。如果是英文，虽然能看懂单词但理解还是会有偏差。【英语不好的借口\n\n先理解下组件化。\n\nCommentBox组件中包括CommentList组件和CommentForm组件。而CommentList组件又循环渲染Comment组件。\n每个组件都是React Create出来的一个element,它们包含但不仅限于html。\n     \n        \n        var CommentBox = React.createClass({\n          render: function() {\n            return (\n              <div className=\"commentBox\">\n                <h1>Comments</h1>\n                <CommentList data={this.props.data} />\n                <CommentForm />\n              </div>\n            );\n          }\n        });\n数据的传递在自定义标签的属性中，所以这里又出现了一个新的名词props。但数据处理和渲染还是在自定义的组件中。\n        \n        var CommentList = React.createClass({\n          render: function() {\n            var commentNodes = this.props.data.map(function (comment) {\n              return (\n                <Comment author={comment.author}>\n                  {comment.text}\n                </Comment>\n              );\n            });\n            return (\n              <div className=\"commentList\">\n                {commentNodes}\n              </div>\n            );\n          }\n        }); \n   \n然后什么是JSX？\n   \n我们看到在进行Html渲染的时候，出现了很多自定义html标签，或者说是类xml的标签。\nReact里有一个简单的预编译器，用于将JSX这种语法糖转换成纯的JavaScript代码。作为语法糖，确实JSX 语句比纯 JavaScript 更加容易使用\n\n>>>\n   这个 div 标签不是真实的DOM节点；他们是 React div 组件的实例。\n\n这句话我不是很理解。明明在chrome运行的时候，审查元素能看到div，为什么说不是真实的DOM节点呢？","slug":"React学习笔记","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ug00338a6bpriysl8d"},{"title":"React Native Node 4.0","date":"2015-09-18T02:27:20.000Z","_content":"\n今天跑了下React Native的Hello World。 发现Node的版本必须在4.0+， 不然终端的8081服务起不来。\n","source":"_posts/React-Native-Node-4-0.md","raw":"title: \"React Native Node 4.0\"\ndate: 2015-09-18 10:27:20\ntags: [React]\n---\n\n今天跑了下React Native的Hello World。 发现Node的版本必须在4.0+， 不然终端的8081服务起不来。\n","slug":"React-Native-Node-4-0","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1uh00368a6bjfk7kch3"},{"title":"Node 5.0: Cannot find module ./lib","date":"2015-11-11T08:33:41.000Z","_content":"\n##问题描述(Issue)\n\n  it throws \"Cannot find module './lib'\" when I run \"npm install -g xxx\" command.\n  \n  Mac升级到node 5.0之后，执行npm install命令出现Cannot find module './lib'的错误。\n  \n  \n##问题原因（Cause）\n\n   The current theory is that a change made to the OS X installer for Node is causing two npm installations to be overlaid, which is understandably causing problems. \n\n\n##解决办法（Solution）\n\n   If you remove /usr/local/lib/node_modules/npm and rerun the Node 5.0 installer, you should be left with a working npm.\n   \n   移除 /usr/local/lib/node_modules/npm目录，重装node 5.0.\n  \n  \n##参考(Refer)    \n\n   [Error with install of npm 3 via Node.js v5](https://github.com/npm/npm/issues/10166)\n    ","source":"_posts/Node-5-0-Cannot-find-module-lib.md","raw":"title: \"Node 5.0: Cannot find module ./lib\"\ndate: 2015-11-11 16:33:41\ntags: [mac,node]\n---\n\n##问题描述(Issue)\n\n  it throws \"Cannot find module './lib'\" when I run \"npm install -g xxx\" command.\n  \n  Mac升级到node 5.0之后，执行npm install命令出现Cannot find module './lib'的错误。\n  \n  \n##问题原因（Cause）\n\n   The current theory is that a change made to the OS X installer for Node is causing two npm installations to be overlaid, which is understandably causing problems. \n\n\n##解决办法（Solution）\n\n   If you remove /usr/local/lib/node_modules/npm and rerun the Node 5.0 installer, you should be left with a working npm.\n   \n   移除 /usr/local/lib/node_modules/npm目录，重装node 5.0.\n  \n  \n##参考(Refer)    \n\n   [Error with install of npm 3 via Node.js v5](https://github.com/npm/npm/issues/10166)\n    ","slug":"Node-5-0-Cannot-find-module-lib","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1up00388a6bqia94byk"},{"title":"Nexus 7 解锁","date":"2015-09-07T03:50:46.000Z","_content":"\n##安卓设备解锁和不解锁有什么区别？\n\n手机加锁是因为在出厂时，厂商已经安装好了操作系统和预置应用，这些东西都装在手机ROM中。\n为了防止意外情况，比如不慎删除了系统重要应用导致系统不稳定甚至崩溃，因此厂商对ROM加了锁使你不能对系统文件做任何动作。\n这就影响了后续的root和刷机。所以在刷机前一般都要先解锁。\n\n##解锁过程\n\n  1. 下载解压[nexus_unlock](http://pan.baidu.com/share/link?shareid=3769076633&uk=3793975982)\n  \n  2. Nexus 7 USB连接电脑，打开开发者选项，然后关机。\n  \n  3. 再同时按住音量-键和电源键进入fastboot模式。\n  \n  4. 运行解锁.bat，nexus7中出现是否要解锁的界面，选择yes。\n  \n  5. 解锁完成后，再开机，可以看到google下面有个解开的锁，就表明解锁完成了。\n  \n##图片步骤\n\n  ![fastboot mode](/images/fastbootmode.jpg)\n  ![bootlock](/images/bootlock.jpg)\n  ![bootunlock](images/bootunlock.jpg)\n  \n  \n  \n  \n","source":"_posts/Nexus-7-解锁.md","raw":"title: \"Nexus 7 解锁\"\ndate: 2015-09-07 11:50:46\ntags: [Android, 工具]\n---\n\n##安卓设备解锁和不解锁有什么区别？\n\n手机加锁是因为在出厂时，厂商已经安装好了操作系统和预置应用，这些东西都装在手机ROM中。\n为了防止意外情况，比如不慎删除了系统重要应用导致系统不稳定甚至崩溃，因此厂商对ROM加了锁使你不能对系统文件做任何动作。\n这就影响了后续的root和刷机。所以在刷机前一般都要先解锁。\n\n##解锁过程\n\n  1. 下载解压[nexus_unlock](http://pan.baidu.com/share/link?shareid=3769076633&uk=3793975982)\n  \n  2. Nexus 7 USB连接电脑，打开开发者选项，然后关机。\n  \n  3. 再同时按住音量-键和电源键进入fastboot模式。\n  \n  4. 运行解锁.bat，nexus7中出现是否要解锁的界面，选择yes。\n  \n  5. 解锁完成后，再开机，可以看到google下面有个解开的锁，就表明解锁完成了。\n  \n##图片步骤\n\n  ![fastboot mode](/images/fastbootmode.jpg)\n  ![bootlock](/images/bootlock.jpg)\n  ![bootunlock](images/bootunlock.jpg)\n  \n  \n  \n  \n","slug":"Nexus-7-解锁","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1uq003b8a6bllci3b1v"},{"title":"刷小米开发版系统助力安卓webview调试","date":"2015-09-07T04:22:12.000Z","_content":"\n偶然发现在小米开发版系统上装的app应用，其webview的debug模式是打开的！！！\n\n那么也就是说以后不管是qq，淘宝，只要是他们用了webview都可以直接在chrome中远程调试线上代码了的。\n\n好处不用多说，直接搞起来。\n\n##刷机步骤\n\n以我的nexus 7 为例。\n\n1. 首先需要[解锁设备](http://judastree.github.io/blog/2015/09/07/Nexus-7-%E8%A7%A3%E9%94%81/) \n\n2. 然后准备好小米开发版系统，我在rom基地下的[Google Nexus 7(第二代)刷机包 官方MIUI V5 4.8.22 开发版](http://www.romjd.com/Rom/Detail/26195)\n\n3. PC端下载刷机精灵，之后的操作就很简单了，按着刷机精灵的步骤来。\n\n##效果\nnexus上已经是小米的系统了。\n\n![xiaomisystem](/images/xiaomisystem.jpg)\n\n\n在nexus上打开了qq，淘宝和电视淘宝的app， 直接可以在chrome中debug。\n\n![removedebug](/images/removedebug.png)","source":"_posts/Nexus-7-刷小米开发版系统助力webview调试.md","raw":"title: \"刷小米开发版系统助力安卓webview调试\"\ndate: 2015-09-07 12:22:12\ntags: [Android,工具]\n---\n\n偶然发现在小米开发版系统上装的app应用，其webview的debug模式是打开的！！！\n\n那么也就是说以后不管是qq，淘宝，只要是他们用了webview都可以直接在chrome中远程调试线上代码了的。\n\n好处不用多说，直接搞起来。\n\n##刷机步骤\n\n以我的nexus 7 为例。\n\n1. 首先需要[解锁设备](http://judastree.github.io/blog/2015/09/07/Nexus-7-%E8%A7%A3%E9%94%81/) \n\n2. 然后准备好小米开发版系统，我在rom基地下的[Google Nexus 7(第二代)刷机包 官方MIUI V5 4.8.22 开发版](http://www.romjd.com/Rom/Detail/26195)\n\n3. PC端下载刷机精灵，之后的操作就很简单了，按着刷机精灵的步骤来。\n\n##效果\nnexus上已经是小米的系统了。\n\n![xiaomisystem](/images/xiaomisystem.jpg)\n\n\n在nexus上打开了qq，淘宝和电视淘宝的app， 直接可以在chrome中debug。\n\n![removedebug](/images/removedebug.png)","slug":"Nexus-7-刷小米开发版系统助力webview调试","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ur003e8a6bn42v163m"},{"title":"Monkey日志分析","date":"2015-08-27T05:18:49.000Z","_content":"","source":"_posts/Monkey日志分析.md","raw":"title: \"Monkey日志分析\"\ndate: 2015-08-27 13:18:49\ntags: [Android]\n---\n","slug":"Monkey日志分析","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ut003h8a6b1ylzjm8a"},{"title":"Mitmproxy 抓包工具","date":"2015-12-27T08:13:49.000Z","_content":"\nWindows下的Fiddler是神器，具备抓包，代理，文件替换等各种功能。但因为Fiddler是由.netframework开发的，不能在mac下跑。\n\n虽然官方也出过fiddler的mac版，但不好用。所以在寻求mac下的替换工具时找到了这个Mitmproxy。\n\n\n","source":"_posts/Mitmproxy-抓包工具.md","raw":"title: \"Mitmproxy 抓包工具\"\ndate: 2015-12-27 16:13:49\ntags: [工具]\n---\n\nWindows下的Fiddler是神器，具备抓包，代理，文件替换等各种功能。但因为Fiddler是由.netframework开发的，不能在mac下跑。\n\n虽然官方也出过fiddler的mac版，但不好用。所以在寻求mac下的替换工具时找到了这个Mitmproxy。\n\n\n","slug":"Mitmproxy-抓包工具","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1uu003j8a6bunmlt777"},{"title":"Mac版Webstorm的一些快捷键 ","date":"2015-07-06T01:40:01.000Z","_content":"\n一些快捷键总是记不住，好记性不如烂笔头.\n当然command+, 在Pereference的Keymap中也能找到并且修改快捷键。\n\n\n\n * 双击shift：查找函数或者文件\n * Shift+command+O：查找文件\n * Alt+command+L：排版格式化\n","source":"_posts/Mac版Webstorm的一些快捷键.md","raw":"title: \"Mac版Webstorm的一些快捷键 \"\ndate: 2015-07-06 09:40:01\ntags: [mac,webstorm]\n---\n\n一些快捷键总是记不住，好记性不如烂笔头.\n当然command+, 在Pereference的Keymap中也能找到并且修改快捷键。\n\n\n\n * 双击shift：查找函数或者文件\n * Shift+command+O：查找文件\n * Alt+command+L：排版格式化\n","slug":"Mac版Webstorm的一些快捷键","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1uv003l8a6b2tymon36"},{"title":"Mac中修改host","date":"2015-05-20T13:43:24.000Z","_content":"\n###打开终端\n\n\t$sudo vim /etc/hosts\n\t\n###输入开机密码出现如下所示界面\n\n\t##\n\t# Host Database#\n\t# localhost is used to configure the loopback \tinterface\n\t# when the system is booting.  Do not change this \tentry.\n\t##\n\t127.0.0.1       localhost\n\t255.255.255.255 broadcasthost\n\t::1             localhost\n\n\t#74.125.237.1   dl-ssl.google.com\n\n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t-- INSERT --\n\n###输入‘i’进入insert模式，修改你要配置的host，\n编辑完成后，先按esc，然后输入:wq\n最后回车。\n\n","source":"_posts/Mac中修改host.md","raw":"title: \"Mac中修改host\"\ndate: 2015-05-20 21:43:24\ntags: [mac]\n----\n\n###打开终端\n\n\t$sudo vim /etc/hosts\n\t\n###输入开机密码出现如下所示界面\n\n\t##\n\t# Host Database#\n\t# localhost is used to configure the loopback \tinterface\n\t# when the system is booting.  Do not change this \tentry.\n\t##\n\t127.0.0.1       localhost\n\t255.255.255.255 broadcasthost\n\t::1             localhost\n\n\t#74.125.237.1   dl-ssl.google.com\n\n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t~                                                                               \n\t-- INSERT --\n\n###输入‘i’进入insert模式，修改你要配置的host，\n编辑完成后，先按esc，然后输入:wq\n最后回车。\n\n","slug":"Mac中修改host","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1ux003o8a6bzwzqg170"},{"title":"Mac下取消Chrome/QQ浏览器的ajax请求跨域","date":"2015-06-29T09:33:36.000Z","_content":"\n本地调试的时候总是说Origin * is not allowed by Access-Control-Allow-Origin好烦。\n\n打开终端，输入命令\n\n\t$open -a \"Google Chrome\" --args --disable-web-security\n\n\n用其他Chromium内核的浏览器的话，这个命令可能会不适用，比如我现在钟爱的QQ浏览器。\n\n这时可以选择安装chrome extension的方式。CORS插件。\n\n地址在这儿：[Allow-Control-Allow-Origin Extension](https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?utm_campaign=en&utm_source=en-et-na-us-oc-webstrhm&utm_medium=et)\n\n","source":"_posts/Mac下取消Chrome的ajax请求跨域.md","raw":"title: \"Mac下取消Chrome/QQ浏览器的ajax请求跨域\"\ndate: 2015-06-29 17:33:36\ntags: [mac, 工具]\n---\n\n本地调试的时候总是说Origin * is not allowed by Access-Control-Allow-Origin好烦。\n\n打开终端，输入命令\n\n\t$open -a \"Google Chrome\" --args --disable-web-security\n\n\n用其他Chromium内核的浏览器的话，这个命令可能会不适用，比如我现在钟爱的QQ浏览器。\n\n这时可以选择安装chrome extension的方式。CORS插件。\n\n地址在这儿：[Allow-Control-Allow-Origin Extension](https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?utm_campaign=en&utm_source=en-et-na-us-oc-webstrhm&utm_medium=et)\n\n","slug":"Mac下取消Chrome的ajax请求跨域","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1uy003q8a6b3wjkkd7m"},{"title":"Mac ox 默认环境变量","date":"2015-11-10T05:47:55.000Z","_content":"\n  今天设置环境变量设置错了，导致整个mac的终端命令（sudo,ls,open,vi等）都不能用了。\n  \n  执行下面的命令，保证一些默认的可以用：\n  \n    export PATH=/bin:/sbin/:/usr/bin:/usr/sbin:/usr/local/bin:/opt/local/sbin:/opt/local/sbin\n\n  之后再设置你要的环境变量\n    \n    vim ~/.bash_profile\n    \n  立即生效命令\n    \n    source ~/.bash_profile\n","source":"_posts/Mac-ox-默认环境变量.md","raw":"title: \"Mac ox 默认环境变量\"\ndate: 2015-11-10 13:47:55\ntags: [mac]\n---\n\n  今天设置环境变量设置错了，导致整个mac的终端命令（sudo,ls,open,vi等）都不能用了。\n  \n  执行下面的命令，保证一些默认的可以用：\n  \n    export PATH=/bin:/sbin/:/usr/bin:/usr/sbin:/usr/local/bin:/opt/local/sbin:/opt/local/sbin\n\n  之后再设置你要的环境变量\n    \n    vim ~/.bash_profile\n    \n  立即生效命令\n    \n    source ~/.bash_profile\n","slug":"Mac-ox-默认环境变量","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1uz003t8a6butln0dul"},{"title":"Mac OS X 中配置Apache 相关","date":"2015-03-30T14:23:41.000Z","_content":"\n### 启动服务\n\n\nMac中自带了Apache环境，直接一行命令搞定了。\n\n     $sudo apachectl start\n\n这时，打开你得浏览器，输入“http://localhost”, 可以看到“It Works！”的页面。这个**index.html** 文件位于“/Library(资源库)/WebServer/Documents/”下。这是Apache的默认根目录。\n\n---\n\n###修改配置\n\n\nApache 的安装目录在:**/etc/apache2/** 默认是隐藏的。\n\n    $open /etc/apache2\n      \n让隐藏文件可以见，或者让隐藏文件不可见的命令如下：\n\n    $defaults write com.apple.finder AppleShowAllFiles -bool true\n    \n    $defaults write com.apple.finder AppleShowAllFiles -bool false\n    \n\n修改**/etc/apache2/httpd.conf** 文件，就是修改apache的配置文件。这个文件默认是只读的，修改请加管理员权限 **sudo**\n\n\n修改完之后，记得重启apache 服务\n\n    $sudo apachectl restart\n \n\n---\n\n\n\n###修改Apache默认根目录\n\n1. 打开 **/etc/apache2/httpd.conf**文件\n\n       $sudo vim /etc/apache2/httpd.conf\n     \n      \n2. 找到**/Library/WebServer/Documents**,你换成你自己的目录：\n\n       如/Users/{username}/Sites\n      \n3. 重启服务。\n\n       $sudo apachectl restart   \n \n\n---\n\n\n###访问权限问题\n\n可能会遇到403 Forbidden，这时就需要修改<Directory/>的配置了。\n\n1. 打开 **/etc/apache2/httpd.conf**文件\n\n       $sudo vim /etc/apache2/httpd.conf\n       \n2. 找到**Directory**标签,将标签内的配置Deny from all删掉，改成allow from all\n\n        <Directory />\n            Options Indexes FollowSymLinks\n            AllowOverride None\n            Order deny,allow\n            allow from all\n        </Directory>\n\n3. 然后继续重启\n\nPs：Options Indexes FollowSymLinks中得Indexes是指如果你的文件根目录里有 index.html，浏览器就会显示 index.html的内容。\n如果没有 index.html，浏览器就会显示文件根目录的目录列表，目录列表包括文件根目录下的文件和子目录。\n要关闭文件目录显示的话，只需将Indexes去掉即可。\n\n\n###修改默认端口\n\n1. 打开 **/etc/apache2/httpd.conf**文件\n\n       $sudo vim /etc/apache2/httpd.conf\n       \n2. 找到**Listen** 关键字,后面跟的就是端口号了，改掉！\n\n        Listen 8089\n\n3. 然后继续重启\n        \n\n","source":"_posts/Mac-OS-X-中配置Apache.md","raw":"title: \"Mac OS X 中配置Apache 相关\"\ndate: 2015-03-30 22:23:41\ntags: [mac]\n---\n\n### 启动服务\n\n\nMac中自带了Apache环境，直接一行命令搞定了。\n\n     $sudo apachectl start\n\n这时，打开你得浏览器，输入“http://localhost”, 可以看到“It Works！”的页面。这个**index.html** 文件位于“/Library(资源库)/WebServer/Documents/”下。这是Apache的默认根目录。\n\n---\n\n###修改配置\n\n\nApache 的安装目录在:**/etc/apache2/** 默认是隐藏的。\n\n    $open /etc/apache2\n      \n让隐藏文件可以见，或者让隐藏文件不可见的命令如下：\n\n    $defaults write com.apple.finder AppleShowAllFiles -bool true\n    \n    $defaults write com.apple.finder AppleShowAllFiles -bool false\n    \n\n修改**/etc/apache2/httpd.conf** 文件，就是修改apache的配置文件。这个文件默认是只读的，修改请加管理员权限 **sudo**\n\n\n修改完之后，记得重启apache 服务\n\n    $sudo apachectl restart\n \n\n---\n\n\n\n###修改Apache默认根目录\n\n1. 打开 **/etc/apache2/httpd.conf**文件\n\n       $sudo vim /etc/apache2/httpd.conf\n     \n      \n2. 找到**/Library/WebServer/Documents**,你换成你自己的目录：\n\n       如/Users/{username}/Sites\n      \n3. 重启服务。\n\n       $sudo apachectl restart   \n \n\n---\n\n\n###访问权限问题\n\n可能会遇到403 Forbidden，这时就需要修改<Directory/>的配置了。\n\n1. 打开 **/etc/apache2/httpd.conf**文件\n\n       $sudo vim /etc/apache2/httpd.conf\n       \n2. 找到**Directory**标签,将标签内的配置Deny from all删掉，改成allow from all\n\n        <Directory />\n            Options Indexes FollowSymLinks\n            AllowOverride None\n            Order deny,allow\n            allow from all\n        </Directory>\n\n3. 然后继续重启\n\nPs：Options Indexes FollowSymLinks中得Indexes是指如果你的文件根目录里有 index.html，浏览器就会显示 index.html的内容。\n如果没有 index.html，浏览器就会显示文件根目录的目录列表，目录列表包括文件根目录下的文件和子目录。\n要关闭文件目录显示的话，只需将Indexes去掉即可。\n\n\n###修改默认端口\n\n1. 打开 **/etc/apache2/httpd.conf**文件\n\n       $sudo vim /etc/apache2/httpd.conf\n       \n2. 找到**Listen** 关键字,后面跟的就是端口号了，改掉！\n\n        Listen 8089\n\n3. 然后继续重启\n        \n\n","slug":"Mac-OS-X-中配置Apache","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v0003v8a6bsmwsd0aj"},{"title":"LeetCode:Path-Sum","date":"2015-07-19T14:37:32.000Z","_content":"\n##题目来源\n [指定和值的二叉树路径查找](https://leetcode.com/problems/path-sum/)\n \n 现在有一个二叉树，找出这个二叉树中是否有存在这样一条根到叶子的路径能使路径节点上的值加起来等于给定的值。\n *比如*下面这个二叉树，给定的值是22，5->4->11->2 这条路径是满足条件的。\n \n               5\n              / \\\n             4   8\n            /   / \\\n           11  13  4\n          /  \\      \\\n         7    2      1\n\n\n##思路\n 这就是一个二叉树遍历，从根节点往下，每找到一个节点将节点的value和当前路径相加，判断是否和sum相等。\n  * 如果相等，并且是叶子节点，则返回true，找到\n  * 如果不相等，相等但不是叶子节点，则继续查找，直到所有的节点都遍历过。\n  \n##实现\n     \n JavaScript:\n      \n      var checkNext =function(root, sum, currentSum,flag){\n          if (root) {\n      \n              if (root.val + currentSum === sum) {\n                  if (root.left === null && root.right === null) {\n                      return true;\n                  }\n              }\n              if(root.left===null&&root.right===null){\n                  return false;\n              }\n      \n              if (root.left !== null) {\n                  flag = checkNext(root.left, sum, root.val + currentSum,flag);\n              }\n              if(flag){\n                  return true;\n              }\n              if (root.right !== null) {\n                  flag = checkNext(root.right, sum, root.val + currentSum,flag);\n              }\n              return flag;\n      \n      \n          } else {\n              return false;\n          }\n      }\n      var hasPathSum = function (root, sum) {\n      \n          if(checkNext(root, sum, 0,false)){\n              return true\n          }else{\n              return false\n          }\n        };\n\n \n\nPS:这是我在leetcode上做的第一个题，最初没有搞明白玩法，一直在自己实现二叉树，后面才发现原来二叉树已经写好，只要给遍历方法就好了。\n\n![Runtime](/images/pathsumruntime.png)","source":"_posts/LeetCode:Path Sum.md","raw":"title: \"LeetCode:Path-Sum\"\ndate: 2015-07-19 22:37:32\ntags: [算法,LeetCode]\n---\n\n##题目来源\n [指定和值的二叉树路径查找](https://leetcode.com/problems/path-sum/)\n \n 现在有一个二叉树，找出这个二叉树中是否有存在这样一条根到叶子的路径能使路径节点上的值加起来等于给定的值。\n *比如*下面这个二叉树，给定的值是22，5->4->11->2 这条路径是满足条件的。\n \n               5\n              / \\\n             4   8\n            /   / \\\n           11  13  4\n          /  \\      \\\n         7    2      1\n\n\n##思路\n 这就是一个二叉树遍历，从根节点往下，每找到一个节点将节点的value和当前路径相加，判断是否和sum相等。\n  * 如果相等，并且是叶子节点，则返回true，找到\n  * 如果不相等，相等但不是叶子节点，则继续查找，直到所有的节点都遍历过。\n  \n##实现\n     \n JavaScript:\n      \n      var checkNext =function(root, sum, currentSum,flag){\n          if (root) {\n      \n              if (root.val + currentSum === sum) {\n                  if (root.left === null && root.right === null) {\n                      return true;\n                  }\n              }\n              if(root.left===null&&root.right===null){\n                  return false;\n              }\n      \n              if (root.left !== null) {\n                  flag = checkNext(root.left, sum, root.val + currentSum,flag);\n              }\n              if(flag){\n                  return true;\n              }\n              if (root.right !== null) {\n                  flag = checkNext(root.right, sum, root.val + currentSum,flag);\n              }\n              return flag;\n      \n      \n          } else {\n              return false;\n          }\n      }\n      var hasPathSum = function (root, sum) {\n      \n          if(checkNext(root, sum, 0,false)){\n              return true\n          }else{\n              return false\n          }\n        };\n\n \n\nPS:这是我在leetcode上做的第一个题，最初没有搞明白玩法，一直在自己实现二叉树，后面才发现原来二叉树已经写好，只要给遍历方法就好了。\n\n![Runtime](/images/pathsumruntime.png)","slug":"LeetCode:Path Sum","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v1003x8a6but1m5eum"},{"title":"LeetCode:Valid Anagram","date":"2015-08-02T04:00:06.000Z","_content":"##题目\n\n[Valid Anagram](https://leetcode.com/problems/valid-anagram/)\n\n判断两个字符串是否易位构造，也就是字母种类和出现的次数一样。\n\n比如：\n\n  dear   和  read\n  listen 和  silent\n  loop   和  pool\n  \n\n##思路\n\n统计两个字符串的字母种类和出现的次数，如果相等则是易位构造。\n\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {string} s\n        * @param {string} t\n        * @return {boolean}\n        */\n       var isAnagram = function(s, t) {\n           //判断两个字符串是否同源，也就是字母种类和出现的次数一样\n           var sArray = s.split(\"\"),tArray= t.split(\"\"),sMap={};\n       \n           //先判断s和t的长度是否相等\n           if(s.length!== t.length){\n               return false;\n           }\n           //获取s字符串的字母种类和每个字母出现的次数\n           for(var i=0;i<sArray.length;i++){\n               if(!sMap[sArray[i]]){\n                   sMap[sArray[i]] = 1;\n               }else{\n                   sMap[sArray[i]]++;\n               }\n           }\n       \n           //根据sMap来判断t字符串是否和s同源\n           for(i=0;i<tArray.length;i++){\n               if(sMap[tArray[i]]){\n                   sMap[tArray[i]]--;\n                   if(sMap[tArray[i]]<0){\n                       return false;\n                   }\n               }else{\n                   return false;\n               }\n           }\n           return true;\n       };\n       \n\nPS: 因为这个题目在leetcode上比较新，所以还没有出来JS运行时常的比较。","source":"_posts/LeetCode-Valid-Anagram.md","raw":"title: \"LeetCode:Valid Anagram\"\ndate: 2015-08-02 12:00:06\ntags: [算法,LeetCode]\n---\n##题目\n\n[Valid Anagram](https://leetcode.com/problems/valid-anagram/)\n\n判断两个字符串是否易位构造，也就是字母种类和出现的次数一样。\n\n比如：\n\n  dear   和  read\n  listen 和  silent\n  loop   和  pool\n  \n\n##思路\n\n统计两个字符串的字母种类和出现的次数，如果相等则是易位构造。\n\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {string} s\n        * @param {string} t\n        * @return {boolean}\n        */\n       var isAnagram = function(s, t) {\n           //判断两个字符串是否同源，也就是字母种类和出现的次数一样\n           var sArray = s.split(\"\"),tArray= t.split(\"\"),sMap={};\n       \n           //先判断s和t的长度是否相等\n           if(s.length!== t.length){\n               return false;\n           }\n           //获取s字符串的字母种类和每个字母出现的次数\n           for(var i=0;i<sArray.length;i++){\n               if(!sMap[sArray[i]]){\n                   sMap[sArray[i]] = 1;\n               }else{\n                   sMap[sArray[i]]++;\n               }\n           }\n       \n           //根据sMap来判断t字符串是否和s同源\n           for(i=0;i<tArray.length;i++){\n               if(sMap[tArray[i]]){\n                   sMap[tArray[i]]--;\n                   if(sMap[tArray[i]]<0){\n                       return false;\n                   }\n               }else{\n                   return false;\n               }\n           }\n           return true;\n       };\n       \n\nPS: 因为这个题目在leetcode上比较新，所以还没有出来JS运行时常的比较。","slug":"LeetCode-Valid-Anagram","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v200418a6bq10mjx75"},{"title":"LeetCode:Single Number","date":"2015-07-22T02:58:33.000Z","_content":"\n##题目来源\n\n[找出落单的数字](https://leetcode.com/problems/single-number/)\n\n有一个都是整型的数组，它除了一个元素只有出现一次之外，其他的都出现了二次。求这个落单的数字。\n\n比如[1,2,3,5,2,1,3]这个数组中5是落单的数字，其他数字都出现了两次。\n\n\n##思路\n\n最先写的是两层for循环来比较是否有相等的。但是提交之后发现Time Limit Exceeded，时间复杂度是n^2。\n\n题目有标注是线性的事件复杂度，而且空间复杂度也是线性级别的,所以递归调用也是不行的。\n\n然后百度了下，发现有人用异或操作来判断。\n\n    a ^ b = b ^ a\n    a ^ a = 0\n    0 ^ a = a\n    \n    a ^ b ^ a = a ^ a ^ b = 0 ^ b = b\n    \n    \n 这样就可以把这个b找出来了。\n   \n##实现\n\nJavaScript:\n\n       /**\n        * @param {number[]} nums\n        * @return {number}\n        */\n       var singleNumber = function(nums) {\n           var result = nums[0];\n       \n           for(var i = 1; i < nums.length; i++){\n               result = result ^ nums[i];\n           }\n           return result;\n           \n       }\n       \n \n ![SingleNumberRuntime](/images/singlenumber.png)      \n    \n\n","source":"_posts/LeetCode-Single-Number.md","raw":"title: \"LeetCode:Single Number\"\ndate: 2015-07-22 10:58:33\ntags: [算法,LeetCode]\n---\n\n##题目来源\n\n[找出落单的数字](https://leetcode.com/problems/single-number/)\n\n有一个都是整型的数组，它除了一个元素只有出现一次之外，其他的都出现了二次。求这个落单的数字。\n\n比如[1,2,3,5,2,1,3]这个数组中5是落单的数字，其他数字都出现了两次。\n\n\n##思路\n\n最先写的是两层for循环来比较是否有相等的。但是提交之后发现Time Limit Exceeded，时间复杂度是n^2。\n\n题目有标注是线性的事件复杂度，而且空间复杂度也是线性级别的,所以递归调用也是不行的。\n\n然后百度了下，发现有人用异或操作来判断。\n\n    a ^ b = b ^ a\n    a ^ a = 0\n    0 ^ a = a\n    \n    a ^ b ^ a = a ^ a ^ b = 0 ^ b = b\n    \n    \n 这样就可以把这个b找出来了。\n   \n##实现\n\nJavaScript:\n\n       /**\n        * @param {number[]} nums\n        * @return {number}\n        */\n       var singleNumber = function(nums) {\n           var result = nums[0];\n       \n           for(var i = 1; i < nums.length; i++){\n               result = result ^ nums[i];\n           }\n           return result;\n           \n       }\n       \n \n ![SingleNumberRuntime](/images/singlenumber.png)      \n    \n\n","slug":"LeetCode-Single-Number","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v300448a6bx7m9f0zu"},{"title":"LeetCode:Rotate Array ","date":"2015-07-23T03:12:43.000Z","_content":"\n##题目来源\n [数组向右移K位](https://leetcode.com/problems/rotate-array/)\n \n 有一个数组[1,2,3,4,5],向右移k位，k=3输出[3,4,5,1,2],k=1输出[5,1,2,3,4]\n \n 要求时间复杂度线性，空间复杂度可控O(1)\n \n##思路\n\n找到每个元素移位后的位置，在新的数组上追一赋值。\n\n##实现\n\nJavaScript:\n\n        /**\n         * @param {number[]} nums\n         * @param {number} k\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var rotate = function(nums, k) {\n              //步数是长度的倍数则直接返回\n              if(k%nums.length===0){\n                return;\n            }else{\n                //取模，拿到真正的步数，因为k可能大于length\n                var step = k%nums.length;\n                var result = [];\n                result.length =nums.length;\n        \n                for(var i=0;i<nums.length;i++){\n                    //确定每个元素的新的位置\n                    result[(i+step)%nums.length] = nums[i]\n                }\n                //重新赋值\n                for( i=0;i<nums.length;i++){\n                    nums[i] = result[i];\n                }\n        \n            }\n        };\n\n\nPS：验证虽然通过了，但总感觉有点投机，因为我重新复制了一下这个数组。虽然只用了这一个额外变量，但从空间存储上还是O(n)的。\n\n![RotateArray](/images/rotatearray.png)","source":"_posts/LeetCode-Rotate-Array.md","raw":"title: \"LeetCode:Rotate Array \"\ndate: 2015-07-23 11:12:43\ntags: [算法,LeetCode]\n---\n\n##题目来源\n [数组向右移K位](https://leetcode.com/problems/rotate-array/)\n \n 有一个数组[1,2,3,4,5],向右移k位，k=3输出[3,4,5,1,2],k=1输出[5,1,2,3,4]\n \n 要求时间复杂度线性，空间复杂度可控O(1)\n \n##思路\n\n找到每个元素移位后的位置，在新的数组上追一赋值。\n\n##实现\n\nJavaScript:\n\n        /**\n         * @param {number[]} nums\n         * @param {number} k\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var rotate = function(nums, k) {\n              //步数是长度的倍数则直接返回\n              if(k%nums.length===0){\n                return;\n            }else{\n                //取模，拿到真正的步数，因为k可能大于length\n                var step = k%nums.length;\n                var result = [];\n                result.length =nums.length;\n        \n                for(var i=0;i<nums.length;i++){\n                    //确定每个元素的新的位置\n                    result[(i+step)%nums.length] = nums[i]\n                }\n                //重新赋值\n                for( i=0;i<nums.length;i++){\n                    nums[i] = result[i];\n                }\n        \n            }\n        };\n\n\nPS：验证虽然通过了，但总感觉有点投机，因为我重新复制了一下这个数组。虽然只用了这一个额外变量，但从空间存储上还是O(n)的。\n\n![RotateArray](/images/rotatearray.png)","slug":"LeetCode-Rotate-Array","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v400478a6bnjlftpec"},{"title":"LeetCode:Reverse Linked List","date":"2015-08-04T02:40:27.000Z","_content":"\n##题目Topic\n\n反转链表\n[Reverse Linked List](https://leetcode.com/problems/reverse-linked-list/)\n\n##思路How to\n\n递归实现，先反转head后面的链表，这时原来的第二个节点(head->next)已经移到链尾了，把head赋给原来第二个节点的next，并以原head收尾，实现反转。\n\n##实现 Implementation\n\nJavaScript:\n\n       /**\n        * 递归实现\n        * @param {ListNode} head\n        * @return {ListNode}\n        */\n       var reverseList = function(head) {\n           if(head===null||head.next===null){\n               return head;\n           }else{\n               var newHead = reverseList(head.next);\n               head.next.next = head;\n               head.next=null;\n               return newHead;\n           }\n       };\n\n##耗时\n\n![reverselist](/images/reverselist.png)","source":"_posts/LeetCode-Reverse-Linked-List.md","raw":"title: \"LeetCode:Reverse Linked List\"\ndate: 2015-08-04 10:40:27\ntags: [算法,LeetCode]\n---\n\n##题目Topic\n\n反转链表\n[Reverse Linked List](https://leetcode.com/problems/reverse-linked-list/)\n\n##思路How to\n\n递归实现，先反转head后面的链表，这时原来的第二个节点(head->next)已经移到链尾了，把head赋给原来第二个节点的next，并以原head收尾，实现反转。\n\n##实现 Implementation\n\nJavaScript:\n\n       /**\n        * 递归实现\n        * @param {ListNode} head\n        * @return {ListNode}\n        */\n       var reverseList = function(head) {\n           if(head===null||head.next===null){\n               return head;\n           }else{\n               var newHead = reverseList(head.next);\n               head.next.next = head;\n               head.next=null;\n               return newHead;\n           }\n       };\n\n##耗时\n\n![reverselist](/images/reverselist.png)","slug":"LeetCode-Reverse-Linked-List","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v6004a8a6b0bor1ra2"},{"title":"LeetCode:Remove Nth Node from End of List","date":"2015-08-07T01:07:42.000Z","_content":"\n##题目\n\n[Remove Nth Node from End of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)\n\n把倒数第N个元素从链表中删除。\n\n比如链表1->2->3->4->5,  把倒数第二个删除（n=2），返回1->2->3->5\n\n##思路\n\n首先是遍历整个链表，拿到链表的长度，然后根据这个长度值length和指定的n值再遍历一次链表，找到要删除节点的父节点。\n\n##实现\n\nJavaScript:\n    \n    /**\n     * Definition for singly-linked list.\n     */\n      function ListNode(val) {\n          this.val = val;\n          this.next = null;\n      }\n    \n    /**\n     * @param {ListNode} head\n     * @param {number} n\n     * @return {ListNode}\n     */\n    var removeNthFromEnd = function(head, n) {\n        var dumy = new ListNode(0), p=head,length=0;\n        dumy.next =head;\n        //获取链表长度\n        while(p){\n            length++;\n            p = p.next;\n        }\n        p = dumy;\n        //找到要删除元素的父元素\n        while(length>n){\n            p = p.next;\n            length--;\n        }\n        //删除元素\n        if(p.next){\n            p.next = p.next.next;\n        }else{\n            p = null;\n        }\n        return dumy.next;\n    };\n    \n    \n##耗时\n\n![removenthfromend](/images/removenthfromend.png)\n\n\n\n\n","source":"_posts/LeetCode-Remove-Nth-from-end.md","raw":"title: \"LeetCode:Remove Nth Node from End of List\"\ndate: 2015-08-07 09:07:42\ntags: [LeetCode, 算法]\n---\n\n##题目\n\n[Remove Nth Node from End of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)\n\n把倒数第N个元素从链表中删除。\n\n比如链表1->2->3->4->5,  把倒数第二个删除（n=2），返回1->2->3->5\n\n##思路\n\n首先是遍历整个链表，拿到链表的长度，然后根据这个长度值length和指定的n值再遍历一次链表，找到要删除节点的父节点。\n\n##实现\n\nJavaScript:\n    \n    /**\n     * Definition for singly-linked list.\n     */\n      function ListNode(val) {\n          this.val = val;\n          this.next = null;\n      }\n    \n    /**\n     * @param {ListNode} head\n     * @param {number} n\n     * @return {ListNode}\n     */\n    var removeNthFromEnd = function(head, n) {\n        var dumy = new ListNode(0), p=head,length=0;\n        dumy.next =head;\n        //获取链表长度\n        while(p){\n            length++;\n            p = p.next;\n        }\n        p = dumy;\n        //找到要删除元素的父元素\n        while(length>n){\n            p = p.next;\n            length--;\n        }\n        //删除元素\n        if(p.next){\n            p.next = p.next.next;\n        }else{\n            p = null;\n        }\n        return dumy.next;\n    };\n    \n    \n##耗时\n\n![removenthfromend](/images/removenthfromend.png)\n\n\n\n\n","slug":"LeetCode-Remove-Nth-from-end","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v7004d8a6b97sl7ltg"},{"title":"LeetCode:Power of Two","date":"2015-07-22T02:30:48.000Z","_content":"\n##题目来源\n [给定一个数判断它是否为2的次方](https://leetcode.com/problems/power-of-two/)\n \n 给你一个数字N，求判断它是否是2的次方。比如8是2的3次方，返回true，9不是2的次方，返回false。\n \n##思路\n  这个题目最初想到的是递归除以2。但考虑到2这个数字比较特殊，它的次方在计算机中的位存储也是很特殊的，所以可以试下位操作。\n  \n      2 : 10\n      4 : 100\n      8 : 1000\n      16: 10000\n      ...\n  2的X次方，其二进制是1后面跟X个0；而2的X次方减1的二进制都是1.\n      \n      1 : 1\n      3 : 11\n      7 : 111\n      15: 1111\n      ...\n  而2^x 和2^x-1 进行**位与**操作，结果是0.比如8和7\n       \n         1000\n       & 0111\n       -------\n         0000\n  那么我们就可以利用这一点来判断一个数是否为2的次方。     \n        \n\n##实现\n\n JavaScript:\n \n        /**\n         * @param {number} n\n         * @return {boolean}\n         */\n        var isPowerOfTwo = function(n) {\n        \n            if(n<=0){return false}\n            \n            return (n&n-1)===0\n        };\n\n\n![Runtime](/images/poweroftwo.png)","source":"_posts/LeetCode-Power-of-Two.md","raw":"title: \"LeetCode:Power of Two\"\ndate: 2015-07-22 10:30:48\ntags: [算法,LeetCode]\n---\n\n##题目来源\n [给定一个数判断它是否为2的次方](https://leetcode.com/problems/power-of-two/)\n \n 给你一个数字N，求判断它是否是2的次方。比如8是2的3次方，返回true，9不是2的次方，返回false。\n \n##思路\n  这个题目最初想到的是递归除以2。但考虑到2这个数字比较特殊，它的次方在计算机中的位存储也是很特殊的，所以可以试下位操作。\n  \n      2 : 10\n      4 : 100\n      8 : 1000\n      16: 10000\n      ...\n  2的X次方，其二进制是1后面跟X个0；而2的X次方减1的二进制都是1.\n      \n      1 : 1\n      3 : 11\n      7 : 111\n      15: 1111\n      ...\n  而2^x 和2^x-1 进行**位与**操作，结果是0.比如8和7\n       \n         1000\n       & 0111\n       -------\n         0000\n  那么我们就可以利用这一点来判断一个数是否为2的次方。     \n        \n\n##实现\n\n JavaScript:\n \n        /**\n         * @param {number} n\n         * @return {boolean}\n         */\n        var isPowerOfTwo = function(n) {\n        \n            if(n<=0){return false}\n            \n            return (n&n-1)===0\n        };\n\n\n![Runtime](/images/poweroftwo.png)","slug":"LeetCode-Power-of-Two","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1v9004g8a6bta7dthbx"},{"title":"LeetCode Populating Next Right Pointers in Each Node","date":"2015-10-12T07:22:17.000Z","_content":"\n##题目\n\n[Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)\n\n给一个平衡二叉树的每个节点加上next属性,next 指向起相邻的节点，如果没有则指向null;\n\nGiven the following perfect binary tree,\n\n             1\n           /  \\\n          2    3\n         / \\  / \\\n        4  5  6  7\n    \nAfter calling your function, the tree should look like:\n\n             1 -> NULL\n           /  \\\n          2 -> 3 -> NULL\n         / \\  / \\\n        4->5->6->7 -> NULL\n    \n    \n##思路\n    \n   1.对于一个父节点来说，它左孩子的next指向它的右孩子，它的右孩子的next指向它自己next节点的左孩子。\n   2.遍历整个二叉树，对每个父节点进行1操作。\n    \n   \n##实现\n    \nJavaScript:\n    \n    /**\n     * Definition for binary tree with next pointer.\n     * function TreeLinkNode(val) {\n     *     this.val = val;\n     *     this.left = this.right = this.next = null;\n     * }\n     */\n    \n    /**\n     * @param {TreeLinkNode} root\n     * @return {void} Do not return anything, modify tree in-place instead.\n     */\n    var connect = function(root) {\n        if(root===null) return;\n        root.next =null;\n        \n        \n        function traversal(node){\n            if(node){\n                if(node.left){\n                    connectLeftChild(node,node.left);\n                    traversal(node.left);\n                }\n                if(node.right){\n                    connectRightChild(node,node.right);\n                    traversal(node.right);\n                }\n            }\n            \n            \n        }\n        function connectLeftChild(parent,node){\n            \n            if(node){\n                 node.next = parent.right;\n            }\n        } \n        function connectRightChild(parent,node){\n            if(node){\n                if(parent.next){\n                    node.next = parent.next.left;\n                }else{\n                    node.next = null;\n                }\n                \n            }\n            \n        }\n        traversal(root);\n    };\n    \n##耗时\n    \n  ![nextpointerruntime](/images/nextpointer.png)","source":"_posts/LeetCode-Populating-Next-Right-Pointers-in-Each-Node.md","raw":"title: \"LeetCode Populating Next Right Pointers in Each Node\"\ndate: 2015-10-12 15:22:17\ntags: [算法, LeetCode]\n---\n\n##题目\n\n[Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)\n\n给一个平衡二叉树的每个节点加上next属性,next 指向起相邻的节点，如果没有则指向null;\n\nGiven the following perfect binary tree,\n\n             1\n           /  \\\n          2    3\n         / \\  / \\\n        4  5  6  7\n    \nAfter calling your function, the tree should look like:\n\n             1 -> NULL\n           /  \\\n          2 -> 3 -> NULL\n         / \\  / \\\n        4->5->6->7 -> NULL\n    \n    \n##思路\n    \n   1.对于一个父节点来说，它左孩子的next指向它的右孩子，它的右孩子的next指向它自己next节点的左孩子。\n   2.遍历整个二叉树，对每个父节点进行1操作。\n    \n   \n##实现\n    \nJavaScript:\n    \n    /**\n     * Definition for binary tree with next pointer.\n     * function TreeLinkNode(val) {\n     *     this.val = val;\n     *     this.left = this.right = this.next = null;\n     * }\n     */\n    \n    /**\n     * @param {TreeLinkNode} root\n     * @return {void} Do not return anything, modify tree in-place instead.\n     */\n    var connect = function(root) {\n        if(root===null) return;\n        root.next =null;\n        \n        \n        function traversal(node){\n            if(node){\n                if(node.left){\n                    connectLeftChild(node,node.left);\n                    traversal(node.left);\n                }\n                if(node.right){\n                    connectRightChild(node,node.right);\n                    traversal(node.right);\n                }\n            }\n            \n            \n        }\n        function connectLeftChild(parent,node){\n            \n            if(node){\n                 node.next = parent.right;\n            }\n        } \n        function connectRightChild(parent,node){\n            if(node){\n                if(parent.next){\n                    node.next = parent.next.left;\n                }else{\n                    node.next = null;\n                }\n                \n            }\n            \n        }\n        traversal(root);\n    };\n    \n##耗时\n    \n  ![nextpointerruntime](/images/nextpointer.png)","slug":"LeetCode-Populating-Next-Right-Pointers-in-Each-Node","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1va004j8a6b0u4rw60o"},{"title":"LeetCode:Plus One","date":"2015-07-22T03:17:26.000Z","_content":"\n##题目来源\n\n[Plus One](https://leetcode.com/problems/plus-one/)\n\n有一个数组代表一个非负的数字，求这个数字+1之后的数组。\n比如这个数组是[1,2,3,4]它代表数字1234，那么这个数字加1之后是1235。希望得到这个数字代表的数组[1,2,3,5]\n\n##思路\n从最后一位开始，对当前值+1，如果当前值不为9则正常返回结果。如果当前值为9，则当前值变为0，再递归调用前一位的+1操作。\n\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {number[]} digits\n        * @return {number[]}\n        */\n       var plusOne = function(digits) {\n           function plus(digits,i){\n               if(digits[i]===9){\n                   digits[i]=0;\n                   if(i===0){\n                       var head = [1];\n                       return head.concat(digits);\n                   }else{\n                       return plus(digits,i-1);\n                   }\n       \n               }else{\n                   digits[i] = digits[i]+1;\n                   return digits;\n               }\n       \n           }\n           return plus(digits,digits.length-1);\n       };\n      \n      \nPS：上面的代码性能不是很好，肯定有更好的算法的。\n      \n ![PlusOneRuntime](/images/plusone.png)     ","source":"_posts/LeetCode-Plus-One.md","raw":"title: \"LeetCode:Plus One\"\ndate: 2015-07-22 11:17:26\ntags: [算法,LeetCode]\n---\n\n##题目来源\n\n[Plus One](https://leetcode.com/problems/plus-one/)\n\n有一个数组代表一个非负的数字，求这个数字+1之后的数组。\n比如这个数组是[1,2,3,4]它代表数字1234，那么这个数字加1之后是1235。希望得到这个数字代表的数组[1,2,3,5]\n\n##思路\n从最后一位开始，对当前值+1，如果当前值不为9则正常返回结果。如果当前值为9，则当前值变为0，再递归调用前一位的+1操作。\n\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {number[]} digits\n        * @return {number[]}\n        */\n       var plusOne = function(digits) {\n           function plus(digits,i){\n               if(digits[i]===9){\n                   digits[i]=0;\n                   if(i===0){\n                       var head = [1];\n                       return head.concat(digits);\n                   }else{\n                       return plus(digits,i-1);\n                   }\n       \n               }else{\n                   digits[i] = digits[i]+1;\n                   return digits;\n               }\n       \n           }\n           return plus(digits,digits.length-1);\n       };\n      \n      \nPS：上面的代码性能不是很好，肯定有更好的算法的。\n      \n ![PlusOneRuntime](/images/plusone.png)     ","slug":"LeetCode-Plus-One","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vb004m8a6bd1hxp451"},{"title":"LeetCode:Palindrome Linked List","date":"2015-07-25T16:03:00.000Z","_content":"\n##题目\n\n[Palindrome Linked List](https://leetcode.com/problems/palindrome-linked-list/)\n\n判断一个单向链表（没有环）是否是回文链表。\n\n要求时间复杂度在O(n),空间复杂度 O(1)\n\n##思路\n\n    1, 找到链表的中间节点。\n    2, 反转链表后半部分。\n    3, 比较前半部分和后半部分的值是否相等\n    4, 还原现场，将后半部分反转回原貌\n    \n##查到链表的中间节点    \n\n            var fPointer = sPointer = midPos= head;\n            while (fPointer.next) {\n                sPointer = sPointer.next;\n                fPointer = fPointer.next;\n                if(fPointer.next){\n                    fPointer = fPointer.next;\n                }else{\n                    break;\n                }\n            }\n            midPos = sPointer;\n                \n##反转链表\n\n\nPS: 反转还没有写出来，下面是错误的。\n\n  反转链表的方法是从第2个节点到第N个节点，依次逐节点插入到第1个节点(head节点)之后，最后将第一个节点挪到新表的表尾。\n  \n  我们此时的head是midPos,移动sPointer指针。\n    \n    fPointer = misPos;\n    sPointer = sPointer.next;\n    \n    while(sPointer){\n        //暂时保存head.next\n        fPointer = midPos.next;\n        //将要插入的节点放到head的next\n        midPos.next = sPointer;\n        //将插入节点的next赋值为前面保存的head.next\n        sPointer.next = fPointer;\n        \n        //移动sPointer\n        sPointer = sPointer.next   \n    }\n    \n    \n    \n","source":"_posts/LeetCode-Palindrome-Linked-List.md","raw":"title: \"LeetCode:Palindrome Linked List\"\ndate: 2015-07-26 00:03:00\ntags: [LeetCode,算法]\n---\n\n##题目\n\n[Palindrome Linked List](https://leetcode.com/problems/palindrome-linked-list/)\n\n判断一个单向链表（没有环）是否是回文链表。\n\n要求时间复杂度在O(n),空间复杂度 O(1)\n\n##思路\n\n    1, 找到链表的中间节点。\n    2, 反转链表后半部分。\n    3, 比较前半部分和后半部分的值是否相等\n    4, 还原现场，将后半部分反转回原貌\n    \n##查到链表的中间节点    \n\n            var fPointer = sPointer = midPos= head;\n            while (fPointer.next) {\n                sPointer = sPointer.next;\n                fPointer = fPointer.next;\n                if(fPointer.next){\n                    fPointer = fPointer.next;\n                }else{\n                    break;\n                }\n            }\n            midPos = sPointer;\n                \n##反转链表\n\n\nPS: 反转还没有写出来，下面是错误的。\n\n  反转链表的方法是从第2个节点到第N个节点，依次逐节点插入到第1个节点(head节点)之后，最后将第一个节点挪到新表的表尾。\n  \n  我们此时的head是midPos,移动sPointer指针。\n    \n    fPointer = misPos;\n    sPointer = sPointer.next;\n    \n    while(sPointer){\n        //暂时保存head.next\n        fPointer = midPos.next;\n        //将要插入的节点放到head的next\n        midPos.next = sPointer;\n        //将插入节点的next赋值为前面保存的head.next\n        sPointer.next = fPointer;\n        \n        //移动sPointer\n        sPointer = sPointer.next   \n    }\n    \n    \n    \n","slug":"LeetCode-Palindrome-Linked-List","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vc004p8a6bn53d2xdi"},{"title":"LeetCode:Number of 1 Bits","date":"2015-07-26T04:36:48.000Z","_content":"\n##题目\n\n [找出一个数字的二进制中有多少个1](https://leetcode.com/problems/number-of-1-bits/)\n \n 给定一个无符号的整型数字，比如11,它的二进制是1011,所以返回1的个数3.\n \n##思路\n对二进制进行位操作，每向右移1位和1做位与操作。是1的话计数器加1，直到右移到0截止。\n\n这个方法写得很轻松，但是耗时长。\n\n##实现\n\nJavaScript:\n\n    /**\n     * @param {number} n - a positive integer\n     * @return {number}\n     */\n    var hammingWeight = function(n,count) {\n        if(!count){\n            count = 0;\n        }\n        if(n&1===1){\n            count++;\n        }\n        if(n>1){\n            return hammingWeight(n>>>1,count);\n        }else{\n            return count;\n        }\n    };","source":"_posts/LeetCode-Number-of-1-Bits.md","raw":"title: \"LeetCode:Number of 1 Bits\"\ndate: 2015-07-26 12:36:48\ntags: [算法, LeetCode]\n---\n\n##题目\n\n [找出一个数字的二进制中有多少个1](https://leetcode.com/problems/number-of-1-bits/)\n \n 给定一个无符号的整型数字，比如11,它的二进制是1011,所以返回1的个数3.\n \n##思路\n对二进制进行位操作，每向右移1位和1做位与操作。是1的话计数器加1，直到右移到0截止。\n\n这个方法写得很轻松，但是耗时长。\n\n##实现\n\nJavaScript:\n\n    /**\n     * @param {number} n - a positive integer\n     * @return {number}\n     */\n    var hammingWeight = function(n,count) {\n        if(!count){\n            count = 0;\n        }\n        if(n&1===1){\n            count++;\n        }\n        if(n>1){\n            return hammingWeight(n>>>1,count);\n        }else{\n            return count;\n        }\n    };","slug":"LeetCode-Number-of-1-Bits","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vd004s8a6biec9rsvl"},{"title":"LeetCode Move Zeroes","date":"2015-10-10T12:51:48.000Z","_content":"\n##题目\n\n[Move Zeroes](https://leetcode.com/problems/move-zeroes/)\n\n将一个数组中的0元素都移到最后面，同时保持非0元素的顺序不变。\n\n比如，[0,1,0,3,12] 移动后变成了[1,3,12,0,0]\n\n##思路\n\n  1. 找到第一个0元素的位置，从第一个0元素的位置往后遍历\n  2. 发现非0元素，则与第一个0元素互换位置，并将第一个0元素的位置往后移一位。\n  3. 继续遍历，重复2动作直到遍历结束。\n\n##实现\n\nJavascript\n\n    /**\n     * @param {number[]} nums\n     * @return {void} Do not return anything, modify nums in-place instead.\n     */\n    var moveZeroes = function(nums) {\n        var firstzero = 0,temp;\n        for(;firstzero<nums.length-1;firstzero++){\n            //find first zero\n            if(nums[firstzero]===0) break;\n        }\n        for(var j=firstzero+1;j<nums.length;j++){\n            if(nums[j]!==0){\n                //non-zero, change and move on\n                temp = nums[j];\n                nums[j]=nums[firstzero];\n                nums[firstzero]=temp;\n                firstzero ++;\n            }\n    \n        }\n        \n    };\n\n##耗时\n\n![movezeroes](/images/movezeroes.png)","source":"_posts/LeetCode-Move-Zeroes.md","raw":"title: \"LeetCode Move Zeroes\"\ndate: 2015-10-10 20:51:48\ntags: [算法,LeetCode]\n---\n\n##题目\n\n[Move Zeroes](https://leetcode.com/problems/move-zeroes/)\n\n将一个数组中的0元素都移到最后面，同时保持非0元素的顺序不变。\n\n比如，[0,1,0,3,12] 移动后变成了[1,3,12,0,0]\n\n##思路\n\n  1. 找到第一个0元素的位置，从第一个0元素的位置往后遍历\n  2. 发现非0元素，则与第一个0元素互换位置，并将第一个0元素的位置往后移一位。\n  3. 继续遍历，重复2动作直到遍历结束。\n\n##实现\n\nJavascript\n\n    /**\n     * @param {number[]} nums\n     * @return {void} Do not return anything, modify nums in-place instead.\n     */\n    var moveZeroes = function(nums) {\n        var firstzero = 0,temp;\n        for(;firstzero<nums.length-1;firstzero++){\n            //find first zero\n            if(nums[firstzero]===0) break;\n        }\n        for(var j=firstzero+1;j<nums.length;j++){\n            if(nums[j]!==0){\n                //non-zero, change and move on\n                temp = nums[j];\n                nums[j]=nums[firstzero];\n                nums[firstzero]=temp;\n                firstzero ++;\n            }\n    \n        }\n        \n    };\n\n##耗时\n\n![movezeroes](/images/movezeroes.png)","slug":"LeetCode-Move-Zeroes","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vf004v8a6b5r136j65"},{"title":"LeetCode:Merge Two Sorted Lists","date":"2015-07-29T02:31:25.000Z","_content":"\n##题目\n\n  [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)\n\n   有两个排序好的链表l1和l2，要求是合并为一个列表，并保持列表有序。\n        \n##思路\n    \n   我的想法是先遍历两个链表找到较短的一个，然后把短链表上节点逐个插入到长链表中。\n    \n   然后在网上看别人的代码，其实不用先找到短链。拿一个链表做基准，将另外一个插入就来，只遍历一次就好了。\n\n##实现\n\nJavaScript:\n\n    /**\n     * Definition for singly-linked list.\n     * function ListNode(val) {\n     *     this.val = val;\n     *     this.next = null;\n     * }\n     */\n    /**\n     * @param {ListNode} l1\n     * @param {ListNode} l2\n     * @return {ListNode}\n     */\n    var mergeTwoLists = function(l1, l2) {\n        //定义指针\n        var sPointer = l1,lPointer = l2;\n    \n        //一些特殊情况的处理\n        if(sPointer&&sPointer.val&&lPointer&&lPointer.val===null){\n            return sPointer;\n        }\n        if(sPointer&&sPointer.val===null&&lPointer&&lPointer.val){\n            return lPointer;\n        }\n        if(sPointer&&!lPointer){\n            return sPointer;\n        }\n        if(!sPointer&&lPointer){\n            return lPointer;\n        }\n        if(!sPointer&&!lPointer){\n            return null;\n        }\n        \n         //找到较短链表,逐个插入到长链表中\n        while(sPointer){\n            if(!lPointer){ //lpointer为null，说明l1>l2\n                sPointer = l2;\n                lPointer = l1;\n                break;\n            }\n            sPointer = sPointer.next;\n            lPointer = lPointer.next;\n        }\n        if(!sPointer){\n            //l1<=l2\n            sPointer = l1;\n            lPointer = l2;\n        }\n    \n        //为了保存插入节点previous的位置，创建一个dummy的节点\n        var dummy = new ListNode(0);\n        dummy.next = lPointer;\n    \n        var prePointer = dummy;\n    \n        var insertnode = sPointer;\n        while(sPointer){\n            if(insertnode.val<=lPointer.val){\n    \n                prePointer.next = insertnode;\n                sPointer = sPointer.next;\n                insertnode.next = lPointer;\n                //短链的指针后移一位，长链不动\n                insertnode = sPointer;\n                prePointer = prePointer.next;\n            }else{\n                if(!lPointer.next){\n                    lPointer.next = sPointer;\n                    break;\n                }\n                //长链后移一位，短链不动\n                prePointer =lPointer;\n                lPointer = lPointer.next;\n            }\n    \n    \n        }\n        return dummy.next;\n    };\n    \n \n  ![merge2sortedlists](/images/merge2sortedlists.png)","source":"_posts/LeetCode-Merge-Two-Sorted-Lists.md","raw":"title: \"LeetCode:Merge Two Sorted Lists\"\ndate: 2015-07-29 10:31:25\ntags: [算法,LeetCode]\n---\n\n##题目\n\n  [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)\n\n   有两个排序好的链表l1和l2，要求是合并为一个列表，并保持列表有序。\n        \n##思路\n    \n   我的想法是先遍历两个链表找到较短的一个，然后把短链表上节点逐个插入到长链表中。\n    \n   然后在网上看别人的代码，其实不用先找到短链。拿一个链表做基准，将另外一个插入就来，只遍历一次就好了。\n\n##实现\n\nJavaScript:\n\n    /**\n     * Definition for singly-linked list.\n     * function ListNode(val) {\n     *     this.val = val;\n     *     this.next = null;\n     * }\n     */\n    /**\n     * @param {ListNode} l1\n     * @param {ListNode} l2\n     * @return {ListNode}\n     */\n    var mergeTwoLists = function(l1, l2) {\n        //定义指针\n        var sPointer = l1,lPointer = l2;\n    \n        //一些特殊情况的处理\n        if(sPointer&&sPointer.val&&lPointer&&lPointer.val===null){\n            return sPointer;\n        }\n        if(sPointer&&sPointer.val===null&&lPointer&&lPointer.val){\n            return lPointer;\n        }\n        if(sPointer&&!lPointer){\n            return sPointer;\n        }\n        if(!sPointer&&lPointer){\n            return lPointer;\n        }\n        if(!sPointer&&!lPointer){\n            return null;\n        }\n        \n         //找到较短链表,逐个插入到长链表中\n        while(sPointer){\n            if(!lPointer){ //lpointer为null，说明l1>l2\n                sPointer = l2;\n                lPointer = l1;\n                break;\n            }\n            sPointer = sPointer.next;\n            lPointer = lPointer.next;\n        }\n        if(!sPointer){\n            //l1<=l2\n            sPointer = l1;\n            lPointer = l2;\n        }\n    \n        //为了保存插入节点previous的位置，创建一个dummy的节点\n        var dummy = new ListNode(0);\n        dummy.next = lPointer;\n    \n        var prePointer = dummy;\n    \n        var insertnode = sPointer;\n        while(sPointer){\n            if(insertnode.val<=lPointer.val){\n    \n                prePointer.next = insertnode;\n                sPointer = sPointer.next;\n                insertnode.next = lPointer;\n                //短链的指针后移一位，长链不动\n                insertnode = sPointer;\n                prePointer = prePointer.next;\n            }else{\n                if(!lPointer.next){\n                    lPointer.next = sPointer;\n                    break;\n                }\n                //长链后移一位，短链不动\n                prePointer =lPointer;\n                lPointer = lPointer.next;\n            }\n    \n    \n        }\n        return dummy.next;\n    };\n    \n \n  ![merge2sortedlists](/images/merge2sortedlists.png)","slug":"LeetCode-Merge-Two-Sorted-Lists","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vg004y8a6b7re5b4sc"},{"title":"LeetCode: Merge Sorted Array","date":"2015-08-07T00:54:00.000Z","_content":"\n##题目\n\n[Merge Sorted Array](https://leetcode.com/problems/merge-sorted-array/)\n\n把两个有序的数组合并成一个，数组1有m个元素，数组2有n个元素。假设数组1有足够的长度（m+n）来容纳数组1和数组2，求合并后的数组1.\n\n##思路\n\n因为不能用额外的存储空间，考虑用类似选择排序的方式来重新生成nums1.\n\n即，原nums1的最大值和num2的最大值比较，大者放到新nums1[m+n-1]位置。\n并且指针向前移一位，继续比较原nums1和num2的最大值，把大的放到新nums1[m+n-2]位置，直到一个数组的指针已经到头了。\n\n\n##实现\n\nJavaScript:\n\n        /**\n         * @param {number[]} nums1\n         * @param {number} m\n         * @param {number[]} nums2\n         * @param {number} n\n         * @return {void} Do not return anything, modify nums1 in-place instead.\n         */\n        var merge = function(nums1, m, nums2, n) {\n        \n            var k = 0,i= 0,j=0;\n        \n            if(m===0&&n===0){\n                nums1.length = 0;\n                return nums1;\n            }\n            if(n===0){\n                nums1.length = m;\n                return nums1;\n            }\n            if(m===0){\n                for(;i<n;i++){\n                    nums1[i] = nums2[i];\n                }\n                nums1.length=n;\n                return nums1;\n            }\n            //i指向原nums1中最大的数，j指向nums2中最大的数\n            while(i<m&&j<n){\n                //把较大的数放在nums1[m+n-1-k]中\n                if(nums1[m-1-i]>=nums2[n-1-j]){\n                    nums1[m+n-1-k]  = nums1[m-1-i];\n                    i++;\n                }else{\n                    nums1[m+n-1-k]  = nums2[n-1-j];\n                    j++;\n                }\n                k++;\n            }\n            if(i===m){\n                while(j<n){\n                    nums1[m+n-1-k] = nums2[n-1-j];\n                    j++;\n                    k++;\n                }\n            }\n        };\n\n\n##耗时\n\n ![mergesortedarray](/images/mergesortedarray.png)\n ","source":"_posts/LeetCode-Merge-Sorted-Array.md","raw":"title: \"LeetCode: Merge Sorted Array\"\ndate: 2015-08-07 08:54:00\ntags: [算法,LeetCode]\n---\n\n##题目\n\n[Merge Sorted Array](https://leetcode.com/problems/merge-sorted-array/)\n\n把两个有序的数组合并成一个，数组1有m个元素，数组2有n个元素。假设数组1有足够的长度（m+n）来容纳数组1和数组2，求合并后的数组1.\n\n##思路\n\n因为不能用额外的存储空间，考虑用类似选择排序的方式来重新生成nums1.\n\n即，原nums1的最大值和num2的最大值比较，大者放到新nums1[m+n-1]位置。\n并且指针向前移一位，继续比较原nums1和num2的最大值，把大的放到新nums1[m+n-2]位置，直到一个数组的指针已经到头了。\n\n\n##实现\n\nJavaScript:\n\n        /**\n         * @param {number[]} nums1\n         * @param {number} m\n         * @param {number[]} nums2\n         * @param {number} n\n         * @return {void} Do not return anything, modify nums1 in-place instead.\n         */\n        var merge = function(nums1, m, nums2, n) {\n        \n            var k = 0,i= 0,j=0;\n        \n            if(m===0&&n===0){\n                nums1.length = 0;\n                return nums1;\n            }\n            if(n===0){\n                nums1.length = m;\n                return nums1;\n            }\n            if(m===0){\n                for(;i<n;i++){\n                    nums1[i] = nums2[i];\n                }\n                nums1.length=n;\n                return nums1;\n            }\n            //i指向原nums1中最大的数，j指向nums2中最大的数\n            while(i<m&&j<n){\n                //把较大的数放在nums1[m+n-1-k]中\n                if(nums1[m-1-i]>=nums2[n-1-j]){\n                    nums1[m+n-1-k]  = nums1[m-1-i];\n                    i++;\n                }else{\n                    nums1[m+n-1-k]  = nums2[n-1-j];\n                    j++;\n                }\n                k++;\n            }\n            if(i===m){\n                while(j<n){\n                    nums1[m+n-1-k] = nums2[n-1-j];\n                    j++;\n                    k++;\n                }\n            }\n        };\n\n\n##耗时\n\n ![mergesortedarray](/images/mergesortedarray.png)\n ","slug":"LeetCode-Merge-Sorted-Array","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vi00518a6b4hs4w013"},{"title":"LeetCode:Maximum Depth of Binary Tree","date":"2015-07-23T02:37:29.000Z","_content":"\n##题目来源\n\n[查找二叉树的最大深度](https://leetcode.com/problems/maximum-depth-of-binary-tree/)\n\n##思路\n二叉树的最大深度，等于根节点的深度。根节点的深度等于左子树和右子树深度的较大者。\n\n所以这个题可以递归遍历每一个节点的深度。\n\n##实现\n\nJavaScript:\n\n        /**\n         * Definition for a binary tree node.\n         * function TreeNode(val) {\n         *     this.val = val;\n         *     this.left = this.right = null;\n         * }\n         */\n        /**\n         * @param {TreeNode} root\n         * @return {number}\n         */\n        var maxDepth = function(root) {\n            function findDepth(node,currentDepth){\n                if(node!==null){\n                    currentDepth++;\n                    //每个节点的深度，等于左深度和右深度的较大者\n                    var leftDepth =  findDepth(node.left,currentDepth);\n                    var rightDepth = findDepth(node.right,currentDepth);\n                    return leftDepth>rightDepth?leftDepth:rightDepth;\n                }else{\n                    return currentDepth;\n                }\n            }\n            //返回根节点的深度\n            return findDepth(root,0);\n        };\n        \n        \n![MaxDepth](/images/maxdepth.png)        ","source":"_posts/LeetCode-Maximum-Depth-of-Binary-Tree.md","raw":"title: \"LeetCode:Maximum Depth of Binary Tree\"\ndate: 2015-07-23 10:37:29\ntags: [算法,LeetCode]\n---\n\n##题目来源\n\n[查找二叉树的最大深度](https://leetcode.com/problems/maximum-depth-of-binary-tree/)\n\n##思路\n二叉树的最大深度，等于根节点的深度。根节点的深度等于左子树和右子树深度的较大者。\n\n所以这个题可以递归遍历每一个节点的深度。\n\n##实现\n\nJavaScript:\n\n        /**\n         * Definition for a binary tree node.\n         * function TreeNode(val) {\n         *     this.val = val;\n         *     this.left = this.right = null;\n         * }\n         */\n        /**\n         * @param {TreeNode} root\n         * @return {number}\n         */\n        var maxDepth = function(root) {\n            function findDepth(node,currentDepth){\n                if(node!==null){\n                    currentDepth++;\n                    //每个节点的深度，等于左深度和右深度的较大者\n                    var leftDepth =  findDepth(node.left,currentDepth);\n                    var rightDepth = findDepth(node.right,currentDepth);\n                    return leftDepth>rightDepth?leftDepth:rightDepth;\n                }else{\n                    return currentDepth;\n                }\n            }\n            //返回根节点的深度\n            return findDepth(root,0);\n        };\n        \n        \n![MaxDepth](/images/maxdepth.png)        ","slug":"LeetCode-Maximum-Depth-of-Binary-Tree","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vk00548a6bg532301q"},{"title":"LeetCode:Longest Common Prefix","date":"2015-08-09T05:52:02.000Z","_content":"\n##题目\n\n   [LeetCode:Longest Common Prefix](https://leetcode.com/problems/longest-common-prefix/)\n   \n   找出一个字符串数组中所有元素的最长公共前缀。\n   \n##思路\n   \n   先找出这个数组中最短的字符串，然后再遍历数组比较这个最短字符串是否当前元素的前缀。\n   如果是的话，比较下一个数组元素。\n   如果不是的话，最短字符串截断最后一位再和当前数组数组元素比较，直到最短字符串长度为0.\n\n##实现\n\nJavaScript:\n\n\n        /**\n         * @param {string[]} strs\n         * @return {string}\n         */\n        var longestCommonPrefix = function(strs) {\n            if(strs.length===0){\n                return \"\";\n            }\n            var shortestStr=strs[0];\n            //找出最短的字符串\n            for(var i =1; i<strs.length;i++){\n                if(strs[i].length<shortestStr.length){\n                    shortestStr = strs[i]\n                }\n            }\n            //判断最短字符串是否是当前元素的前缀\n            for(i=0;i<strs.length;i++){\n                while(shortestStr.length>0) {\n                    if (strs[i].indexOf(shortestStr) === 0) {\n                        break;\n                    } else {\n                        shortestStr = shortestStr.substring(0,shortestStr.length-1);\n                    }\n                }\n            }\n            return shortestStr;\n        };\n     \n        \n##耗时   \n\n![Runtime](/images/longestcommonprefix.png)","source":"_posts/LeetCode-Longest-Common-Prefix.md","raw":"title: \"LeetCode:Longest Common Prefix\"\ndate: 2015-08-09 13:52:02\ntags: [LeetCode,算法]\n---\n\n##题目\n\n   [LeetCode:Longest Common Prefix](https://leetcode.com/problems/longest-common-prefix/)\n   \n   找出一个字符串数组中所有元素的最长公共前缀。\n   \n##思路\n   \n   先找出这个数组中最短的字符串，然后再遍历数组比较这个最短字符串是否当前元素的前缀。\n   如果是的话，比较下一个数组元素。\n   如果不是的话，最短字符串截断最后一位再和当前数组数组元素比较，直到最短字符串长度为0.\n\n##实现\n\nJavaScript:\n\n\n        /**\n         * @param {string[]} strs\n         * @return {string}\n         */\n        var longestCommonPrefix = function(strs) {\n            if(strs.length===0){\n                return \"\";\n            }\n            var shortestStr=strs[0];\n            //找出最短的字符串\n            for(var i =1; i<strs.length;i++){\n                if(strs[i].length<shortestStr.length){\n                    shortestStr = strs[i]\n                }\n            }\n            //判断最短字符串是否是当前元素的前缀\n            for(i=0;i<strs.length;i++){\n                while(shortestStr.length>0) {\n                    if (strs[i].indexOf(shortestStr) === 0) {\n                        break;\n                    } else {\n                        shortestStr = shortestStr.substring(0,shortestStr.length-1);\n                    }\n                }\n            }\n            return shortestStr;\n        };\n     \n        \n##耗时   \n\n![Runtime](/images/longestcommonprefix.png)","slug":"LeetCode-Longest-Common-Prefix","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vl00578a6bkr2i6sjy"},{"title":"LeetCode:Isomorphic Strings","date":"2015-07-27T02:26:51.000Z","_content":"\n##题目\n[Isomorphic Strings](https://leetcode.com/problems/isomorphic-strings/)\n\n判断两个字符串是否为同型构造的字符串。\n\n比如:\n\nGiven \"egg\", \"add\", return true.\n\nGiven \"foo\", \"bar\", return false.\n\nGiven \"paper\", \"title\", return true.\n\n如果s字符串的字母被替换可以得到t字符串的话，则说明s和t字符串的构造是相同的。\n\n##思路\n\n按照同形构造的定义来，如果字母替换可以得到目标字符串，我们先建一个map来存储s和t/t和s字母的对应关系。\n然后分别遍历s和t的字符串，只要出现当前字母和map表的字母不匹配的，就说明s和t不是同源的字母。\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {string} s\n        * @param {string} t\n        * @return {boolean}\n        */\n       var isIsomorphic = function(s, t) {\n           if(s===t){\n               return true;\n           }else{\n               var sArray= s.split(\"\"),tArray = t.split(\"\");\n               var map = {};\n       \n               for(var i=0;i< sArray.length;i++){\n                   //找出t和s 字母的匹配关系\n                   if(!map[tArray[i]]){\n                       map[tArray[i]] = sArray[i];\n                   }else{\n                       //如果当前字母和map中取出的字母不匹配，则返回false\n                       if(sArray[i]!==map[tArray[i]]){\n                           return false;\n                       }\n                   }\n               }\n               //清空map，反向查找匹配关系\n               map ={};\n               for( i=0;i< tArray.length;i++){\n                   //找出s和t字母的匹配关系\n                   if(!map[sArray[i]]){\n                       map[sArray[i]] = tArray[i];\n                   }else if(tArray[i]!==map[sArray[i]]){\n                       //如果当前字母和map中取出的字母不匹配，则返回false\n                       return false;\n                   }\n       \n               }\n               return true;\n           }\n       };\n       \n##结果\n![isomorphicstrings](/images/isomorphicstring.png)\n\n\n##PS\n一开始想的是replace的方法，但是后面验证出来发现输入的字符串有各种需要转义的特殊字符(\\*&$')。","source":"_posts/LeetCode-Isomorphic-String.md","raw":"title: \"LeetCode:Isomorphic Strings\"\ndate: 2015-07-27 10:26:51\ntags: [算法, LeetCode]\n---\n\n##题目\n[Isomorphic Strings](https://leetcode.com/problems/isomorphic-strings/)\n\n判断两个字符串是否为同型构造的字符串。\n\n比如:\n\nGiven \"egg\", \"add\", return true.\n\nGiven \"foo\", \"bar\", return false.\n\nGiven \"paper\", \"title\", return true.\n\n如果s字符串的字母被替换可以得到t字符串的话，则说明s和t字符串的构造是相同的。\n\n##思路\n\n按照同形构造的定义来，如果字母替换可以得到目标字符串，我们先建一个map来存储s和t/t和s字母的对应关系。\n然后分别遍历s和t的字符串，只要出现当前字母和map表的字母不匹配的，就说明s和t不是同源的字母。\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {string} s\n        * @param {string} t\n        * @return {boolean}\n        */\n       var isIsomorphic = function(s, t) {\n           if(s===t){\n               return true;\n           }else{\n               var sArray= s.split(\"\"),tArray = t.split(\"\");\n               var map = {};\n       \n               for(var i=0;i< sArray.length;i++){\n                   //找出t和s 字母的匹配关系\n                   if(!map[tArray[i]]){\n                       map[tArray[i]] = sArray[i];\n                   }else{\n                       //如果当前字母和map中取出的字母不匹配，则返回false\n                       if(sArray[i]!==map[tArray[i]]){\n                           return false;\n                       }\n                   }\n               }\n               //清空map，反向查找匹配关系\n               map ={};\n               for( i=0;i< tArray.length;i++){\n                   //找出s和t字母的匹配关系\n                   if(!map[sArray[i]]){\n                       map[sArray[i]] = tArray[i];\n                   }else if(tArray[i]!==map[sArray[i]]){\n                       //如果当前字母和map中取出的字母不匹配，则返回false\n                       return false;\n                   }\n       \n               }\n               return true;\n           }\n       };\n       \n##结果\n![isomorphicstrings](/images/isomorphicstring.png)\n\n\n##PS\n一开始想的是replace的方法，但是后面验证出来发现输入的字符串有各种需要转义的特殊字符(\\*&$')。","slug":"LeetCode-Isomorphic-String","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vm005a8a6b6a3mv4dm"},{"title":"LeetCode:Intersection of Two Linked Lists","date":"2015-07-24T02:47:40.000Z","_content":"\n##题目\n\n[查找两个链表相同的尾链](https://leetcode.com/problems/intersection-of-two-linked-lists/)\n\n    A:          a1 → a2\n                       ↘\n                         c1 → c2 → c3\n                       ↗            \n    B:     b1 → b2 → b3\n    \n *如果两个链表没有相同尾链，返回null。\n *两个链表在输出时应保持原来的结构。\n *链表结构中没有循环。\n *时间复杂度要求O(n),空间复杂度要求O(1)\n \n##思路\n\n 先取A，B链的长度，找出哪个是短链，哪个是长链。\n \n 然后找到长链尾部和短链长度相同的位置，开始比较它和短链是否相等。\n \n 如果当前节点不相等，则两者后移一位继续比较，直到找到第一个相等的节点，记录之。\n \n 如果当前节点不相等，但前一个节点相等，说明没有相同的尾链，返回null。\n \n \n## 实现\n\nJavaScript:\n\n        /**\n         * @param {ListNode} headA\n         * @param {ListNode} headB\n         * @return {ListNode}\n         */\n        var getIntersectionNode = function(headA, headB) {\n        \n            if(headA&&headB){\n                var node=headA,aLength=1,bLength=1;\n                while(node.next){\n                    aLength++;\n                    node = node.next;\n                }\n                node= headB;\n                while(node.next){\n                    bLength++;\n                    node=node.next;\n                }\n                var pointer1 ,pointer2;\n                //将ab链截取到尾部位数相同\n                if(aLength > bLength){\n                    pointer1 = headB;\n                    pointer2 = headA;\n                    for(var i = bLength;i<aLength;i++){\n                        pointer2 = pointer2.next;\n                    }\n                }else if(aLength<bLength){\n                    pointer1 = headA;\n                    pointer2 = headB;\n                    for(i = aLength;i<bLength;i++){\n                        pointer2 = pointer2.next;\n                    }\n                }else{\n                    pointer1 = headA;\n                    pointer2 = headB;\n                }\n        \n                node = null;\n                //保留上次比较结果\n                var sameFlag = false;\n                while(pointer1){\n        \n                    if(pointer1.val===pointer2.val){\n                        //当前相等，继续比较。\n                        // 如果上次比较不相等，则赋值node，说明是第一个相等的节点\n                        if(!sameFlag){\n                            node = pointer1;\n                        }\n                        sameFlag=true;\n                        pointer1 = pointer1.next;\n                        pointer2 = pointer2.next;\n                        continue;\n        \n                    }\n                    if(pointer1.val!==pointer2.val){\n                        //当前不相等，判断上次比较是否相等。\n                        if(sameFlag){\n                            //上次比较相等，则直接返回null，说明没有相同的尾链\n                            return null;\n                        }else{\n                            //上次比较不相等，则继续比较\n                            pointer1 = pointer1.next;\n                            pointer2 = pointer2.next;\n                            sameFlag=false;\n                            continue;\n                        }\n        \n                    }\n                }\n                return node;\n        \n            }else{\n                return null;\n            }\n        };\n \n \n \n ![intersection](/images/intersection.png)","source":"_posts/LeetCode-Intersection-of-Two-Linked-Lists.md","raw":"title: \"LeetCode:Intersection of Two Linked Lists\"\ndate: 2015-07-24 10:47:40\ntags: [算法, LeetCode]\n---\n\n##题目\n\n[查找两个链表相同的尾链](https://leetcode.com/problems/intersection-of-two-linked-lists/)\n\n    A:          a1 → a2\n                       ↘\n                         c1 → c2 → c3\n                       ↗            \n    B:     b1 → b2 → b3\n    \n *如果两个链表没有相同尾链，返回null。\n *两个链表在输出时应保持原来的结构。\n *链表结构中没有循环。\n *时间复杂度要求O(n),空间复杂度要求O(1)\n \n##思路\n\n 先取A，B链的长度，找出哪个是短链，哪个是长链。\n \n 然后找到长链尾部和短链长度相同的位置，开始比较它和短链是否相等。\n \n 如果当前节点不相等，则两者后移一位继续比较，直到找到第一个相等的节点，记录之。\n \n 如果当前节点不相等，但前一个节点相等，说明没有相同的尾链，返回null。\n \n \n## 实现\n\nJavaScript:\n\n        /**\n         * @param {ListNode} headA\n         * @param {ListNode} headB\n         * @return {ListNode}\n         */\n        var getIntersectionNode = function(headA, headB) {\n        \n            if(headA&&headB){\n                var node=headA,aLength=1,bLength=1;\n                while(node.next){\n                    aLength++;\n                    node = node.next;\n                }\n                node= headB;\n                while(node.next){\n                    bLength++;\n                    node=node.next;\n                }\n                var pointer1 ,pointer2;\n                //将ab链截取到尾部位数相同\n                if(aLength > bLength){\n                    pointer1 = headB;\n                    pointer2 = headA;\n                    for(var i = bLength;i<aLength;i++){\n                        pointer2 = pointer2.next;\n                    }\n                }else if(aLength<bLength){\n                    pointer1 = headA;\n                    pointer2 = headB;\n                    for(i = aLength;i<bLength;i++){\n                        pointer2 = pointer2.next;\n                    }\n                }else{\n                    pointer1 = headA;\n                    pointer2 = headB;\n                }\n        \n                node = null;\n                //保留上次比较结果\n                var sameFlag = false;\n                while(pointer1){\n        \n                    if(pointer1.val===pointer2.val){\n                        //当前相等，继续比较。\n                        // 如果上次比较不相等，则赋值node，说明是第一个相等的节点\n                        if(!sameFlag){\n                            node = pointer1;\n                        }\n                        sameFlag=true;\n                        pointer1 = pointer1.next;\n                        pointer2 = pointer2.next;\n                        continue;\n        \n                    }\n                    if(pointer1.val!==pointer2.val){\n                        //当前不相等，判断上次比较是否相等。\n                        if(sameFlag){\n                            //上次比较相等，则直接返回null，说明没有相同的尾链\n                            return null;\n                        }else{\n                            //上次比较不相等，则继续比较\n                            pointer1 = pointer1.next;\n                            pointer2 = pointer2.next;\n                            sameFlag=false;\n                            continue;\n                        }\n        \n                    }\n                }\n                return node;\n        \n            }else{\n                return null;\n            }\n        };\n \n \n \n ![intersection](/images/intersection.png)","slug":"LeetCode-Intersection-of-Two-Linked-Lists","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vn005d8a6buausnorm"},{"title":"LeetCode:Excel Sheet Column Title","date":"2015-07-30T02:34:14.000Z","_content":"\n##题目\n\n[Excel Sheet Column Title](https://leetcode.com/problems/excel-sheet-column-title/)\n\n给定一个正数，求它在excel中对应的标头值。\n\n        1 -> A\n        2 -> B\n        3 -> C\n        ...\n        26 -> Z\n        27 -> AA\n        28 -> AB \n        \nPS:Excel2003版之前最大是255列，2007版最大是16384列，当然这和题目无关。\n\n##思路\n\n这个题目其实是把十进制的数字转化成26进制。想到之前求一个数的二进制是通过不断除2的方式，这个也一样。\n\n只要除以26之后得到商比26大就拿这商除26，并把每次除法的余数保存起来，直到商为0，将余数们反向输出就是26进制表达了。\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {number} n\n        * @return {string}\n        */\n       var convertToTitle = function(n) {\n            var cs=[];\n       \n           while(n>26){\n               if(n%26!==0){\n                    //将余数对应的字母插入数组头部\n                   cs.unshift(String.fromCharCode(n%26+64));\n                   n = Math.floor(n /26);\n               }else{\n                   //如果刚好整除，那么商减1，余数为26\n                   cs.unshift(String.fromCharCode(90));\n                   n = Math.floor(n /26) -1;\n       \n               }\n           }\n           cs.unshift(String.fromCharCode(n+64));\n           return cs.toString().replace(/\\,/g,\"\");\n       };\n       \n  \n   ![excelcolumntotile](/images/excelcolumntotitle.png)    \n        \n        \n        ","source":"_posts/LeetCode-Excel-Sheet-Column-Title.md","raw":"title: \"LeetCode:Excel Sheet Column Title\"\ndate: 2015-07-30 10:34:14\ntags: [算法,LeetCode]\n---\n\n##题目\n\n[Excel Sheet Column Title](https://leetcode.com/problems/excel-sheet-column-title/)\n\n给定一个正数，求它在excel中对应的标头值。\n\n        1 -> A\n        2 -> B\n        3 -> C\n        ...\n        26 -> Z\n        27 -> AA\n        28 -> AB \n        \nPS:Excel2003版之前最大是255列，2007版最大是16384列，当然这和题目无关。\n\n##思路\n\n这个题目其实是把十进制的数字转化成26进制。想到之前求一个数的二进制是通过不断除2的方式，这个也一样。\n\n只要除以26之后得到商比26大就拿这商除26，并把每次除法的余数保存起来，直到商为0，将余数们反向输出就是26进制表达了。\n\n##实现\n\nJavaScript:\n\n       /**\n        * @param {number} n\n        * @return {string}\n        */\n       var convertToTitle = function(n) {\n            var cs=[];\n       \n           while(n>26){\n               if(n%26!==0){\n                    //将余数对应的字母插入数组头部\n                   cs.unshift(String.fromCharCode(n%26+64));\n                   n = Math.floor(n /26);\n               }else{\n                   //如果刚好整除，那么商减1，余数为26\n                   cs.unshift(String.fromCharCode(90));\n                   n = Math.floor(n /26) -1;\n       \n               }\n           }\n           cs.unshift(String.fromCharCode(n+64));\n           return cs.toString().replace(/\\,/g,\"\");\n       };\n       \n  \n   ![excelcolumntotile](/images/excelcolumntotitle.png)    \n        \n        \n        ","slug":"LeetCode-Excel-Sheet-Column-Title","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vo005g8a6bcfahj8h9"},{"title":"LeetCode:Count and Say","date":"2015-08-06T02:53:41.000Z","_content":"\n##题目\n\n[Count And Say](https://leetcode.com/problems/count-and-say/)\n\nThe count-and-say sequence is the sequence of integers beginning as follows:\n1, 11, 21, 1211, 111221, ...\n\n1 is read off as \"one 1\" or 11.\n11 is read off as \"two 1s\" or 21.\n21 is read off as \"one 2, then one 1\" or 1211.\nGiven an integer n, generate the nth sequence.\n\nNote: The sequence of integers will be represented as a string.\n\n##思路\n递归的实现，找出CountAndSay(n)和CountAndSay(n-1)的关系。\n比如1211拿一个数组记录下有多少个数组。\n\n##实现\n\nJavaScript:\n\n        /**\n         * @param {number} n\n         * @return {string}\n         */\n        var countAndSay = function(n) {\n            if(n===0) return \"\";\n            if(n===1) return \"1\";\n            if(n===2) return \"11\";\n        \n            var preStrArray = countAndSay(n-1).split(\"\");\n            var tempArray=[];\n        \n            tempArray[0] = 1;\n            tempArray[1] = preStrArray[0];\n            for(var i = 1; i<preStrArray.length-1;i++){\n                if(preStrArray[i]!==preStrArray[i-1]){\n                    tempArray.push(1);\n                    tempArray.push(preStrArray[i]);\n                }else{\n                    tempArray[tempArray.length-2]++;\n                }\n            }\n            if(preStrArray[i]!==preStrArray[i-1]){\n                tempArray.push(1);\n                tempArray.push(preStrArray[i]);\n            }else{\n                tempArray[tempArray.length-2] ++;\n            }\n            return tempArray.toString().replace(/,/g,\"\");\n        }\n\n##耗时\n\n![countandsay.png](/images/countandsay.png)","source":"_posts/LeetCode-Count-and-Say.md","raw":"title: \"LeetCode:Count and Say\"\ndate: 2015-08-06 10:53:41\ntags: [算法, LeetCode]\n---\n\n##题目\n\n[Count And Say](https://leetcode.com/problems/count-and-say/)\n\nThe count-and-say sequence is the sequence of integers beginning as follows:\n1, 11, 21, 1211, 111221, ...\n\n1 is read off as \"one 1\" or 11.\n11 is read off as \"two 1s\" or 21.\n21 is read off as \"one 2, then one 1\" or 1211.\nGiven an integer n, generate the nth sequence.\n\nNote: The sequence of integers will be represented as a string.\n\n##思路\n递归的实现，找出CountAndSay(n)和CountAndSay(n-1)的关系。\n比如1211拿一个数组记录下有多少个数组。\n\n##实现\n\nJavaScript:\n\n        /**\n         * @param {number} n\n         * @return {string}\n         */\n        var countAndSay = function(n) {\n            if(n===0) return \"\";\n            if(n===1) return \"1\";\n            if(n===2) return \"11\";\n        \n            var preStrArray = countAndSay(n-1).split(\"\");\n            var tempArray=[];\n        \n            tempArray[0] = 1;\n            tempArray[1] = preStrArray[0];\n            for(var i = 1; i<preStrArray.length-1;i++){\n                if(preStrArray[i]!==preStrArray[i-1]){\n                    tempArray.push(1);\n                    tempArray.push(preStrArray[i]);\n                }else{\n                    tempArray[tempArray.length-2]++;\n                }\n            }\n            if(preStrArray[i]!==preStrArray[i-1]){\n                tempArray.push(1);\n                tempArray.push(preStrArray[i]);\n            }else{\n                tempArray[tempArray.length-2] ++;\n            }\n            return tempArray.toString().replace(/,/g,\"\");\n        }\n\n##耗时\n\n![countandsay.png](/images/countandsay.png)","slug":"LeetCode-Count-and-Say","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vp005j8a6b3sodzuh0"},{"title":"IOS 模拟器回到主页","date":"2015-09-17T08:24:49.000Z","_content":"\nIOS 的模拟器上，没有HOME键，如果需要返回主页，按键盘shift+cmd+h\n\n在模拟器上实现缩放的功能比较费劲（按住option键），建议真机上试。","source":"_posts/IOS-模拟器回到主页.md","raw":"title: \"IOS 模拟器回到主页\"\ndate: 2015-09-17 16:24:49\ntags: [IOS,工具]\n---\n\nIOS 的模拟器上，没有HOME键，如果需要返回主页，按键盘shift+cmd+h\n\n在模拟器上实现缩放的功能比较费劲（按住option键），建议真机上试。","slug":"IOS-模拟器回到主页","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vr005m8a6bclzbvzix"},{"title":"Git 部分提交","date":"2015-08-20T09:39:51.000Z","_content":"\n##场景\n\n修改了四个文件，分别涉及到两个功能，需要把其中两个文件的修改当做一个功能的commit，另外两个文件的修改当做另一个功能的commit。\n\n但如果要用git add 的命令，会让当前所有的修改都加入commit。\n\n怎么办呢？\n\n**用git stash 命令**\n\n##步骤\n\n1 用git add 命令添加第一个commit需要的文件\n    \n        git add file1\n    \n        git add file2\n    \n2 隐藏其他修改，git stash 的参数中 -k 开关告诉仓库保持文件的完整  -u 开关告诉仓库包括无路径的文件(那些新的和未添加到git的)\n这时git status就只能看到file1 和file2，并且当你切换到实际的文件目录，file3 和file4的修改也随之不见。\n   \n        git stash -k -u\n    \n     \n3 提交第一个commit\n    \n        git commit -m 'submit function1'\n        \n4 恢复之前隐藏的修改,这时再git status，file3和file4的修改又回来。\n        \n        git stash pop\n          \n5 提交第二个commit\n    \n        git commit -m 'submit function2'\n        \n        \n##参考\n   [http://www.open-open.com/lib/view/open1413852243809.html](http://www.open-open.com/lib/view/open1413852243809.html)\n        \n        \n        \n        \n\n\n","source":"_posts/Git-部分提交.md","raw":"title: \"Git 部分提交\"\ndate: 2015-08-20 17:39:51\ntags: [工具, git]\n---\n\n##场景\n\n修改了四个文件，分别涉及到两个功能，需要把其中两个文件的修改当做一个功能的commit，另外两个文件的修改当做另一个功能的commit。\n\n但如果要用git add 的命令，会让当前所有的修改都加入commit。\n\n怎么办呢？\n\n**用git stash 命令**\n\n##步骤\n\n1 用git add 命令添加第一个commit需要的文件\n    \n        git add file1\n    \n        git add file2\n    \n2 隐藏其他修改，git stash 的参数中 -k 开关告诉仓库保持文件的完整  -u 开关告诉仓库包括无路径的文件(那些新的和未添加到git的)\n这时git status就只能看到file1 和file2，并且当你切换到实际的文件目录，file3 和file4的修改也随之不见。\n   \n        git stash -k -u\n    \n     \n3 提交第一个commit\n    \n        git commit -m 'submit function1'\n        \n4 恢复之前隐藏的修改,这时再git status，file3和file4的修改又回来。\n        \n        git stash pop\n          \n5 提交第二个commit\n    \n        git commit -m 'submit function2'\n        \n        \n##参考\n   [http://www.open-open.com/lib/view/open1413852243809.html](http://www.open-open.com/lib/view/open1413852243809.html)\n        \n        \n        \n        \n\n\n","slug":"Git-部分提交","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vt005q8a6b0gipv00m"},{"title":"Debug Grunt In Webstorm","date":"2015-07-30T08:24:49.000Z","_content":"\n##Steps\n\n  1 Run  ->  Edit Configuration\n \n  2 Press Add button (+)\n  \n  3 Type the configurations\n  \n  ![gruntdebuginwebstorm](/images/gruntdebuginwebstorm.png)\n\n  4 Set breakpoint where you want \n  \n  5 Press Shift+Ctrl+D to debug\n","source":"_posts/Debug-Grunt-in-Webstorm.md","raw":"title: \"Debug Grunt In Webstorm\"\ndate: 2015-07-30 16:24:49\ntags: [webstorm]\n---\n\n##Steps\n\n  1 Run  ->  Edit Configuration\n \n  2 Press Add button (+)\n  \n  3 Type the configurations\n  \n  ![gruntdebuginwebstorm](/images/gruntdebuginwebstorm.png)\n\n  4 Set breakpoint where you want \n  \n  5 Press Shift+Ctrl+D to debug\n","slug":"Debug-Grunt-in-Webstorm","published":1,"updated":"2015-12-27T13:37:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vu005t8a6bubhghp42"},{"title":"Darling，我想去死","date":"2015-07-24T03:33:36.000Z","_content":"\n过马路，我对男朋友说，“Darling,我好想去死~”\n\n男朋友拉着我的手：“让我先砍掉你的一条腿好不好？”。\n\n...\n\n早上出门去上班，我磨磨蹭蹭走得很慢，嘴上嘟哝：“Darling，我好想去死~”\n\n“让我先砍掉你的一条腿好不好?”\n\n“为什么你那么执着于砍掉我的腿？”\n\n“没为什么，我就是想砍掉你的一条腿。”\n\n","source":"_posts/Darling,我好想去死.md","raw":"title: \"Darling，我想去死\"\ndate: 2015-07-24 11:33:36\ntags: [日常]\n---\n\n过马路，我对男朋友说，“Darling,我好想去死~”\n\n男朋友拉着我的手：“让我先砍掉你的一条腿好不好？”。\n\n...\n\n早上出门去上班，我磨磨蹭蹭走得很慢，嘴上嘟哝：“Darling，我好想去死~”\n\n“让我先砍掉你的一条腿好不好?”\n\n“为什么你那么执着于砍掉我的腿？”\n\n“没为什么，我就是想砍掉你的一条腿。”\n\n","slug":"Darling,我好想去死","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vv005v8a6bus5hfyc0"},{"title":"Chrome 调试技巧","date":"2015-07-15T02:54:54.000Z","_content":"\n在chrome调试的时候，有些技巧能大大提高自己调试的效率。不断学习总结中。\n\n  * command + p  文件查找\n  * shift + command + p 文件内函数查找\n  * 在Elements页，上下键遍历页面元素，左右键进行元素展开\n  \n \n[Timeline 的使用](http://judastree.github.io/2015/07/21/Chrome-timeline-%E6%A3%80%E6%B5%8B%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD/)\n\n  \n  Profiles,Audits一直没有机会用，以后找时间研究下这个吧。\n","source":"_posts/Chrome调试技巧.md","raw":"title: \"Chrome 调试技巧\"\ndate: 2015-07-15 10:54:54\ntags: [工具]\n---\n\n在chrome调试的时候，有些技巧能大大提高自己调试的效率。不断学习总结中。\n\n  * command + p  文件查找\n  * shift + command + p 文件内函数查找\n  * 在Elements页，上下键遍历页面元素，左右键进行元素展开\n  \n \n[Timeline 的使用](http://judastree.github.io/2015/07/21/Chrome-timeline-%E6%A3%80%E6%B5%8B%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD/)\n\n  \n  Profiles,Audits一直没有机会用，以后找时间研究下这个吧。\n","slug":"Chrome调试技巧","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vw005x8a6byk28qp88"},{"title":"Chrome和Chromium的区别","date":"2015-07-20T04:06:10.000Z","_content":"\n昨天下了QQ浏览器来用，查看关于发现QQ浏览器的内核是Chromium的。那个Chrome和Chromium是什么关系呢？\n\nchromium是谷歌的开源项目，有很多开发者共同的去改进，谷歌收集改进后会发布安装包，也就是chromium，然后会将chromium的东西更新到chrome中，chrome不是开源项目，而在chrome内的更新也有一个过程，先更新到chrome的金丝雀版（未验证bug），接着到dev版（大问题已经验证），接着beta（小问题已经验证），都没问题了，再更新到稳定版。\n\nChrome浏览器各版本的特点：\n1、Chromium\nChromium是Google为发展Chrome浏览器而启动的开源项目，Chromium相当于Chrome的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在Chromium上实现，待验证后才会应用在Chrome上，故Chrome的功能会相对落后但较稳定（实际上稳定性也差不多）；Chromium的更新速度很快，每隔数小时即有新的开发版本。\n2、Chrome dev\n基于最新的Chromium Build，经常每周就更新推出新功能；与Beta版十分相似，但稳定性较差，不适合公共使用。\n3、Chrome beta\n基于Chrome dev；按月更新；崩溃等重大故障较少发生，功能比dev更加完善。\n4、Chrome stable\n\n然后...然后我瞬间找到了我的QQ浏览器为什么一直崩溃he的原因了。","source":"_posts/Chrome和Chromium的区别.md","raw":"title: \"Chrome和Chromium的区别\"\ndate: 2015-07-20 12:06:10\ntags: [工具]\n---\n\n昨天下了QQ浏览器来用，查看关于发现QQ浏览器的内核是Chromium的。那个Chrome和Chromium是什么关系呢？\n\nchromium是谷歌的开源项目，有很多开发者共同的去改进，谷歌收集改进后会发布安装包，也就是chromium，然后会将chromium的东西更新到chrome中，chrome不是开源项目，而在chrome内的更新也有一个过程，先更新到chrome的金丝雀版（未验证bug），接着到dev版（大问题已经验证），接着beta（小问题已经验证），都没问题了，再更新到稳定版。\n\nChrome浏览器各版本的特点：\n1、Chromium\nChromium是Google为发展Chrome浏览器而启动的开源项目，Chromium相当于Chrome的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在Chromium上实现，待验证后才会应用在Chrome上，故Chrome的功能会相对落后但较稳定（实际上稳定性也差不多）；Chromium的更新速度很快，每隔数小时即有新的开发版本。\n2、Chrome dev\n基于最新的Chromium Build，经常每周就更新推出新功能；与Beta版十分相似，但稳定性较差，不适合公共使用。\n3、Chrome beta\n基于Chrome dev；按月更新；崩溃等重大故障较少发生，功能比dev更加完善。\n4、Chrome stable\n\n然后...然后我瞬间找到了我的QQ浏览器为什么一直崩溃he的原因了。","slug":"Chrome和Chromium的区别","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vx005z8a6b2hxh0j31"},{"title":"Chrome timeline 检测页面性能","date":"2015-07-21T04:13:58.000Z","_content":"\n还是先占个坑。\n\n今天要做页面性能优化，终于有机会用到这个了。\n\n参考资料:[Performance profiling with the timeline](https://developer.chrome.com/devtools/docs/timeline)\n\n","source":"_posts/Chrome-timeline-检测页面性能.md","raw":"title: \"Chrome timeline 检测页面性能\"\ndate: 2015-07-21 12:13:58\ntags: [工具]\n---\n\n还是先占个坑。\n\n今天要做页面性能优化，终于有机会用到这个了。\n\n参考资料:[Performance profiling with the timeline](https://developer.chrome.com/devtools/docs/timeline)\n\n","slug":"Chrome-timeline-检测页面性能","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1vy00618a6bxxjteg7l"},{"title":"Android怎么打Log","date":"2015-07-14T01:36:07.000Z","_content":"\nandroid 中有五种类型的 Log .\n\n    VERBOSE 类型调试信息，verbose啰嗦的意思 \n    DEBUG 类型调试信息, debug调试信息 \n    INFO  类型调试信息, 一般提示性的消息information \n    WARN  类型调试信息，warning警告类型信息 \n    ERROR 类型调试信息，错误信息\n     \n那么怎么在logcat中打印出这几种类型的日志呢。\n\nAndroid.util.Log类提供如下对应的方法。\n        \n        Log.v(String tag, String msg); //VERBOSE \n        Log.d(String tag, String msg); //DEBUG \n        Log.i(String tag, String msg); //INFO \n        Log.w(String tag, String msg); //WARN \n        Log.e(String tag, String msg); //ERROR \n   \nTag为调试信息标签名称，msg为添加的调试信息 。\n\n这样你可以根据tag，在DDMS中对不同类型的日志进行过滤查看。\n\n但真正的项目中，我们会在 debug 的版本中输出 log，而在 release 版本的产品中关闭 log 的输出。\n\n要控制日志的输出与否，我们仍需要自己根据当前环境去封装自己的Log类。\n\n比如，在Release 版本的软件上将 DEBUG 置为 false ：\n\n    public class Log {\n     private static final boolean DEBUG = true;\n       \n     public static void v(String tag, String msg) {\n         if(DEBUG) {\n          android.util.Log.v(tag, msg);\n         }\n        }\n        public static void v(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.v(tag, msg, tr);\n            }\n        }\n        public static void d(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.d(tag, msg);\n            }\n        }\n        public static void d(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.d(tag, msg, tr);\n            }\n        }\n        public static void i(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.i(tag, msg);\n            }\n        }\n        public static void i(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.i(tag, msg, tr);\n            }\n        }\n        public static void w(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.w(tag, msg);\n            }\n        }\n        public static void w(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.w(tag, msg, tr);\n            }\n        }\n        public static void w(String tag, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.w(tag, tr);\n            }\n        }\n        public static void e(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.e(tag, msg);\n            }\n        }\n        public static void e(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.e(tag, msg, tr);\n            }\n        }\n    }\n\n\n        ","source":"_posts/Android怎么打Log.md","raw":"title: \"Android怎么打Log\"\ndate: 2015-07-14 09:36:07\ntags: [Android]\n---\n\nandroid 中有五种类型的 Log .\n\n    VERBOSE 类型调试信息，verbose啰嗦的意思 \n    DEBUG 类型调试信息, debug调试信息 \n    INFO  类型调试信息, 一般提示性的消息information \n    WARN  类型调试信息，warning警告类型信息 \n    ERROR 类型调试信息，错误信息\n     \n那么怎么在logcat中打印出这几种类型的日志呢。\n\nAndroid.util.Log类提供如下对应的方法。\n        \n        Log.v(String tag, String msg); //VERBOSE \n        Log.d(String tag, String msg); //DEBUG \n        Log.i(String tag, String msg); //INFO \n        Log.w(String tag, String msg); //WARN \n        Log.e(String tag, String msg); //ERROR \n   \nTag为调试信息标签名称，msg为添加的调试信息 。\n\n这样你可以根据tag，在DDMS中对不同类型的日志进行过滤查看。\n\n但真正的项目中，我们会在 debug 的版本中输出 log，而在 release 版本的产品中关闭 log 的输出。\n\n要控制日志的输出与否，我们仍需要自己根据当前环境去封装自己的Log类。\n\n比如，在Release 版本的软件上将 DEBUG 置为 false ：\n\n    public class Log {\n     private static final boolean DEBUG = true;\n       \n     public static void v(String tag, String msg) {\n         if(DEBUG) {\n          android.util.Log.v(tag, msg);\n         }\n        }\n        public static void v(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.v(tag, msg, tr);\n            }\n        }\n        public static void d(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.d(tag, msg);\n            }\n        }\n        public static void d(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.d(tag, msg, tr);\n            }\n        }\n        public static void i(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.i(tag, msg);\n            }\n        }\n        public static void i(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.i(tag, msg, tr);\n            }\n        }\n        public static void w(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.w(tag, msg);\n            }\n        }\n        public static void w(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.w(tag, msg, tr);\n            }\n        }\n        public static void w(String tag, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.w(tag, tr);\n            }\n        }\n        public static void e(String tag, String msg) {\n            if(DEBUG) {\n             android.util.Log.e(tag, msg);\n            }\n        }\n        public static void e(String tag, String msg, Throwable tr) {\n            if(DEBUG) {\n             android.util.Log.e(tag, msg, tr);\n            }\n        }\n    }\n\n\n        ","slug":"Android怎么打Log","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1w000638a6b6r068twl"},{"title":"Android 录制操作视频","date":"2015-09-16T06:49:49.000Z","_content":"\n利用adb screenrecord的命令，系统Android4.4(API level 19)以上，支持mp4的视频格式\n\n##开始录制的命令\n\n    adb shell screenrecord /sdcard/demo.mp4\n\n##导出视屏\n\n    adb pull /sdcard/demo.mp4 D:/\n    \n##其他命令参数\n    \n    adb shell screenrecord --help\n    \n    ","source":"_posts/Android-录制操作视频.md","raw":"title: \"Android 录制操作视频\"\ndate: 2015-09-16 14:49:49\ntags: [Android, adb]\n---\n\n利用adb screenrecord的命令，系统Android4.4(API level 19)以上，支持mp4的视频格式\n\n##开始录制的命令\n\n    adb shell screenrecord /sdcard/demo.mp4\n\n##导出视屏\n\n    adb pull /sdcard/demo.mp4 D:/\n    \n##其他命令参数\n    \n    adb shell screenrecord --help\n    \n    ","slug":"Android-录制操作视频","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1w100658a6bn0s6dtyw"},{"title":"Android Studio 启动时找不到JVM","date":"2015-03-29T13:56:34.000Z","_content":"Mac OS-Android studio was unable to find a valid JVM解决办法\n\n---\nMac OSx 上安装Anroid Studio v1.0，官方说明是需要JDK 1.6以上&JRE 6以上版本的支持。\n\n出现找不到JVM时，请先检查是否安装了Java的环境。\n\n如果确认已经安装，但仍然出现这样的错误提示。原因是校验版本的时候出现问题。\n\n修改配置文件，将JVM版本信息改成你本机版本。\n\n---\n\n\n\n\n##具体步骤\n\n1.\n在应用程序中找到Android Studio.app \n\n2.\n右键显示包内容，在目录下找到 info.plist 并用任意文本编辑器打开\n\n3.\n找到 JVMVersion 并将 <string>1.6*</string>中的版本号改为你当前的JDK的版本号。 \n","source":"_posts/Android-Studio-启动找不到JVM.md","raw":"title: \"Android Studio 启动时找不到JVM\"\ndate: 2015-03-29 21:56:34\ntags: [Android]\n\n---\nMac OS-Android studio was unable to find a valid JVM解决办法\n\n---\nMac OSx 上安装Anroid Studio v1.0，官方说明是需要JDK 1.6以上&JRE 6以上版本的支持。\n\n出现找不到JVM时，请先检查是否安装了Java的环境。\n\n如果确认已经安装，但仍然出现这样的错误提示。原因是校验版本的时候出现问题。\n\n修改配置文件，将JVM版本信息改成你本机版本。\n\n---\n\n\n\n\n##具体步骤\n\n1.\n在应用程序中找到Android Studio.app \n\n2.\n右键显示包内容，在目录下找到 info.plist 并用任意文本编辑器打开\n\n3.\n找到 JVMVersion 并将 <string>1.6*</string>中的版本号改为你当前的JDK的版本号。 \n","slug":"Android-Studio-启动找不到JVM","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1w300698a6b8woylo17"},{"title":"Android Studio Gradle Error:java.io.IOException: Operation not supported","date":"2015-07-28T02:38:06.000Z","_content":"\n在mac上每次build gradle 都报这样的错误，java.io.IOException: Operation not supported\n\n原因是我的代码放在了windows上共享给mac，gradle不支持远程\n\n##参考\n\n[same problem in stackoverflow](http://stackoverflow.com/questions/28751793/android-studio-on-mac)","source":"_posts/Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported.md","raw":"title: \"Android Studio Gradle Error:java.io.IOException: Operation not supported\"\ndate: 2015-07-28 10:38:06\ntags: [Android]\n---\n\n在mac上每次build gradle 都报这样的错误，java.io.IOException: Operation not supported\n\n原因是我的代码放在了windows上共享给mac，gradle不支持远程\n\n##参考\n\n[same problem in stackoverflow](http://stackoverflow.com/questions/28751793/android-studio-on-mac)","slug":"Android-Studio-Gradle-Error-java-io-IOException-Operation-not-supported","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1w3006b8a6bldflp854"},{"title":"Android Url Scheme 所谓的唤醒","date":"2015-07-14T02:47:58.000Z","_content":"\n所谓的唤醒，就是从浏览器端（或者微信等第三方的app）打开指定app的动作。\n\nIOS上有Url scheme的概念，可以配置每个app的启动协议。就相当于用http的协议地址会默认打开Safari这个app一样。\n\n那么在安卓app中如何设置呢？\n\n只要在AndroidMainifest.xml中对你要启动的那个activity加入如下描述。\n\n        <activity\n            android:name=\"com.android.demo.MainActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n            <intent-filter android:priority=\"4000\">\n                <action android:name=\"android.intent.action.VIEW\"/>\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n                <data\n                    android:host=\"homepae\"\n                    android:scheme=\"myapp\" />\n            </intent-filter>\n\n        </activity>\n\n那么当我在浏览器中访问如 \"myapp://homepage\"这个协议地址时，它就会唤醒com.android.demo.MainActivity这个客户端的页面。\n","source":"_posts/Android Url Scheme-所谓的唤醒.md","raw":"title: \"Android Url Scheme 所谓的唤醒\"\ndate: 2015-07-14 10:47:58\ntags: [Android]\n---\n\n所谓的唤醒，就是从浏览器端（或者微信等第三方的app）打开指定app的动作。\n\nIOS上有Url scheme的概念，可以配置每个app的启动协议。就相当于用http的协议地址会默认打开Safari这个app一样。\n\n那么在安卓app中如何设置呢？\n\n只要在AndroidMainifest.xml中对你要启动的那个activity加入如下描述。\n\n        <activity\n            android:name=\"com.android.demo.MainActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n            <intent-filter android:priority=\"4000\">\n                <action android:name=\"android.intent.action.VIEW\"/>\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n                <data\n                    android:host=\"homepae\"\n                    android:scheme=\"myapp\" />\n            </intent-filter>\n\n        </activity>\n\n那么当我在浏览器中访问如 \"myapp://homepage\"这个协议地址时，它就会唤醒com.android.demo.MainActivity这个客户端的页面。\n","slug":"Android Url Scheme-所谓的唤醒","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1w4006d8a6bqflu7ppy"},{"title":"ADB server didn't ACK","date":"2015-08-17T09:06:41.000Z","_content":"\n##问题描述\n\n  Android真机调试的时候，出现ADB server didn't ACK，明明设备已经连接上，开发者选项也打开了。\n  \n##原因\n\n  cmd，启动adb服务发现启动失败。\n  \n  ![adb失败](/images/adbserverfail.jpg)\n    \n  看下为什么会失败。\n  \n    adb nodaemon server\n    \n  ![nodaemonserver](/images/nodaemon.jpg)  \n  \n  原来是端口被占用了。\n  \n  找到占用端口的进程，杀掉，重启adb server\n  \n    netstat -aon|findstr \"5037\"\n    \n  \n  ![adbstart](/images/startadb.jpg)\n  \n  \n##Note:\n  转自[百度经验](http://jingyan.baidu.com/article/454316aba27e49f7a7c03ab1.html)","source":"_posts/ADB-server-didnot-ACK.md","raw":"title: \"ADB server didn't ACK\"\ndate: 2015-08-17 17:06:41\ntags: [Android, adb]\n---\n\n##问题描述\n\n  Android真机调试的时候，出现ADB server didn't ACK，明明设备已经连接上，开发者选项也打开了。\n  \n##原因\n\n  cmd，启动adb服务发现启动失败。\n  \n  ![adb失败](/images/adbserverfail.jpg)\n    \n  看下为什么会失败。\n  \n    adb nodaemon server\n    \n  ![nodaemonserver](/images/nodaemon.jpg)  \n  \n  原来是端口被占用了。\n  \n  找到占用端口的进程，杀掉，重启adb server\n  \n    netstat -aon|findstr \"5037\"\n    \n  \n  ![adbstart](/images/startadb.jpg)\n  \n  \n##Note:\n  转自[百度经验](http://jingyan.baidu.com/article/454316aba27e49f7a7c03ab1.html)","slug":"ADB-server-didnot-ACK","published":1,"updated":"2015-12-27T13:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiolu1w6006f8a6bumi4tpnc"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciiolu1se00048a6blahxel4m","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1si00068a6b2hi82d3l"},{"post_id":"ciiolu1sj00078a6bsql88ujp","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1sk00098a6bj0n53sy9"},{"post_id":"ciiolu1sl000a8a6b037x75tx","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1sl000b8a6b0zbu197a"},{"post_id":"ciiolu1sm000c8a6b4bo5mrfh","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1sm000e8a6bf1h6qa3x"},{"post_id":"ciiolu1sn000f8a6bluzm9zqi","tag_id":"ciiolu1so000g8a6b957qnov9","_id":"ciiolu1so000h8a6bwnmepc7r"},{"post_id":"ciiolu1sp000i8a6bu83zx5qc","tag_id":"ciiolu1sq000j8a6b5nmob0mn","_id":"ciiolu1sq000k8a6b4uyju8kr"},{"post_id":"ciiolu1sq000l8a6bgcphjhql","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1ss000n8a6bv8ve55nz"},{"post_id":"ciiolu1st000o8a6bu92ofdks","tag_id":"ciiolu1su000p8a6bcm4q12xs","_id":"ciiolu1su000q8a6b3o0wfpln"},{"post_id":"ciiolu1st000o8a6bu92ofdks","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1su000r8a6bo3jt4gtj"},{"post_id":"ciiolu1sv000s8a6bkyjuu5f4","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1sv000t8a6byte6d92e"},{"post_id":"ciiolu1sw000u8a6bm6os8nk2","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1sx000v8a6brglfr0ay"},{"post_id":"ciiolu1sy000w8a6b57ysfh5h","tag_id":"ciiolu1su000p8a6bcm4q12xs","_id":"ciiolu1sy000x8a6bmg9q7i1o"},{"post_id":"ciiolu1t0000y8a6bihmuzn8k","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1t1000z8a6b0tsh6ni0"},{"post_id":"ciiolu1t100108a6bubcni4ho","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1t200118a6b101m5o23"},{"post_id":"ciiolu1t200128a6bwuart1j9","tag_id":"ciiolu1t300138a6bo670b6y3","_id":"ciiolu1t300148a6bi2mxo4nt"},{"post_id":"ciiolu1t200128a6bwuart1j9","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1t400158a6br8g6zt34"},{"post_id":"ciiolu1t400168a6bmev1khv3","tag_id":"ciiolu1sq000j8a6b5nmob0mn","_id":"ciiolu1t500178a6bndccfv6e"},{"post_id":"ciiolu1t600188a6bg7nc1ufb","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1t700198a6bez7wpcqh"},{"post_id":"ciiolu1t8001a8a6b8b9gmyi4","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1t8001b8a6b884509j7"},{"post_id":"ciiolu1tb001d8a6bh0x4wpsn","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1tb001e8a6bbmfgvxx8"},{"post_id":"ciiolu1tc001f8a6bf20s9201","tag_id":"ciiolu1sq000j8a6b5nmob0mn","_id":"ciiolu1tc001g8a6bj020v6ct"},{"post_id":"ciiolu1te001h8a6bsm7pkisx","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1te001j8a6b2kagzywx"},{"post_id":"ciiolu1tf001k8a6bon5plfoh","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1tf001l8a6bgdzolhi2"},{"post_id":"ciiolu1tg001m8a6b1jujkc7o","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1th001n8a6bqs7brsn9"},{"post_id":"ciiolu1th001o8a6bozwmdg28","tag_id":"ciiolu1ti001p8a6b8s289lze","_id":"ciiolu1tj001q8a6b3abu9zpg"},{"post_id":"ciiolu1tj001r8a6bjw240db1","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1tk001s8a6biup18jrk"},{"post_id":"ciiolu1tl001t8a6bhc72v1j1","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1tm001v8a6bgy22ofn2"},{"post_id":"ciiolu1tl001t8a6bhc72v1j1","tag_id":"ciiolu1tm001u8a6bqyq6v7gp","_id":"ciiolu1tm001w8a6bhtk5sjb1"},{"post_id":"ciiolu1tm001x8a6bh9fw9dpq","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1tn001y8a6blwsmiphg"},{"post_id":"ciiolu1to001z8a6bsm2ysti6","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1tp00208a6bfpbyyl1t"},{"post_id":"ciiolu1tq00218a6blbxtu1je","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1tr00228a6bbjeh7fob"},{"post_id":"ciiolu1ts00238a6byxewsk9r","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1ts00248a6b9vlkr3s6"},{"post_id":"ciiolu1tu00258a6b2y36tk4o","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1tv00268a6bj8hcsxpc"},{"post_id":"ciiolu1tw00278a6bh2m7sgnq","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1tx00288a6b409i8nmn"},{"post_id":"ciiolu1ty00298a6bqjjvu2xl","tag_id":"ciiolu1tz002a8a6bvmm92ntb","_id":"ciiolu1tz002b8a6b59x5kdmw"},{"post_id":"ciiolu1u0002c8a6buj6e0v4o","tag_id":"ciiolu1u1002d8a6b3sdprxoh","_id":"ciiolu1u1002e8a6bm6t1qxpu"},{"post_id":"ciiolu1u2002f8a6bktgm2p6h","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1u2002g8a6bauxw386q"},{"post_id":"ciiolu1u2002f8a6bktgm2p6h","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1u2002h8a6b69tvwxa6"},{"post_id":"ciiolu1u4002i8a6bwwbtghej","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1u5002k8a6bxtvpg46y"},{"post_id":"ciiolu1u4002i8a6bwwbtghej","tag_id":"ciiolu1u4002j8a6bx73aaf8y","_id":"ciiolu1u5002l8a6boatuqfsz"},{"post_id":"ciiolu1u7002m8a6bzadrukdl","tag_id":"ciiolu1u4002j8a6bx73aaf8y","_id":"ciiolu1u7002n8a6bva595185"},{"post_id":"ciiolu1u9002o8a6bdtr019ts","tag_id":"ciiolu1u4002j8a6bx73aaf8y","_id":"ciiolu1ua002p8a6b53z9woz3"},{"post_id":"ciiolu1ua002q8a6bsr8yojq1","tag_id":"ciiolu1ub002r8a6bawr1mquz","_id":"ciiolu1ub002s8a6bmeuzgur6"},{"post_id":"ciiolu1uc002t8a6b1oy8gri3","tag_id":"ciiolu1ub002r8a6bawr1mquz","_id":"ciiolu1uc002u8a6bvpa0m15t"},{"post_id":"ciiolu1ud002v8a6bb95ifnne","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1ud002w8a6b4hhrzvxb"},{"post_id":"ciiolu1ud002x8a6bbgdtlawo","tag_id":"ciiolu1sk00088a6bimadswpm","_id":"ciiolu1ue002y8a6bvljbo54t"},{"post_id":"ciiolu1ue002z8a6bjwqqvmsi","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1uf00318a6byr83hu92"},{"post_id":"ciiolu1ue002z8a6bjwqqvmsi","tag_id":"ciiolu1uf00308a6bi5xk42vj","_id":"ciiolu1uf00328a6bmqcwfd6q"},{"post_id":"ciiolu1ug00338a6bpriysl8d","tag_id":"ciiolu1uh00348a6bv61xeorm","_id":"ciiolu1uh00358a6bflwzm4ni"},{"post_id":"ciiolu1uh00368a6bjfk7kch3","tag_id":"ciiolu1uh00348a6bv61xeorm","_id":"ciiolu1uo00378a6bi9aspdf7"},{"post_id":"ciiolu1up00388a6bqia94byk","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1up00398a6b0d8gkeh4"},{"post_id":"ciiolu1up00388a6bqia94byk","tag_id":"ciiolu1tz002a8a6bvmm92ntb","_id":"ciiolu1uq003a8a6biqv2attz"},{"post_id":"ciiolu1uq003b8a6bllci3b1v","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1ur003c8a6boq4sg0jl"},{"post_id":"ciiolu1uq003b8a6bllci3b1v","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1ur003d8a6b0snduztz"},{"post_id":"ciiolu1ur003e8a6bn42v163m","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1us003f8a6bikz228sb"},{"post_id":"ciiolu1ur003e8a6bn42v163m","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1us003g8a6b50mjik9c"},{"post_id":"ciiolu1ut003h8a6b1ylzjm8a","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1ut003i8a6bdewmr22f"},{"post_id":"ciiolu1uu003j8a6bunmlt777","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1uv003k8a6bodcf8vaz"},{"post_id":"ciiolu1uv003l8a6b2tymon36","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1uv003m8a6bi2ztsk29"},{"post_id":"ciiolu1uv003l8a6b2tymon36","tag_id":"ciiolu1tm001u8a6bqyq6v7gp","_id":"ciiolu1uw003n8a6b2rlpdm10"},{"post_id":"ciiolu1ux003o8a6bzwzqg170","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1ux003p8a6bb5p4vfjh"},{"post_id":"ciiolu1uy003q8a6b3wjkkd7m","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1uy003r8a6bpbl83mpv"},{"post_id":"ciiolu1uy003q8a6b3wjkkd7m","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1uz003s8a6b7zfyqdqk"},{"post_id":"ciiolu1uz003t8a6butln0dul","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1uz003u8a6beye7zd51"},{"post_id":"ciiolu1v0003v8a6bsmwsd0aj","tag_id":"ciiolu1te001i8a6bsvbq0wtx","_id":"ciiolu1v0003w8a6brqq4ji4y"},{"post_id":"ciiolu1v1003x8a6but1m5eum","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1v2003z8a6beldxkeah"},{"post_id":"ciiolu1v1003x8a6but1m5eum","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1v200408a6b4dgw5ixo"},{"post_id":"ciiolu1v200418a6bq10mjx75","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1v300428a6bb0wp5d4v"},{"post_id":"ciiolu1v200418a6bq10mjx75","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1v300438a6b2uk60skt"},{"post_id":"ciiolu1v300448a6bx7m9f0zu","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1v400458a6b1hlsq8tv"},{"post_id":"ciiolu1v300448a6bx7m9f0zu","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1v400468a6bno6jk560"},{"post_id":"ciiolu1v400478a6bnjlftpec","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1v500488a6b517r3cl6"},{"post_id":"ciiolu1v400478a6bnjlftpec","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1v500498a6b10bpy2q2"},{"post_id":"ciiolu1v6004a8a6b0bor1ra2","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1v6004b8a6byk70htnw"},{"post_id":"ciiolu1v6004a8a6b0bor1ra2","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1v6004c8a6b9jqbdijy"},{"post_id":"ciiolu1v7004d8a6b97sl7ltg","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1v8004e8a6bnzpqywg8"},{"post_id":"ciiolu1v7004d8a6b97sl7ltg","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1v8004f8a6bjde7zrjz"},{"post_id":"ciiolu1v9004g8a6bta7dthbx","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1v9004h8a6bf9ozezbg"},{"post_id":"ciiolu1v9004g8a6bta7dthbx","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1v9004i8a6b7a9vvlu5"},{"post_id":"ciiolu1va004j8a6b0u4rw60o","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1va004k8a6bdg8lj2uz"},{"post_id":"ciiolu1va004j8a6b0u4rw60o","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1va004l8a6bhqzni5b3"},{"post_id":"ciiolu1vb004m8a6bd1hxp451","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vb004n8a6bxe3d25ss"},{"post_id":"ciiolu1vb004m8a6bd1hxp451","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vc004o8a6b5gjw8w4o"},{"post_id":"ciiolu1vc004p8a6bn53d2xdi","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vc004q8a6br3j7eiop"},{"post_id":"ciiolu1vc004p8a6bn53d2xdi","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vd004r8a6bswuhg4yw"},{"post_id":"ciiolu1vd004s8a6biec9rsvl","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1ve004t8a6bz40s2tid"},{"post_id":"ciiolu1vd004s8a6biec9rsvl","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1ve004u8a6bh3bbmjbb"},{"post_id":"ciiolu1vf004v8a6b5r136j65","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vg004w8a6btfv9m4zn"},{"post_id":"ciiolu1vf004v8a6b5r136j65","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vg004x8a6bdxgkb31p"},{"post_id":"ciiolu1vg004y8a6b7re5b4sc","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vh004z8a6bpcs2rbdy"},{"post_id":"ciiolu1vg004y8a6b7re5b4sc","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vh00508a6b9q1ee6bb"},{"post_id":"ciiolu1vi00518a6b4hs4w013","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vi00528a6bx25gpc2m"},{"post_id":"ciiolu1vi00518a6b4hs4w013","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vi00538a6bw2o5fx13"},{"post_id":"ciiolu1vk00548a6bg532301q","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vk00558a6bc8aor9q3"},{"post_id":"ciiolu1vk00548a6bg532301q","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vk00568a6bqwez7qzi"},{"post_id":"ciiolu1vl00578a6bkr2i6sjy","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vl00588a6b3h1y20d3"},{"post_id":"ciiolu1vl00578a6bkr2i6sjy","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vm00598a6b8rfb97sz"},{"post_id":"ciiolu1vm005a8a6b6a3mv4dm","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vn005b8a6btaycdm8d"},{"post_id":"ciiolu1vm005a8a6b6a3mv4dm","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vn005c8a6b9q9pmt39"},{"post_id":"ciiolu1vn005d8a6buausnorm","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vo005e8a6bod7p92hf"},{"post_id":"ciiolu1vn005d8a6buausnorm","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vo005f8a6bai1wcg77"},{"post_id":"ciiolu1vo005g8a6bcfahj8h9","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vp005h8a6bo5pujjyv"},{"post_id":"ciiolu1vo005g8a6bcfahj8h9","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vp005i8a6brb5n5owo"},{"post_id":"ciiolu1vp005j8a6b3sodzuh0","tag_id":"ciiolu1ss000m8a6b6vm8ayjq","_id":"ciiolu1vq005k8a6byihns38p"},{"post_id":"ciiolu1vp005j8a6b3sodzuh0","tag_id":"ciiolu1v1003y8a6bhn2h6vp6","_id":"ciiolu1vq005l8a6b7c6bqvkt"},{"post_id":"ciiolu1vr005m8a6bclzbvzix","tag_id":"ciiolu1vs005n8a6b0dq9r1yf","_id":"ciiolu1vs005o8a6b2sokp9hr"},{"post_id":"ciiolu1vr005m8a6bclzbvzix","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1vs005p8a6beqo05ksa"},{"post_id":"ciiolu1vt005q8a6b0gipv00m","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1vt005r8a6b5cw9vysp"},{"post_id":"ciiolu1vt005q8a6b0gipv00m","tag_id":"ciiolu1u4002j8a6bx73aaf8y","_id":"ciiolu1vt005s8a6bmys0bcil"},{"post_id":"ciiolu1vu005t8a6bubhghp42","tag_id":"ciiolu1tm001u8a6bqyq6v7gp","_id":"ciiolu1vu005u8a6b3pc5ytuy"},{"post_id":"ciiolu1vv005v8a6bus5hfyc0","tag_id":"ciiolu1sq000j8a6b5nmob0mn","_id":"ciiolu1vv005w8a6bu9ljrd7a"},{"post_id":"ciiolu1vw005x8a6byk28qp88","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1vw005y8a6b2404q60v"},{"post_id":"ciiolu1vx005z8a6b2hxh0j31","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1vy00608a6b31cbmd23"},{"post_id":"ciiolu1vy00618a6bxxjteg7l","tag_id":"ciiolu1sh00058a6b1xbfe27e","_id":"ciiolu1vz00628a6bq2ms7gle"},{"post_id":"ciiolu1w000638a6b6r068twl","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1w000648a6b58unk2c9"},{"post_id":"ciiolu1w100658a6bn0s6dtyw","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1w200678a6bzfg836u2"},{"post_id":"ciiolu1w100658a6bn0s6dtyw","tag_id":"ciiolu1w200668a6b8pah8g21","_id":"ciiolu1w200688a6b4iw4p31e"},{"post_id":"ciiolu1w300698a6b8woylo17","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1w3006a8a6bzw5qsp4b"},{"post_id":"ciiolu1w3006b8a6bldflp854","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1w4006c8a6bbbkur6gl"},{"post_id":"ciiolu1w4006d8a6bqflu7ppy","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1w5006e8a6bq7ltf2mo"},{"post_id":"ciiolu1w6006f8a6bumi4tpnc","tag_id":"ciiolu1sm000d8a6bdmpfwt4i","_id":"ciiolu1w7006g8a6bjgjkkcdi"},{"post_id":"ciiolu1w6006f8a6bumi4tpnc","tag_id":"ciiolu1w200668a6b8pah8g21","_id":"ciiolu1w7006h8a6b42smv7o8"}],"Tag":[{"name":"工具","_id":"ciiolu1sh00058a6b1xbfe27e"},{"name":"JavaScript","_id":"ciiolu1sk00088a6bimadswpm"},{"name":"Android","_id":"ciiolu1sm000d8a6bdmpfwt4i"},{"name":"故障排查","_id":"ciiolu1so000g8a6b957qnov9"},{"name":"日常","_id":"ciiolu1sq000j8a6b5nmob0mn"},{"name":"算法","_id":"ciiolu1ss000m8a6b6vm8ayjq"},{"name":"正则","_id":"ciiolu1su000p8a6bcm4q12xs"},{"name":"Monkey","_id":"ciiolu1t300138a6bo670b6y3"},{"name":"mac","_id":"ciiolu1te001i8a6bsvbq0wtx"},{"name":"Html","_id":"ciiolu1ti001p8a6b8s289lze"},{"name":"webstorm","_id":"ciiolu1tm001u8a6bqyq6v7gp"},{"name":"node","_id":"ciiolu1tz002a8a6bvmm92ntb"},{"name":"markdown","_id":"ciiolu1u1002d8a6b3sdprxoh"},{"name":"git","_id":"ciiolu1u4002j8a6bx73aaf8y"},{"name":"css","_id":"ciiolu1ub002r8a6bawr1mquz"},{"name":"异常","_id":"ciiolu1uf00308a6bi5xk42vj"},{"name":"React","_id":"ciiolu1uh00348a6bv61xeorm"},{"name":"LeetCode","_id":"ciiolu1v1003y8a6bhn2h6vp6"},{"name":"IOS","_id":"ciiolu1vs005n8a6b0dq9r1yf"},{"name":"adb","_id":"ciiolu1w200668a6b8pah8g21"}]}}